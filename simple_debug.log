[94m[Info]    [0m[Reporting.Logs.logInfo#52] Parsing: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Parsed: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Transformed: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> int foo(int a)
{
	return (2 + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> int foo(int a)
{
	return (2 + a);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> return (2 + a);
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- return ((int)(2) + a);
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- int foo(int a)
{
	return ((int)(2) + a);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> int main()
{
	printInt(foo((2 + 2)));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> printInt(foo((2 + 2)));
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- printInt(foo((2 + 2)));
[94m[Info]    [0m[Reporting.Logs.logInfo#52] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] after  <- int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Typecheck donesimple.lat

int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] ConstPropagation.run before:int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] ConstPropagation.run after:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Optimizing AST round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#52] ConstPropagation.run before:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] ConstPropagation.run after:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Optimizing AST round 2 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Optimization donesimple.lat

int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#52] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#52] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Initial IR: 
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_1 = <int>2
    int t_2 = <int>t_0 + <int>t_1
    return <int>t_2

int main()
    byte t_3 = <byte>4
    int t_4 =     call<function> foo(<int>t_3)
    byte t_5 =     call<function> printInt(<int>t_4)
    int t_6 = <int>0
    return <int>t_6


[94m[Info]    [0m[Reporting.Logs.logInfo#52] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Optimizing IR round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#52] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_1 = <int>2
    int t_2 = <int>t_0 + <int>t_1
    return <int>t_2

int main()
    byte t_3 = <byte>4
    int t_4 =     call<function> foo(<int>t_3)
    byte t_5 =     call<function> printInt(<int>t_4)
    int t_6 = <int>0
    return <int>t_6


[94m[Info]    [0m[Reporting.Logs.logInfo#52] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#52] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Optimizing IR round 2 (took 31 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#52] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#52] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#52] Running linearizer internal transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#52] AST to convert:
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#52] Successfully completed internal linearizer transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#52] Linearizer terminated
[94m[Info]    [0m[Reporting.Logs.logInfo#52] IR conversion donesimple.lat

.metadata: [
  .classes: [
    Array  extends [SymIdent "Array", SymIdent "Object"] : [
      .fields: [
        Object & elements;
        int length;
        int elementSize;
      ]
      .methods: [
        int (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Array.toString;
      ]
    ]
    Object  extends [SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
      ]
    ]
    String  extends [SymIdent "String", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (int)String.charAt;
        int (Object &)String.equals;
        String & (String &)String.concat;
        int (String &)String.startsWith;
        int (String &)String.endsWith;
        int [] & () String.getBytes;
        int (int)String.indexOf;
        int () String.length;
        String & (int)String.substring;
        String & () String.toString;
        int () String.getHashCode;
      ]
    ]
    ~cl_TopLevel  extends [] : [
      .fields: [
        ]
      .methods: [
        Array & () Array.toString;
        Object & () Object.toString;
        int () Object.getHashCode;
        int (Object &)Object.equals;
        int (Object &)String.equals;
        int () String.getHashCode;
        String & () String.toString;
        String & () String.substring;
        int () String.length;
        int (String &, int)String.indexOf;
        String & () String.getBytes;
        int (String &)String.endsWith;
        int (String &)String.startsWith;
        String & (String &, String &)String.concat;
        int (int)String.charAt;
        int (String &)~cl_TopLevel.printString;
        int (int)~cl_TopLevel.printInt;
        int (int)~cl_TopLevel.printByte;
        int (int)~cl_TopLevel.printBoolean;
        int (Array &)~cl_TopLevel.printBinArray;
        String & (int)~cl_TopLevel.byteToString;
        String & (int)~cl_TopLevel.boolToString;
        String & (int)~cl_TopLevel.intToString;
        int (Object &)~cl_TopLevel.print;
        int () ~cl_TopLevel.error;
        int () ~cl_TopLevel.readInt;
        String & () ~cl_TopLevel.readString;
        Object & (Object &, Object &)~cl_TopLevel.__cast;
        int (int)~cl_TopLevel.foo;
        int () ~cl_TopLevel.main;
      ]
    ]
  ]
]
.method int ~cl_TopLevel.foo (int %a_t_0): [
.L_entry:
  %v_t_0 := load int & param 0 %a_t_0;
  %v_t_2 := int %v_t_0 + 2;
  %v___temp_0 := int %v_t_2;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_4 := call int ~cl_TopLevel.foo (4);
  call int ~cl_TopLevel.printInt (int %v_t_4);
  %v___temp_1 := 0;
  %v_return := int %v___temp_1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED CFGS

CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(1,Ref () (Int ())))], out = [("%a_t_0",(0,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(4,Int ()))], out = [("%v_t_2",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_2",(2,Int ()))], out = [("%v_t_2",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(4,Int ()))], out = [("%v_t_2",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_2",(2,Int ()))], out = [("%v_t_2",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] [%a_t_0 (reg preference: CallerSaved) (rdi): []
%v_t_0 (reg preference: CallerSaved) (rax): []
%v_t_2 (reg preference: CallerSaved) (rax): []
,%v_t_4 (reg preference: CallerSaved) (rax): []
~arg_0_rdi (reg preference: CallerSaved) (rdi): []
~arg_1_rdi (reg preference: CallerSaved) (rdi): []
]
[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry"]
".L_entry" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> GENERATED INTERMEDIATE STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] CFG for ~cl_TopLevel.foo:
[".L_entry"]
".L_entry" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#52] >> END STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#52] Compilation donesimple.lat

.extern _Array_toString
.extern _Object_toString
.extern _Object_getHashCode
.extern _Object_equals
.extern _String_equals
.extern _String_getHashCode
.extern _String_toString
.extern _String_substring
.extern _String_length
.extern _String_indexOf
.extern _String_getBytes
.extern _String_endsWith
.extern _String_startsWith
.extern _String_concat
.extern _String_charAt
.extern printString
.extern printInt
.extern printByte
.extern printBoolean
.extern printBinArray
.extern byteToString
.extern boolToString
.extern intToString
.extern print
.extern error
.extern readInt
.extern readString
.extern __cast
.global main
 # Class metadata:
 # Class Array:
 #   Fields:
 #     Field name:   elements
 #     Field type:   Ref () (Cl () (SymIdent "Object"))
 #     Field offset: 0
 #     Field size:   8
 #     Field name:   length
 #     Field type:   Int ()
 #     Field offset: 8
 #     Field size:   4
 #     Field name:   elementSize
 #     Field type:   Int ()
 #     Field offset: 12
 #     Field size:   4
 # Class Object:
 #   Fields:
 # Class String:
 #   Fields:
 # Class ~cl_TopLevel:
 #   Fields:

.global _class_Array
.global _class_Array_methods
_class_Array:
  .quad _class_Object
  .long 16
  .quad _class_Array_methods
  .long 0
  .quad 0
_class_Array_methods:
  .quad _Object_equals
  .quad _Object_getHashCode
  .quad _Array_toString
.global _class_Object
.global _class_Object_methods
_class_Object:
  .quad 0
  .long 0
  .quad _class_Object_methods
  .long 0
  .quad 0
_class_Object_methods:
  .quad _Object_equals
  .quad _Object_getHashCode
  .quad _Object_toString
.global _class_String
.global _class_String_methods
_class_String:
  .quad _class_Object
  .long 0
  .quad _class_String_methods
  .long 0
  .quad 0
_class_String_methods:
  .quad _String_charAt
  .quad _String_equals
  .quad _String_concat
  .quad _String_startsWith
  .quad _String_endsWith
  .quad _String_getBytes
  .quad _String_indexOf
  .quad _String_length
  .quad _String_substring
  .quad _String_toString
  .quad _String_getHashCode

__errorNull: # runtime error on null dereference
  andq $-16, %rsp # 16 bytes allign
  call __errorNull


 # Register allocation:
 # [(ValIdent "%a_t_0",rdi),(ValIdent "%v_t_0",rax),(ValIdent "%v_t_2",rax)]

__cl_TopLevel.foo:
  push %rbp
  movq %rsp, %rbp
  subq $0, %rsp # space for locals
__cl_TopLevel.foo.L_entry:
  movl %edi, %eax # load %v_t_0
  addl $2, %eax
  movl %eax, %eax # move return value
  addq $0, %rsp
  leave
  ret

main:
 # Register allocation:
 # [(ValIdent "%v_t_4",rax),(ValIdent "~arg_0_rdi",rdi),(ValIdent "~arg_1_rdi",rdi)]

__cl_TopLevel.main:
  push %rbp
  movq %rsp, %rbp
  subq $0, %rsp # space for locals
__cl_TopLevel.main.L_entry:
  movl $4, %edi # passing arg
  subq $0, %rsp # 16 bytes alignment
  call __cl_TopLevel.foo
  addq $0, %rsp
  movl %eax, %eax
  movl %eax, %edi # passing arg
  subq $0, %rsp # 16 bytes alignment
  call printInt
  addq $0, %rsp
  movl $0, %eax # move return value
  addq $0, %rsp
  leave
  ret


