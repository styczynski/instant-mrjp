[94m[Info]    [0m[Reporting.Logs.logInfo#51] Parsing: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Parsed: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Transformed: simple.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> int foo(int a)
{
	return (2 + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> int foo(int a)
{
	return (2 + a);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> return (2 + a);
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- return ((int)(2) + a);
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- int foo(int a)
{
	return ((int)(2) + a);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> int main()
{
	printInt(foo((2 + 2)));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> printInt(foo((2 + 2)));
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- printInt(foo((2 + 2)));
[94m[Info]    [0m[Reporting.Logs.logInfo#51] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] after  <- int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Typecheck donesimple.lat

int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] ConstPropagation.run before:int foo(int a)
{
	return ((int)(2) + a);
}

int main()
{
	printInt(foo((2 + 2)));
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] ConstPropagation.run after:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Optimizing AST round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#51] ConstPropagation.run before:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] ConstPropagation.run after:int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Optimizing AST round 2 (took 9 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Optimization donesimple.lat

int foo(int _var_3000019#a)
{
	return (2 + _var_3000019#a);
}

int main()
{
	printInt(foo(4));
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#51] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Initial IR: 
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_1 = <int>2
    int t_2 = <int>t_0 + <int>t_1
    return <int>t_2

int main()
    byte t_3 = <byte>4
    int t_4 =     call<function> foo(<int>t_3)
    byte t_5 =     call<function> printInt(<int>t_4)
    int t_6 = <int>0
    return <int>t_6


[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Optimizing IR round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#51] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_1 = <int>2
    int t_2 = <int>t_0 + <int>t_1
    return <int>t_2

int main()
    byte t_3 = <byte>4
    int t_4 =     call<function> foo(<int>t_3)
    byte t_5 =     call<function> printInt(<int>t_4)
    int t_6 = <int>0
    return <int>t_6


[94m[Info]    [0m[Reporting.Logs.logInfo#51] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Optimizing IR round 2 (took 2 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#51] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#51] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running linearizer internal transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#51] AST to convert:
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Object extends [Object]
    method byte Object.equals ( obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct String extends [String, Object]
    method int String.charAt ( int)
    method byte String.equals ( obj<Object>)
    method obj<String> String.concat ( obj<String>)
    method byte String.startsWith ( obj<String>)
    method byte String.endsWith ( obj<String>)
    method array<byte> String.getBytes ()
    method int String.indexOf ( int)
    method int String.length ()
    method obj<String> String.substring ( int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int foo(int t_0)
    int t_2 = <int>t_0 + <int>2
    return <int>t_2

int main()
    int t_4 =     call<function> foo(<byte>4)
    discard<byte> call<function> printInt(<int>t_4)
    return <int>0


[94m[Info]    [0m[Reporting.Logs.logInfo#51] Successfully completed internal linearizer transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Linearizer terminated
[94m[Info]    [0m[Reporting.Logs.logInfo#51] IR conversion donesimple.lat

.metadata: [
  .classes: [
    Array  extends [SymIdent "Array", SymIdent "Object"] : [
      .fields: [
        Object & elements;
        int length;
        int elementSize;
      ]
      .methods: [
        int (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Array.toString;
      ]
    ]
    Object  extends [SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
      ]
    ]
    String  extends [SymIdent "String", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (int)String.charAt;
        int (Object &)String.equals;
        String & (String &)String.concat;
        int (String &)String.startsWith;
        int (String &)String.endsWith;
        int [] & () String.getBytes;
        int (int)String.indexOf;
        int () String.length;
        String & (int)String.substring;
        String & () String.toString;
        int () String.getHashCode;
      ]
    ]
    ~cl_TopLevel  extends [] : [
      .fields: [
        ]
      .methods: [
        Array & () Array.toString;
        Object & () Object.toString;
        int () Object.getHashCode;
        int (Object &)Object.equals;
        int (Object &)String.equals;
        int () String.getHashCode;
        String & () String.toString;
        String & () String.substring;
        int () String.length;
        int (String &, int)String.indexOf;
        String & () String.getBytes;
        int (String &)String.endsWith;
        int (String &)String.startsWith;
        String & (String &, String &)String.concat;
        int (int)String.charAt;
        int (String &)~cl_TopLevel.printString;
        int (int)~cl_TopLevel.printInt;
        int (int)~cl_TopLevel.printByte;
        int (int)~cl_TopLevel.printBoolean;
        int (Array &)~cl_TopLevel.printBinArray;
        String & (int)~cl_TopLevel.byteToString;
        String & (int)~cl_TopLevel.boolToString;
        String & (int)~cl_TopLevel.intToString;
        int (Object &)~cl_TopLevel.print;
        int () ~cl_TopLevel.error;
        int () ~cl_TopLevel.readInt;
        String & () ~cl_TopLevel.readString;
        Object & (Object &, Object &)~cl_TopLevel.__cast;
        int (int)~cl_TopLevel.foo;
        int () ~cl_TopLevel.main;
      ]
    ]
  ]
]
.method int ~cl_TopLevel.foo (int %a_t_0): [
.L_entry:
  %v_t_0 := load int & param 0 %a_t_0;
  %v_t_2 := int %v_t_0 + 2;
  %v___temp_0 := int %v_t_2;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_4 := call int ~cl_TopLevel.foo (4);
  call int ~cl_TopLevel.printInt (int %v_t_4);
  %v___temp_1 := 0;
  %v_return := int %v___temp_1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED CFGS

CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(1,Ref () (Int ())))], out = [("%a_t_0",(0,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> ENTIRE SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#51] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [Param () (Int ()) (ValIdent "%a_t_0")] [ILabel () (LabIdent ".L_entry"),ILoad () (ValIdent "%v_t_0") (PParam () (Ref () (Int ())) 0 (ValIdent "%a_t_0")),IOp () (ValIdent "%v_t_2") (VVal () (Int ()) (ValIdent "%v_t_0")) (OpAdd ()) (VInt () 2),ISet () (ValIdent "%v___temp_0") (VVal () (Int ()) (ValIdent "%v_t_2")),ISet () (ValIdent "%v_return") (VVal () (Int ()) (ValIdent "%v___temp_0")),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IRet () (VVal () (Int ()) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel () (LabIdent ".L_entry"),ICall () (ValIdent "%v_t_4") (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [VInt () 4] []),IVCall () (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal () (Int ()) (ValIdent "%v_t_4")] []),ISet () (ValIdent "%v___temp_1") (VInt () 0),ISet () (ValIdent "%v_return") (VVal () (Int ()) (ValIdent "%v___temp_1")),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IRet () (VVal () (Int ()) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> ENTIRE OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#51] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [Param () (Int ()) (ValIdent "%a_t_0")] [ILabel () (LabIdent ".L_entry"),ILoad () (ValIdent "%v_t_0") (PParam () (Ref () (Int ())) 0 (ValIdent "%a_t_0")),IOp () (ValIdent "%v_t_2") (VVal () (Int ()) (ValIdent "%v_t_0")) (OpAdd ()) (VInt () 2),ISet () (ValIdent "%v___temp_0") (VVal () (Int ()) (ValIdent "%v_t_2")),ISet () (ValIdent "%v_return") (VVal () (Int ()) (ValIdent "%v___temp_0")),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IRet () (VVal () (Int ()) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel () (LabIdent ".L_entry"),ICall () (ValIdent "%v_t_4") (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [VInt () 4] []),IVCall () (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal () (Int ()) (ValIdent "%v_t_4")] []),ISet () (ValIdent "%v___temp_1") (VInt () 0),ISet () (ValIdent "%v_return") (VVal () (Int ()) (ValIdent "%v___temp_1")),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IRet () (VVal () (Int ()) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(4,Int ()))], out = [("%v_t_2",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_2",(2,Int ()))], out = [("%v_t_2",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(4,Int ()))], out = [("%v_t_2",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_2",(2,Int ()))], out = [("%v_t_2",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] [%a_t_0 (reg preference: CallerSaved) (RDI): []
%v_t_0 (reg preference: CallerSaved) (RAX): []
%v_t_2 (reg preference: CallerSaved) (RAX): []
,%v_t_4 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> GENERATED INTERMEDIATE STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] CFG for ~cl_TopLevel.foo:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [("%a_t_0",(2,Ref () (Int ())))], out = [("%a_t_0",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_2",(4,Int ()))], out = [("%v_t_2",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_2",(2,Int ()))], out = [("%v_t_2",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_2",(0,Int ()))], out = [], use = [("%v_t_2",Int ())], kill = []

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []


[94m[Info]    [0m[Reporting.Logs.logInfo#51] >> END STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#51] COMPL_ DONEsimple.lat

CompiledProg () (Meta () [ClDef () (SymIdent "Array") [SymIdent "Array",SymIdent "Object"] [FldDef () (Ref () (Cl () (SymIdent "Object"))) (SymIdent "elements"),FldDef () (Int ()) (SymIdent "length"),FldDef () (Int ()) (SymIdent "elementSize")] [MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "Object") (SymIdent "equals")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "Object") (SymIdent "getHashCode")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "Array") (SymIdent "toString"))],ClDef () (SymIdent "Object") [SymIdent "Object"] [] [MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "Object") (SymIdent "equals")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "Object") (SymIdent "getHashCode")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "Object") (SymIdent "toString"))],ClDef () (SymIdent "String") [SymIdent "String",SymIdent "Object"] [] [MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "String") (SymIdent "charAt")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "String") (SymIdent "equals")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "concat")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "startsWith")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "endsWith")),MthdDef () (FType () (Ref () (Arr () (Int ()))) []) (QIdent () (SymIdent "String") (SymIdent "getBytes")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "String") (SymIdent "indexOf")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "String") (SymIdent "length")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Int ()]) (QIdent () (SymIdent "String") (SymIdent "substring")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "String") (SymIdent "toString")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "String") (SymIdent "getHashCode"))],ClDef () (SymIdent "~cl_TopLevel") [] [] [MthdDef () (FType () (Ref () (Cl () (SymIdent "Array"))) []) (QIdent () (SymIdent "Array") (SymIdent "toString")),MthdDef () (FType () (Ref () (Cl () (SymIdent "Object"))) []) (QIdent () (SymIdent "Object") (SymIdent "toString")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "Object") (SymIdent "getHashCode")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "Object") (SymIdent "equals")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "String") (SymIdent "equals")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "String") (SymIdent "getHashCode")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "String") (SymIdent "toString")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "String") (SymIdent "substring")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "String") (SymIdent "length")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String")),Int ()]) (QIdent () (SymIdent "String") (SymIdent "indexOf")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "String") (SymIdent "getBytes")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "endsWith")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "startsWith")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Ref () (Cl () (SymIdent "String")),Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "String") (SymIdent "concat")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "String") (SymIdent "charAt")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "String"))]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printString")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printInt")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printByte")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printBoolean")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Array"))]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printBinArray")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "byteToString")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "boolToString")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "intToString")),MthdDef () (FType () (Int ()) [Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "print")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "error")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "readInt")),MthdDef () (FType () (Ref () (Cl () (SymIdent "String"))) []) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "readString")),MthdDef () (FType () (Ref () (Cl () (SymIdent "Object"))) [Ref () (Cl () (SymIdent "Object")),Ref () (Cl () (SymIdent "Object"))]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "__cast")),MthdDef () (FType () (Int ()) [Int ()]) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")),MthdDef () (FType () (Int ()) []) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "main"))]]) [([".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [Param () (Int ()) (ValIdent "%a_t_0")] [ILabel () (LabIdent ".L_entry"),IEndPhi (),ILoad () (ValIdent "%v/usr/bin/ld: /tmp/ccAcAGlm.o: warning: relocation against `_String_getBytes' in read-only section `.rodata'
/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
_t_0") (PParam () (Ref () (Int ())) 0 (ValIdent "%a_t_0")),IOp () (ValIdent "%v_t_2") (VVal () (Int ()) (ValIdent "%v_t_0")) (OpAdd ()) (VInt () 2),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IEndPhi (),IRet () (VVal () (Int ()) (ValIdent "%v_t_2"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_0",RDI),(ValIdent "%v_t_0",RAX),(ValIdent "%v_t_2",RAX)], numLocals = 0}),([".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"]
".L_exit" -> fromList []
,Mthd () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel () (LabIdent ".L_entry"),IEndPhi (),ICall () (ValIdent "%v_t_4") (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "foo")) [VInt () 4] []),IVCall () (Call () (Int ()) (QIdent () (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal () (Int ()) (ValIdent "%v_t_4")] []),IJmp () (LabIdent ".L_exit"),ILabel () (LabIdent ".L_exit"),IEndPhi (),IRet () (VInt () 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_4",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0})]
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Running correct compiler backend: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Created file: simple.s
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Calling backend compile step: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Run GCC for X64 backend to generate 'simple' executable from object file 'simple.o'
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Executing command 'gcc -fPIE -Lsrc/Runtime/dependencies/_built_/lib lib/runtime -l:libunistring.a simple.s -o simple -z noexecstack'
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Command executed successfully.
[94m[Info]    [0m[Reporting.Logs.logInfo#51] Cleanup leftover object file: 'simple.o'
