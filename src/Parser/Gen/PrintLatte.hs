-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Parser.

module Parser.Gen.PrintLatte where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Parser.Gen.AbsLatte

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Parser.Gen.AbsLatte.Ident where
  prt _ (Parser.Gen.AbsLatte.Ident i) = doc $ showString i
instance Print (Parser.Gen.AbsLatte.MIdent' a) where
  prt i = \case
    Parser.Gen.AbsLatte.MIdent _ id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print (Parser.Gen.AbsLatte.Program' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (Parser.Gen.AbsLatte.TopDef' a) where
  prt i = \case
    Parser.Gen.AbsLatte.FnDef _ type_ mident args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
    Parser.Gen.AbsLatte.ClDef _ mident classext clmembers -> prPrec i 0 (concatD [doc (showString "class"), prt 0 mident, prt 0 classext, doc (showString "{"), prt 0 clmembers, doc (showString "}")])

instance Print [Parser.Gen.AbsLatte.TopDef' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Parser.Gen.AbsLatte.ClassExt' a) where
  prt i = \case
    Parser.Gen.AbsLatte.EmptyExt _ -> prPrec i 0 (concatD [])
    Parser.Gen.AbsLatte.Ext _ mident -> prPrec i 0 (concatD [doc (showString "extends"), prt 0 mident])

instance Print (Parser.Gen.AbsLatte.ClMember' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Field _ type_ mident -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident, doc (showString ";")])
    Parser.Gen.AbsLatte.Method _ type_ mident args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])

instance Print [Parser.Gen.AbsLatte.ClMember' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Parser.Gen.AbsLatte.Arg' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Arg _ type_ mident -> prPrec i 0 (concatD [prt 0 type_, prt 0 mident])

instance Print [Parser.Gen.AbsLatte.Arg' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.Gen.AbsLatte.Block' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Block _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [Parser.Gen.AbsLatte.Stmt' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Parser.Gen.AbsLatte.Stmt' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    Parser.Gen.AbsLatte.BStmt _ block -> prPrec i 0 (concatD [prt 0 block])
    Parser.Gen.AbsLatte.Decl _ type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    Parser.Gen.AbsLatte.Ass _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "="), prt 0 expr2, doc (showString ";")])
    Parser.Gen.AbsLatte.Incr _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString "++"), doc (showString ";")])
    Parser.Gen.AbsLatte.Decr _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString "--"), doc (showString ";")])
    Parser.Gen.AbsLatte.Ret _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    Parser.Gen.AbsLatte.VRet _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    Parser.Gen.AbsLatte.Cond _ expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    Parser.Gen.AbsLatte.CondElse _ expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    Parser.Gen.AbsLatte.While _ expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    Parser.Gen.AbsLatte.SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    Parser.Gen.AbsLatte.For _ type_ mident expr stmt -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 type_, prt 0 mident, doc (showString ":"), prt 0 expr, doc (showString ")"), prt 0 stmt])

instance Print (Parser.Gen.AbsLatte.Item' a) where
  prt i = \case
    Parser.Gen.AbsLatte.NoInit _ mident -> prPrec i 0 (concatD [prt 0 mident])
    Parser.Gen.AbsLatte.Init _ mident expr -> prPrec i 0 (concatD [prt 0 mident, doc (showString "="), prt 0 expr])

instance Print [Parser.Gen.AbsLatte.Item' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.Gen.AbsLatte.Type' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Var _ -> prPrec i 0 (concatD [doc (showString "var")])
    Parser.Gen.AbsLatte.Void _ -> prPrec i 0 (concatD [doc (showString "void")])
    Parser.Gen.AbsLatte.Array _ type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "[]")])
    Parser.Gen.AbsLatte.Class _ mident -> prPrec i 0 (concatD [prt 0 mident])

instance Print (Parser.Gen.AbsLatte.Expr' a) where
  prt i = \case
    Parser.Gen.AbsLatte.ECast _ mident expr -> prPrec i 7 (concatD [doc (showString "("), prt 0 mident, doc (showString ")"), prt 6 expr])
    Parser.Gen.AbsLatte.EVar _ mident -> prPrec i 6 (concatD [prt 0 mident])
    Parser.Gen.AbsLatte.ELitInt _ n -> prPrec i 6 (concatD [prt 0 n])
    Parser.Gen.AbsLatte.ELitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    Parser.Gen.AbsLatte.ELitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    Parser.Gen.AbsLatte.ELitNull _ -> prPrec i 6 (concatD [doc (showString "null")])
    Parser.Gen.AbsLatte.EApp _ expr exprs -> prPrec i 6 (concatD [prt 6 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Parser.Gen.AbsLatte.EMember _ expr mident -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), prt 0 mident])
    Parser.Gen.AbsLatte.ENew _ type_ -> prPrec i 6 (concatD [doc (showString "new"), prt 0 type_])
    Parser.Gen.AbsLatte.ENewArray _ type_ expr -> prPrec i 6 (concatD [doc (showString "new"), prt 0 type_, doc (showString "["), prt 0 expr, doc (showString "]")])
    Parser.Gen.AbsLatte.EArr _ expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "["), prt 0 expr2, doc (showString "]")])
    Parser.Gen.AbsLatte.EString _ str -> prPrec i 6 (concatD [printString str])
    Parser.Gen.AbsLatte.Neg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    Parser.Gen.AbsLatte.Not _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    Parser.Gen.AbsLatte.EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    Parser.Gen.AbsLatte.EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    Parser.Gen.AbsLatte.ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    Parser.Gen.AbsLatte.EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    Parser.Gen.AbsLatte.EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])

instance Print [Parser.Gen.AbsLatte.Expr' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.Gen.AbsLatte.AddOp' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    Parser.Gen.AbsLatte.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (Parser.Gen.AbsLatte.MulOp' a) where
  prt i = \case
    Parser.Gen.AbsLatte.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    Parser.Gen.AbsLatte.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    Parser.Gen.AbsLatte.Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (Parser.Gen.AbsLatte.RelOp' a) where
  prt i = \case
    Parser.Gen.AbsLatte.LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    Parser.Gen.AbsLatte.LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    Parser.Gen.AbsLatte.GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    Parser.Gen.AbsLatte.GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    Parser.Gen.AbsLatte.EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    Parser.Gen.AbsLatte.NE _ -> prPrec i 0 (concatD [doc (showString "!=")])
