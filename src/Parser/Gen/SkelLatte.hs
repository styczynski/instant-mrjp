-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Parser.Gen.SkelLatte where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Parser.Gen.AbsLatte

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Parser.Gen.AbsLatte.Ident -> Result
transIdent x = case x of
  Parser.Gen.AbsLatte.Ident string -> failure x

transMIdent :: Show a => Parser.Gen.AbsLatte.MIdent' a -> Result
transMIdent x = case x of
  Parser.Gen.AbsLatte.MIdent _ ident -> failure x

transProgram :: Show a => Parser.Gen.AbsLatte.Program' a -> Result
transProgram x = case x of
  Parser.Gen.AbsLatte.Program _ topdefs -> failure x

transTopDef :: Show a => Parser.Gen.AbsLatte.TopDef' a -> Result
transTopDef x = case x of
  Parser.Gen.AbsLatte.FnDef _ type_ mident args block -> failure x
  Parser.Gen.AbsLatte.ClDef _ mident classext clmembers -> failure x

transClassExt :: Show a => Parser.Gen.AbsLatte.ClassExt' a -> Result
transClassExt x = case x of
  Parser.Gen.AbsLatte.EmptyExt _ -> failure x
  Parser.Gen.AbsLatte.Ext _ mident -> failure x

transClMember :: Show a => Parser.Gen.AbsLatte.ClMember' a -> Result
transClMember x = case x of
  Parser.Gen.AbsLatte.Field _ type_ mident -> failure x
  Parser.Gen.AbsLatte.Method _ type_ mident args block -> failure x

transArg :: Show a => Parser.Gen.AbsLatte.Arg' a -> Result
transArg x = case x of
  Parser.Gen.AbsLatte.Arg _ type_ mident -> failure x

transBlock :: Show a => Parser.Gen.AbsLatte.Block' a -> Result
transBlock x = case x of
  Parser.Gen.AbsLatte.Block _ stmts -> failure x

transStmt :: Show a => Parser.Gen.AbsLatte.Stmt' a -> Result
transStmt x = case x of
  Parser.Gen.AbsLatte.Empty _ -> failure x
  Parser.Gen.AbsLatte.BStmt _ block -> failure x
  Parser.Gen.AbsLatte.Decl _ type_ items -> failure x
  Parser.Gen.AbsLatte.Ass _ expr1 expr2 -> failure x
  Parser.Gen.AbsLatte.Incr _ expr -> failure x
  Parser.Gen.AbsLatte.Decr _ expr -> failure x
  Parser.Gen.AbsLatte.Ret _ expr -> failure x
  Parser.Gen.AbsLatte.VRet _ -> failure x
  Parser.Gen.AbsLatte.Cond _ expr stmt -> failure x
  Parser.Gen.AbsLatte.CondElse _ expr stmt1 stmt2 -> failure x
  Parser.Gen.AbsLatte.While _ expr stmt -> failure x
  Parser.Gen.AbsLatte.SExp _ expr -> failure x
  Parser.Gen.AbsLatte.For _ type_ mident expr stmt -> failure x

transItem :: Show a => Parser.Gen.AbsLatte.Item' a -> Result
transItem x = case x of
  Parser.Gen.AbsLatte.NoInit _ mident -> failure x
  Parser.Gen.AbsLatte.Init _ mident expr -> failure x

transType :: Show a => Parser.Gen.AbsLatte.Type' a -> Result
transType x = case x of
  Parser.Gen.AbsLatte.Var _ -> failure x
  Parser.Gen.AbsLatte.Void _ -> failure x
  Parser.Gen.AbsLatte.Array _ type_ -> failure x
  Parser.Gen.AbsLatte.Class _ mident -> failure x

transExpr :: Show a => Parser.Gen.AbsLatte.Expr' a -> Result
transExpr x = case x of
  Parser.Gen.AbsLatte.ECast _ mident expr -> failure x
  Parser.Gen.AbsLatte.EVar _ mident -> failure x
  Parser.Gen.AbsLatte.ELitInt _ integer -> failure x
  Parser.Gen.AbsLatte.ELitTrue _ -> failure x
  Parser.Gen.AbsLatte.ELitFalse _ -> failure x
  Parser.Gen.AbsLatte.ELitNull _ -> failure x
  Parser.Gen.AbsLatte.EApp _ expr exprs -> failure x
  Parser.Gen.AbsLatte.EMember _ expr mident -> failure x
  Parser.Gen.AbsLatte.ENew _ type_ -> failure x
  Parser.Gen.AbsLatte.ENewArray _ type_ expr -> failure x
  Parser.Gen.AbsLatte.EArr _ expr1 expr2 -> failure x
  Parser.Gen.AbsLatte.EString _ string -> failure x
  Parser.Gen.AbsLatte.Neg _ expr -> failure x
  Parser.Gen.AbsLatte.Not _ expr -> failure x
  Parser.Gen.AbsLatte.EMul _ expr1 mulop expr2 -> failure x
  Parser.Gen.AbsLatte.EAdd _ expr1 addop expr2 -> failure x
  Parser.Gen.AbsLatte.ERel _ expr1 relop expr2 -> failure x
  Parser.Gen.AbsLatte.EAnd _ expr1 expr2 -> failure x
  Parser.Gen.AbsLatte.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Parser.Gen.AbsLatte.AddOp' a -> Result
transAddOp x = case x of
  Parser.Gen.AbsLatte.Plus _ -> failure x
  Parser.Gen.AbsLatte.Minus _ -> failure x

transMulOp :: Show a => Parser.Gen.AbsLatte.MulOp' a -> Result
transMulOp x = case x of
  Parser.Gen.AbsLatte.Times _ -> failure x
  Parser.Gen.AbsLatte.Div _ -> failure x
  Parser.Gen.AbsLatte.Mod _ -> failure x

transRelOp :: Show a => Parser.Gen.AbsLatte.RelOp' a -> Result
transRelOp x = case x of
  Parser.Gen.AbsLatte.LTH _ -> failure x
  Parser.Gen.AbsLatte.LE _ -> failure x
  Parser.Gen.AbsLatte.GTH _ -> failure x
  Parser.Gen.AbsLatte.GE _ -> failure x
  Parser.Gen.AbsLatte.EQU _ -> failure x
  Parser.Gen.AbsLatte.NE _ -> failure x
