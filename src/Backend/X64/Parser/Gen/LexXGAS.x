-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Lexer definition for use with Alex 3
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module Backend.X64.Parser.Gen.LexXGAS where

import Prelude

import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \< "ENDL" \> | \. "section" | \. "rodata" | \. "text" | \. "global" | \: | \. "string" | \. "quad" | \. "long" | \. "extern" | \, | \* | \( | \) | \( \% "RIP" \) | \% "RAX" | \% "RBX" | \% "RCX" | \% "RDX" | \% "RDI" | \% "RSI" | \% "RSP" | \% "RBP" | \% "R8" | \% "R9" | \% "R10" | \% "R11" | \% "R12" | \% "R13" | \% "R14" | \% "R15" | \% "EAX" | \% "EBX" | \% "ECX" | \% "EDX" | \% "EDI" | \% "ESI" | \% "ESP" | \% "EBP" | \% "R8D" | \% "R9D" | \% "R10D" | \% "R11D" | \% "R12D" | \% "R13D" | \% "R14D" | \% "R15D" | \% "AX" | \% "BX" | \% "CX" | \% "DX" | \% "DI" | \% "SI" | \% "SP" | \% "BP" | \% "R8W" | \% "R9W" | \% "R10W" | \% "R11W" | \% "R12W" | \% "R13W" | \% "R14W" | \% "R15W" | \% "AL" | \% "BL" | \% "CL" | \% "DL" | \% "DIL" | \% "SIL" | \% "SPL" | \% "BPL" | \% "R8B" | \% "R9B" | \% "R10B" | \% "R11B" | \% "R12B" | \% "R13B" | \% "R14B" | \% "R15B"

:-

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- token CommentLike
\# \- \- ([$u # [\" \\]] | \\ [\" \\ f n r t]) * \- \- \#
    { tok (eitherResIdent T_CommentLike) }

-- token ConstIntRef
\$ $d +
    { tok (eitherResIdent T_ConstIntRef) }

-- token Label
([\' \_]| ($d | $l)) +
    { tok (eitherResIdent T_Label) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- String
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (TL . unescapeInitTail) }

-- Integer
$d+
    { tok TI }

{
-- | Create a token with position.
tok :: (String -> Tok) -> (Posn -> String -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !String                    -- ^ String literal.
  | TI !String                    -- ^ Integer literal.
  | TV !String                    -- ^ Identifier.
  | TD !String                    -- ^ Float literal.
  | TC !String                    -- ^ Character literal.
  | T_CommentLike !String
  | T_ConstIntRef !String
  | T_Label !String
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: String -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: String
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> String
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_CommentLike s) -> s
  PT _ (T_ConstIntRef s) -> s
  PT _ (T_Label s) -> s

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = tokenText t

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B String Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b ".section" 75
    (b "%R14B" 38
       (b "%ESI" 19
          (b "%DIL" 10
             (b "%BPL" 5
                (b "%BL" 3 (b "%AX" 2 (b "%AL" 1 N N) N) (b "%BP" 4 N N))
                (b "%CX" 8 (b "%CL" 7 (b "%BX" 6 N N) N) (b "%DI" 9 N N)))
             (b "%EBX" 15
                (b "%EAX" 13 (b "%DX" 12 (b "%DL" 11 N N) N) (b "%EBP" 14 N N))
                (b "%EDI" 17 (b "%ECX" 16 N N) (b "%EDX" 18 N N))))
          (b "%R12" 29
             (b "%R10W" 24
                (b "%R10B" 22 (b "%R10" 21 (b "%ESP" 20 N N) N) (b "%R10D" 23 N N))
                (b "%R11D" 27
                   (b "%R11B" 26 (b "%R11" 25 N N) N) (b "%R11W" 28 N N)))
             (b "%R13B" 34
                (b "%R12W" 32
                   (b "%R12D" 31 (b "%R12B" 30 N N) N) (b "%R13" 33 N N))
                (b "%R13W" 36 (b "%R13D" 35 N N) (b "%R14" 37 N N)))))
       (b "%RDI" 57
          (b "%R8W" 48
             (b "%R15D" 43
                (b "%R15" 41
                   (b "%R14W" 40 (b "%R14D" 39 N N) N) (b "%R15B" 42 N N))
                (b "%R8B" 46 (b "%R8" 45 (b "%R15W" 44 N N) N) (b "%R8D" 47 N N)))
             (b "%RAX" 53
                (b "%R9D" 51 (b "%R9B" 50 (b "%R9" 49 N N) N) (b "%R9W" 52 N N))
                (b "%RBX" 55 (b "%RBP" 54 N N) (b "%RCX" 56 N N))))
          (b "(%RIP)" 66
             (b "%SIL" 62
                (b "%RSP" 60 (b "%RSI" 59 (b "%RDX" 58 N N) N) (b "%SI" 61 N N))
                (b "%SPL" 64 (b "%SP" 63 N N) (b "(" 65 N N)))
             (b ".global" 71
                (b "," 69 (b "*" 68 (b ")" 67 N N) N) (b ".extern" 70 N N))
                (b ".quad" 73 (b ".long" 72 N N) (b ".rodata" 74 N N))))))
    (b "negb" 113
       (b "idivb" 94
          (b "andl" 85
             (b "addb" 80
                (b ":" 78
                   (b ".text" 77 (b ".string" 76 N N) N) (b "<ENDL>" 79 N N))
                (b "addw" 83 (b "addq" 82 (b "addl" 81 N N) N) (b "andb" 84 N N)))
             (b "cmpb" 90
                (b "call" 88 (b "andw" 87 (b "andq" 86 N N) N) (b "cdq" 89 N N))
                (b "cmpq" 92 (b "cmpl" 91 N N) (b "cmpw" 93 N N))))
          (b "leab" 104
             (b "imull" 99
                (b "idivw" 97
                   (b "idivq" 96 (b "idivl" 95 N N) N) (b "imulb" 98 N N))
                (b "jmp" 102
                   (b "imulw" 101 (b "imulq" 100 N N) N) (b "jz" 103 N N)))
             (b "movb" 109
                (b "leave" 107
                   (b "leaq" 106 (b "leal" 105 N N) N) (b "leaw" 108 N N))
                (b "movq" 111 (b "movl" 110 N N) (b "movw" 112 N N)))))
       (b "setle" 132
          (b "salw" 123
             (b "push" 118
                (b "negw" 116
                   (b "negq" 115 (b "negl" 114 N N) N) (b "pop" 117 N N))
                (b "sall" 121
                   (b "salb" 120 (b "ret" 119 N N) N) (b "salq" 122 N N)))
             (b "sete" 128
                (b "sarq" 126
                   (b "sarl" 125 (b "sarb" 124 N N) N) (b "sarw" 127 N N))
                (b "setge" 130 (b "setg" 129 N N) (b "setl" 131 N N))))
          (b "testw" 141
             (b "subw" 137
                (b "subl" 135
                   (b "subb" 134 (b "setne" 133 N N) N) (b "subq" 136 N N))
                (b "testl" 139 (b "testb" 138 N N) (b "testq" 140 N N)))
             (b "xorb" 146
                (b "xchgq" 144
                   (b "xchgl" 143 (b "xchgb" 142 N N) N) (b "xchgw" 145 N N))
                (b "xorq" 148 (b "xorl" 147 N N) (b "xorw" 149 N N))))))
  where
  b s n = B bs (TS bs n)
    where
    bs = s

-- | Unquote string literal.
unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
