-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Backend.X64.Parser.Gen.ParXGAS
  ( happyError
  , myLexer
  , pAsmProgram
  ) where

import Prelude

import qualified Backend.X64.Parser.Gen.AbsXGAS
import Backend.X64.Parser.Gen.LexXGAS

}

%name pAsmProgram_internal AsmProgram
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '%AL'         { PT _ (TS _ 1)          }
  '%AX'         { PT _ (TS _ 2)          }
  '%BL'         { PT _ (TS _ 3)          }
  '%BP'         { PT _ (TS _ 4)          }
  '%BPL'        { PT _ (TS _ 5)          }
  '%BX'         { PT _ (TS _ 6)          }
  '%CL'         { PT _ (TS _ 7)          }
  '%CX'         { PT _ (TS _ 8)          }
  '%DI'         { PT _ (TS _ 9)          }
  '%DIL'        { PT _ (TS _ 10)         }
  '%DL'         { PT _ (TS _ 11)         }
  '%DX'         { PT _ (TS _ 12)         }
  '%EAX'        { PT _ (TS _ 13)         }
  '%EBP'        { PT _ (TS _ 14)         }
  '%EBX'        { PT _ (TS _ 15)         }
  '%ECX'        { PT _ (TS _ 16)         }
  '%EDI'        { PT _ (TS _ 17)         }
  '%EDX'        { PT _ (TS _ 18)         }
  '%ESI'        { PT _ (TS _ 19)         }
  '%ESP'        { PT _ (TS _ 20)         }
  '%R10'        { PT _ (TS _ 21)         }
  '%R10B'       { PT _ (TS _ 22)         }
  '%R10D'       { PT _ (TS _ 23)         }
  '%R10W'       { PT _ (TS _ 24)         }
  '%R11'        { PT _ (TS _ 25)         }
  '%R11B'       { PT _ (TS _ 26)         }
  '%R11D'       { PT _ (TS _ 27)         }
  '%R11W'       { PT _ (TS _ 28)         }
  '%R12'        { PT _ (TS _ 29)         }
  '%R12B'       { PT _ (TS _ 30)         }
  '%R12D'       { PT _ (TS _ 31)         }
  '%R12W'       { PT _ (TS _ 32)         }
  '%R13'        { PT _ (TS _ 33)         }
  '%R13B'       { PT _ (TS _ 34)         }
  '%R13D'       { PT _ (TS _ 35)         }
  '%R13W'       { PT _ (TS _ 36)         }
  '%R14'        { PT _ (TS _ 37)         }
  '%R14B'       { PT _ (TS _ 38)         }
  '%R14D'       { PT _ (TS _ 39)         }
  '%R14W'       { PT _ (TS _ 40)         }
  '%R15'        { PT _ (TS _ 41)         }
  '%R15B'       { PT _ (TS _ 42)         }
  '%R15D'       { PT _ (TS _ 43)         }
  '%R15W'       { PT _ (TS _ 44)         }
  '%R8'         { PT _ (TS _ 45)         }
  '%R8B'        { PT _ (TS _ 46)         }
  '%R8D'        { PT _ (TS _ 47)         }
  '%R8W'        { PT _ (TS _ 48)         }
  '%R9'         { PT _ (TS _ 49)         }
  '%R9B'        { PT _ (TS _ 50)         }
  '%R9D'        { PT _ (TS _ 51)         }
  '%R9W'        { PT _ (TS _ 52)         }
  '%RAX'        { PT _ (TS _ 53)         }
  '%RBP'        { PT _ (TS _ 54)         }
  '%RBX'        { PT _ (TS _ 55)         }
  '%RCX'        { PT _ (TS _ 56)         }
  '%RDI'        { PT _ (TS _ 57)         }
  '%RDX'        { PT _ (TS _ 58)         }
  '%RSI'        { PT _ (TS _ 59)         }
  '%RSP'        { PT _ (TS _ 60)         }
  '%SI'         { PT _ (TS _ 61)         }
  '%SIL'        { PT _ (TS _ 62)         }
  '%SP'         { PT _ (TS _ 63)         }
  '%SPL'        { PT _ (TS _ 64)         }
  '('           { PT _ (TS _ 65)         }
  '(%RIP)'      { PT _ (TS _ 66)         }
  ')'           { PT _ (TS _ 67)         }
  '*'           { PT _ (TS _ 68)         }
  ','           { PT _ (TS _ 69)         }
  '.byte'       { PT _ (TS _ 70)         }
  '.data'       { PT _ (TS _ 71)         }
  '.extern'     { PT _ (TS _ 72)         }
  '.global'     { PT _ (TS _ 73)         }
  '.long'       { PT _ (TS _ 74)         }
  '.quad'       { PT _ (TS _ 75)         }
  '.rodata'     { PT _ (TS _ 76)         }
  '.section'    { PT _ (TS _ 77)         }
  '.string'     { PT _ (TS _ 78)         }
  '.text'       { PT _ (TS _ 79)         }
  ':'           { PT _ (TS _ 80)         }
  '<ENDL>'      { PT _ (TS _ 81)         }
  'addb'        { PT _ (TS _ 82)         }
  'addl'        { PT _ (TS _ 83)         }
  'addq'        { PT _ (TS _ 84)         }
  'addw'        { PT _ (TS _ 85)         }
  'andb'        { PT _ (TS _ 86)         }
  'andl'        { PT _ (TS _ 87)         }
  'andq'        { PT _ (TS _ 88)         }
  'andw'        { PT _ (TS _ 89)         }
  'call'        { PT _ (TS _ 90)         }
  'cdq'         { PT _ (TS _ 91)         }
  'cmpb'        { PT _ (TS _ 92)         }
  'cmpl'        { PT _ (TS _ 93)         }
  'cmpq'        { PT _ (TS _ 94)         }
  'cmpw'        { PT _ (TS _ 95)         }
  'decb'        { PT _ (TS _ 96)         }
  'decl'        { PT _ (TS _ 97)         }
  'decq'        { PT _ (TS _ 98)         }
  'decw'        { PT _ (TS _ 99)         }
  'idivb'       { PT _ (TS _ 100)        }
  'idivl'       { PT _ (TS _ 101)        }
  'idivq'       { PT _ (TS _ 102)        }
  'idivw'       { PT _ (TS _ 103)        }
  'imulb'       { PT _ (TS _ 104)        }
  'imull'       { PT _ (TS _ 105)        }
  'imulq'       { PT _ (TS _ 106)        }
  'imulw'       { PT _ (TS _ 107)        }
  'incb'        { PT _ (TS _ 108)        }
  'incl'        { PT _ (TS _ 109)        }
  'incq'        { PT _ (TS _ 110)        }
  'incw'        { PT _ (TS _ 111)        }
  'je'          { PT _ (TS _ 112)        }
  'jg'          { PT _ (TS _ 113)        }
  'jge'         { PT _ (TS _ 114)        }
  'jl'          { PT _ (TS _ 115)        }
  'jle'         { PT _ (TS _ 116)        }
  'jmp'         { PT _ (TS _ 117)        }
  'jne'         { PT _ (TS _ 118)        }
  'jnz'         { PT _ (TS _ 119)        }
  'jz'          { PT _ (TS _ 120)        }
  'leab'        { PT _ (TS _ 121)        }
  'leal'        { PT _ (TS _ 122)        }
  'leaq'        { PT _ (TS _ 123)        }
  'leave'       { PT _ (TS _ 124)        }
  'leaw'        { PT _ (TS _ 125)        }
  'movb'        { PT _ (TS _ 126)        }
  'movl'        { PT _ (TS _ 127)        }
  'movq'        { PT _ (TS _ 128)        }
  'movw'        { PT _ (TS _ 129)        }
  'negb'        { PT _ (TS _ 130)        }
  'negl'        { PT _ (TS _ 131)        }
  'negq'        { PT _ (TS _ 132)        }
  'negw'        { PT _ (TS _ 133)        }
  'pop'         { PT _ (TS _ 134)        }
  'pushb'       { PT _ (TS _ 135)        }
  'pushl'       { PT _ (TS _ 136)        }
  'pushq'       { PT _ (TS _ 137)        }
  'pushw'       { PT _ (TS _ 138)        }
  'ret'         { PT _ (TS _ 139)        }
  'salb'        { PT _ (TS _ 140)        }
  'sall'        { PT _ (TS _ 141)        }
  'salq'        { PT _ (TS _ 142)        }
  'salw'        { PT _ (TS _ 143)        }
  'sarb'        { PT _ (TS _ 144)        }
  'sarl'        { PT _ (TS _ 145)        }
  'sarq'        { PT _ (TS _ 146)        }
  'sarw'        { PT _ (TS _ 147)        }
  'sete'        { PT _ (TS _ 148)        }
  'setg'        { PT _ (TS _ 149)        }
  'setge'       { PT _ (TS _ 150)        }
  'setl'        { PT _ (TS _ 151)        }
  'setle'       { PT _ (TS _ 152)        }
  'setne'       { PT _ (TS _ 153)        }
  'setnz'       { PT _ (TS _ 154)        }
  'setz'        { PT _ (TS _ 155)        }
  'subb'        { PT _ (TS _ 156)        }
  'subl'        { PT _ (TS _ 157)        }
  'subq'        { PT _ (TS _ 158)        }
  'subw'        { PT _ (TS _ 159)        }
  'testb'       { PT _ (TS _ 160)        }
  'testl'       { PT _ (TS _ 161)        }
  'testq'       { PT _ (TS _ 162)        }
  'testw'       { PT _ (TS _ 163)        }
  'xchgb'       { PT _ (TS _ 164)        }
  'xchgl'       { PT _ (TS _ 165)        }
  'xchgq'       { PT _ (TS _ 166)        }
  'xchgw'       { PT _ (TS _ 167)        }
  'xorb'        { PT _ (TS _ 168)        }
  'xorl'        { PT _ (TS _ 169)        }
  'xorq'        { PT _ (TS _ 170)        }
  'xorw'        { PT _ (TS _ 171)        }
  L_integ       { PT _ (TI _)            }
  L_quoted      { PT _ (TL _)            }
  L_CommentLike { PT _ (T_CommentLike _) }
  L_ConstIntRef { PT _ (T_ConstIntRef _) }
  L_Label       { PT _ (T_Label _)       }

%%

Integer :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, String) }
String   : L_quoted { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

CommentLike :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.CommentLike) }
CommentLike  : L_CommentLike { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CommentLike (tokenText $1)) }

ConstIntRef :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.ConstIntRef) }
ConstIntRef  : L_ConstIntRef { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ConstIntRef (tokenText $1)) }

Label :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Label) }
Label  : L_Label { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.Label (tokenText $1)) }

AsmProgram :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.AsmProgram) }
AsmProgram
  : ListDirective '<ENDL>' SectionData '<ENDL>' SectionBSS '<ENDL>' SectionCode { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.AsmProgram (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

ListAsmInstr :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, [Backend.X64.Parser.Gen.AbsXGAS.AsmInstr]) }
ListAsmInstr
  : {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, []) }
  | AsmInstr ListAsmInstr { (fst $1, (:) (snd $1) (snd $2)) }
  | {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, []) }
  | AsmInstr ListAsmInstr { (fst $1, (:) (snd $1) (snd $2)) }

SectionData :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.SectionData) }
SectionData
  : '.section' '.rodata' '<ENDL>' ListAsmDataDef { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SectionData (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $4)) }

SectionBSS :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.SectionBSS) }
SectionBSS
  : '.section' '.data' '<ENDL>' ListAsmDataDef { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SectionBSS (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $4)) }

SectionCode :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.SectionCode) }
SectionCode
  : '.section' '.text' '<ENDL>' ListAsmInstr { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SectionCode (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $4)) }

AsmDataDef :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.AsmDataDef) }
AsmDataDef
  : '.global' Label '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AsmDataGlobal (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Label ':' '<ENDL>' ListData '<ENDL>' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.AsmDataDef (fst $1) (snd $1) (snd $4)) }

ListAsmDataDef :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, [Backend.X64.Parser.Gen.AbsXGAS.AsmDataDef]) }
ListAsmDataDef
  : {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, []) }
  | AsmDataDef ListAsmDataDef { (fst $1, (:) (snd $1) (snd $2)) }

CommentAnn :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.CommentAnn) }
CommentAnn
  : CommentLike { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.Comment (fst $1) (snd $1)) }
  | {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, Backend.X64.Parser.Gen.AbsXGAS.NoComment Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition) }

Data :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Data) }
Data
  : '.string' String '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DataString (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '.quad' DataConst '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.Data64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '.long' DataConst '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.Data32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '.byte' DataConst '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.Data8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListData :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, [Backend.X64.Parser.Gen.AbsXGAS.Data]) }
ListData
  : {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, []) }
  | Data ListData { (fst $1, (:) (snd $1) (snd $2)) }

DataConst :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.DataConst) }
DataConst
  : Integer { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ConstInt (fst $1) (snd $1)) }
  | Label { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ConstLabel (fst $1) (snd $1)) }

Directive :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Directive) }
Directive
  : '.extern' Label '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.Extern (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListDirective :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, [Backend.X64.Parser.Gen.AbsXGAS.Directive]) }
ListDirective
  : {- empty -} { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'NoPosition, []) }
  | Directive ListDirective { (fst $1, (:) (snd $1) (snd $2)) }

AsmInstr :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.AsmInstr) }
AsmInstr
  : Label ':' CommentAnn '<ENDL>' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.LabelDef (fst $1) (snd $1) (snd $3)) }
  | 'addq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ADD64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'andq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AND64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'cmpq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CMP64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'imulq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IMUL64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'leaq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.LEA64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'movq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.MOV64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'subq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SUB64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'testq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.TEST64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xorq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XOR64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xchgq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XCHG64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'salq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAL64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'sarq' Source64 ',' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAR64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'addl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ADD32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'andl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AND32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'cmpl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CMP32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'imull' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IMUL32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'leal' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.LEA32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'movl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.MOV32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'subl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SUB32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'testl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.TEST32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xorl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XOR32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xchgl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XCHG32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'sall' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAL32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'sarl' Source32 ',' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAR32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'addw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ADD16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'andw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AND16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'cmpw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CMP16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'imulw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IMUL16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'leaw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.LEA16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'movw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.MOV16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'subw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SUB16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'testw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.TEST16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xorw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XOR16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xchgw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XCHG16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'salw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAL16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'sarw' Source16 ',' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAR16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'addb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ADD8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'andb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AND8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'cmpb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CMP8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'imulb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IMUL8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'leab' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.LEA8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'movb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.MOV8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'subb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SUB8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'testb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.TEST8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xorb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XOR8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'xchgb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.XCHG8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'salb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAL8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'sarb' Source8 ',' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SAR8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'negq' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.NEG64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'idivq' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IDIV64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'incq' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.INC64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'decq' Target64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DEC64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'negl' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.NEG32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'idivl' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IDIV32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'incl' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.INC32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'decl' Target32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DEC32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'negw' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.NEG16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'idivw' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IDIV16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'incw' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.INC16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'decw' Target16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DEC16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'negb' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.NEG8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'idivb' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.IDIV8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'incb' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.INC8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'decb' Target8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DEC8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'pushq' Source64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.PUSH64 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'pushl' Source32 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.PUSH32 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'pushw' Source16 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.PUSH16 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'pushb' Source8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.PUSH8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'call' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CALL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'call' '*' Integer '(' Reg64 ')' CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CALLINDIRECT (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'pop' Reg64 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.POP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'leave' CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.LEAVE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'ret' CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RET (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'cdq' CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CDQ (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'sete' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setg' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETG (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setge' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETGE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setl' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setle' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETLE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setne' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETNE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setz' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETZ (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'setnz' Reg8 CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SETNZ (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jmp' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JMP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'je' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jg' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JG (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jge' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JGE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jl' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jle' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JLE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jne' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JNE (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jz' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JZ (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'jnz' Label CommentAnn '<ENDL>' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.JNZ (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

Source64 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Source) }
Source64
  : ConstIntRef { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromConst (fst $1) (snd $1)) }
  | Reg64 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromReg64 (fst $1) (snd $1)) }
  | Integer '(' Reg64 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMem64 (fst $1) (snd $1) (snd $3)) }
  | Label { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabel64 (fst $1) (snd $1)) }
  | Label '(%RIP)' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabelOffset64 (fst $1) (snd $1)) }
  | Integer '(' Reg64 ',' Reg64 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMemComplex64 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Target64 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Target) }
Target64
  : Reg64 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToReg64 (fst $1) (snd $1)) }
  | Integer '(' Reg64 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMem64 (fst $1) (snd $1) (snd $3)) }
  | Integer '(' Reg64 ',' Reg64 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMemComplex64 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Reg64 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Reg) }
Reg64
  : '%RAX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RAX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RBX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RBX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RCX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RCX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RDX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RDX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RDI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RDI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RSI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RSI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RSP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RSP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%RBP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.RBP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R8' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R8 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R9' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R9 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R10' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R10 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R11' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R11 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R12' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R12 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R13' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R13 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R14' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R14 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R15' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R15 (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }

Source32 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Source) }
Source32
  : ConstIntRef { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromConst (fst $1) (snd $1)) }
  | Reg32 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromReg32 (fst $1) (snd $1)) }
  | Integer '(' Reg32 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMem32 (fst $1) (snd $1) (snd $3)) }
  | Label { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabel32 (fst $1) (snd $1)) }
  | Label '(%RIP)' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabelOffset32 (fst $1) (snd $1)) }
  | Integer '(' Reg32 ',' Reg32 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMemComplex32 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Target32 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Target) }
Target32
  : Reg32 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToReg32 (fst $1) (snd $1)) }
  | Integer '(' Reg32 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMem32 (fst $1) (snd $1) (snd $3)) }
  | Integer '(' Reg32 ',' Reg32 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMemComplex32 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Reg32 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Reg) }
Reg32
  : '%EAX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.EAX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%EBX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.EBX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%ECX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ECX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%EDX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.EDX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%EDI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.EDI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%ESI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ESI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%ESP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.ESP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%EBP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.EBP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R8D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R8D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R9D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R9D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R10D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R10D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R11D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R11D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R12D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R12D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R13D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R13D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R14D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R14D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R15D' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R15D (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }

Source16 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Source) }
Source16
  : ConstIntRef { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromConst (fst $1) (snd $1)) }
  | Reg16 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromReg16 (fst $1) (snd $1)) }
  | Integer '(' Reg16 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMem16 (fst $1) (snd $1) (snd $3)) }
  | Label { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabel16 (fst $1) (snd $1)) }
  | Label '(%RIP)' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabelOffset16 (fst $1) (snd $1)) }
  | Integer '(' Reg16 ',' Reg16 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMemComplex16 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Target16 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Target) }
Target16
  : Reg16 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToReg16 (fst $1) (snd $1)) }
  | Integer '(' Reg16 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMem16 (fst $1) (snd $1) (snd $3)) }
  | Integer '(' Reg16 ',' Reg16 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMemComplex16 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Reg16 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Reg) }
Reg16
  : '%AX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%BX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.BX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%CX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%DX' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DX (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%DI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%SI' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SI (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%SP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%BP' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.BP (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R8W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R8W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R9W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R9W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R10W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R10W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R11W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R11W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R12W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R12W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R13W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R13W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R14W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R14W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R15W' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R15W (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }

Source8 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Source) }
Source8
  : ConstIntRef { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromConst (fst $1) (snd $1)) }
  | Reg8 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromReg8 (fst $1) (snd $1)) }
  | Integer '(' Reg8 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMem8 (fst $1) (snd $1) (snd $3)) }
  | Label { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabel8 (fst $1) (snd $1)) }
  | Label '(%RIP)' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromLabelOffset8 (fst $1) (snd $1)) }
  | Integer '(' Reg8 ',' Reg8 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.FromMemComplex8 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Target8 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Target) }
Target8
  : Reg8 { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToReg8 (fst $1) (snd $1)) }
  | Integer '(' Reg8 ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMem8 (fst $1) (snd $1) (snd $3)) }
  | Integer '(' Reg8 ',' Reg8 ',' Integer ')' { (fst $1, Backend.X64.Parser.Gen.AbsXGAS.ToMemComplex8 (fst $1) (snd $1) (snd $3) (snd $5) (snd $7)) }

Reg8 :: { (Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position, Backend.X64.Parser.Gen.AbsXGAS.Reg) }
Reg8
  : '%AL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.AL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%BL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.BL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%CL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.CL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%DL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%DIL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.DIL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%SIL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SIL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%SPL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.SPL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%BPL' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.BPL (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R8B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R8B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R9B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R9B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R10B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R10B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R11B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R11B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R12B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R12B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R13B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R13B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R14B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R14B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }
  | '%R15B' { (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1), Backend.X64.Parser.Gen.AbsXGAS.R15B (uncurry Backend.X64.Parser.Gen.AbsXGAS.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pAsmProgram :: [Token] -> Err Backend.X64.Parser.Gen.AbsXGAS.AsmProgram
pAsmProgram = fmap snd . pAsmProgram_internal
}

