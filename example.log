[94m[Info]    [0m[Reporting.Logs.logInfo#75] Reading: example.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsing: example.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsed: example.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Transformed: example.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Node
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		elem = c;
	}
	void setNext(Node n)
	{
		next = n;
	}
	Shape getElem()
	{
		return elem;
	}
	Node getNext()
	{
		return next;
	}
}

class Stack
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<???>(c);
		newHead.setNext<???>(head);
		head = newHead;
	}
	bool isEmpty()
	{
		return (head == (Node)(null));
	}
	Shape top()
	{
		return head.getElem<???>();
	}
	void pop()
	{
		head = head.getNext<???>();
	}
}

class Shape
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node stk = genNull();
	print(stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Node
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		elem = c;
	}
	void setNext(Node n)
	{
		next = n;
	}
	Shape getElem()
	{
		return elem;
	}
	Node getNext()
	{
		return next;
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Shape elem;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Shape elem;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node next;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node next;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void setElem(Shape c)
{
	elem = c;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> elem = c;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> this.elem<"Node">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- this.elem<"Node"> = c;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void setElem(Shape c)
{
	this.elem<"Node"> = c;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void setNext(Node n)
{
	next = n;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> next = n;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> this.next<"Node">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- this.next<"Node"> = n;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void setNext(Node n)
{
	this.next<"Node"> = n;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Shape getElem()
{
	return elem;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return elem;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.elem<"Node">;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Shape getElem()
{
	return this.elem<"Node">;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node getNext()
{
	return next;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return next;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.next<"Node">;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node getNext()
{
	return this.next<"Node">;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		this.elem<"Node"> = c;
	}
	void setNext(Node n)
	{
		this.next<"Node"> = n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Stack
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<???>(c);
		newHead.setNext<???>(head);
		head = newHead;
	}
	bool isEmpty()
	{
		return (head == (Node)(null));
	}
	Shape top()
	{
		return head.getElem<???>();
	}
	void pop()
	{
		head = head.getNext<???>();
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node head;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node head;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void push(Shape c)
{
	Node newHead = new Node;
	newHead.setElem<???>(c);
	newHead.setNext<???>(head);
	head = newHead;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node newHead = new Node;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node newHead = new Node;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> newHead.setElem<???>(c);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT example.lat:4:10 (VoidT example.lat:4:5) [ClassT example.lat:4:18 (Ident example.lat:4:18 "Shape")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- newHead.setElem<"Node">(c);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> newHead.setNext<???>(head);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT example.lat:5:10 (VoidT example.lat:5:5) [ClassT example.lat:5:18 (Ident example.lat:5:18 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- newHead.setNext<"Node">(this.head<"Stack">);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> head = newHead;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> this.head<"Stack">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- this.head<"Stack"> = newHead;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void push(Shape c)
{
	Node newHead = new Node;
	newHead.setElem<"Node">(c);
	newHead.setNext<"Node">(this.head<"Stack">);
	this.head<"Stack"> = newHead;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> bool isEmpty()
{
	return (head == (Node)(null));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (head == (Node)(null));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.head<"Stack">.equals<"Node">(null);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- bool isEmpty()
{
	return this.head<"Stack">.equals<"Node">(null);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Shape top()
{
	return head.getElem<???>();
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return head.getElem<???>();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT example.lat:6:11 (ClassT example.lat:6:5 (Ident example.lat:6:5 "Shape")) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.head<"Stack">.getElem<"Node">();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Shape top()
{
	return this.head<"Stack">.getElem<"Node">();
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void pop()
{
	head = head.getNext<???>();
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> head = head.getNext<???>();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> this.head<"Stack">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT example.lat:7:10 (ClassT example.lat:7:5 (Ident example.lat:7:5 "Node")) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void pop()
{
	this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<"Node">(c);
		newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Shape
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void tell()
{
	printString("I'm a shape");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("I'm a shape");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("I'm a shape");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void tell()
{
	printString("I'm a shape");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void tellAgain()
{
	printString("I'm just a shape");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("I'm just a shape");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("I'm just a shape");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void tellAgain()
{
	printString("I'm just a shape");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void tellAgain()
{
	printString("I'm really a rectangle");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("I'm really a rectangle");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("I'm really a rectangle");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void tellAgain()
{
	printString("I'm really a rectangle");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void tellAgain()
{
	printString("I'm really a circle");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("I'm really a circle");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("I'm really a circle");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void tellAgain()
{
	printString("I'm really a circle");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> void tellAgain()
{
	printString("I'm really a square");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("I'm really a square");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("I'm really a square");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- void tellAgain()
{
	printString("I'm really a square");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node genNull()
{
	return null;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return null;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return null;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node genNull()
{
	return null;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	Node stk = genNull();
	print(stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node stk = genNull();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT example.lat:51:6 (ClassT example.lat:51:1 (Ident example.lat:51:1 "Node")) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node stk = genNull();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> print(stk);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [ClassT inside standard library (Ident inside standard library "Object")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- print(stk);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int main()
{
	Node stk = genNull();
	print(stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		this.elem<"Node"> = c;
	}
	void setNext(Node n)
	{
		this.next<"Node"> = n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<"Node">(c);
		newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node stk = genNull();
	print(stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Typecheck doneexample.lat

class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		this.elem<"Node"> = c;
	}
	void setNext(Node n)
	{
		this.next<"Node"> = n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<"Node">(c);
		newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node stk = genNull();
	print(stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		this.elem<"Node"> = c;
	}
	void setNext(Node n)
	{
		this.next<"Node"> = n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<"Node">(c);
		newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node stk = genNull();
	print(stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape c)
	{
		this.elem<"Node"> = c;
	}
	void setNext(Node n)
	{
		this.next<"Node"> = n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape c)
	{
		Node newHead = new Node;
		newHead.setElem<"Node">(c);
		newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node stk = genNull();
	print(stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		return this.head<"Stack">.equals<"Node">(null);
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
	}
	void tellAgain()
	{
		printString("I'm just a shape");
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 2 (took 10 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimization doneexample.lat

class Node extends Object
{
	Shape elem;
	Node next;
	void setElem(Shape _var_1000001#c)
	{
		this.elem<"Node"> = _var_1000001#c;
		return;
	}
	void setNext(Node _var_1000006#n)
	{
		this.next<"Node"> = _var_1000006#n;
		return;
	}
	Shape getElem()
	{
		return this.elem<"Node">;
	}
	Node getNext()
	{
		return this.next<"Node">;
	}
}

class Stack extends Object
{
	Node head;
	void push(Shape _var_1000019#c)
	{
		Node _var_1000021#newHead = new Node;
		_var_1000021#newHead.setElem<"Node">(_var_1000019#c);
		_var_1000021#newHead.setNext<"Node">(this.head<"Stack">);
		this.head<"Stack"> = _var_1000021#newHead;
		return;
	}
	bool isEmpty()
	{
		if (<implicit>(this.head<"Stack"> == null))
			return true;
		else
			return false;
	}
	Shape top()
	{
		return this.head<"Stack">.getElem<"Node">();
	}
	void pop()
	{
		this.head<"Stack"> = this.head<"Stack">.getNext<"Node">();
		return;
	}
}

class Shape extends Object
{
	void tell()
	{
		printString("I'm a shape");
		return;
	}
	void tellAgain()
	{
		printString("I'm just a shape");
		return;
	}
}

class Rectangle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a rectangle");
		return;
	}
}

class Circle extends Shape
{
	void tellAgain()
	{
		printString("I'm really a circle");
		return;
	}
}

class Square extends Rectangle
{
	void tellAgain()
	{
		printString("I'm really a square");
		return;
	}
}

Node genNull()
{
	return null;
}

int main()
{
	Node _var_1000062#stk = genNull();
	print(_var_1000062#stk);
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member example.lat:4:29 (Var example.lat:4:29 (Ident example.lat:4:29 "this")) (Ident example.lat:4:29 "elem") (Just "Node")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member example.lat:5:28 (Var example.lat:5:28 (Ident example.lat:5:28 "this")) (Ident example.lat:5:28 "next") (Just "Node")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member example.lat:15:9 (Var example.lat:15:9 (Ident example.lat:15:9 "this")) (Ident example.lat:15:9 "head") (Just "Stack")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] transform condition: BinaryOp example.lat:18:16 Implicit (Equ example.lat:18:16) (Member example.lat:18:16 (Var example.lat:18:16 (Ident example.lat:18:16 "this")) (Ident example.lat:18:16 "head") (Just "Stack")) (Lit example.lat:18:28 (Null example.lat:18:28))
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member example.lat:24:9 (Var example.lat:24:9 (Ident example.lat:24:9 "this")) (Ident example.lat:24:9 "head") (Just "Stack")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Object>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DEBUG COLLECT_FUNCTIONS PROTOTYPES
[94m[Info]    [0m[Reporting.Logs.logInfo#75] [int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return
,int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return
,obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21
,obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23
,int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    int t_28 =     call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    int t_30 =     call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return
,byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    obj<?> t_36 = <obj<?>>null
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>t_36 or pass-through to _IELSE33
  _IIF32:
    byte t_37 = <byte>1
    return <byte>t_37
  _IELSE33:
    byte t_38 = <byte>0
    return <byte>t_38
,obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41
,int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return
,int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    byte t_48 =     call<function> printString(<obj<String>>t_47)
    return
,int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    byte t_52 =     call<function> printString(<obj<String>>t_51)
    return
,int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    byte t_56 =     call<function> printString(<obj<String>>t_55)
    return
,int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    byte t_60 =     call<function> printString(<obj<String>>t_59)
    return
,int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    byte t_64 =     call<function> printString(<obj<String>>t_63)
    return
,obj<Node> genNull()
    obj<Node> t_65 = <obj<Node>>null
    return <obj<Node>>t_65
,int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    byte t_68 =     call<function> print(<obj<Object>>t_67)
    int t_69 = <int>0
    return <int>t_69
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] END DEBUG
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Initial IR: 
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    int t_28 =     call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    int t_30 =     call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    obj<?> t_36 = <obj<?>>null
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>t_36 or pass-through to _IELSE33
  _IIF32:
    byte t_37 = <byte>1
    return <byte>t_37
  _IELSE33:
    byte t_38 = <byte>0
    return <byte>t_38

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    byte t_48 =     call<function> printString(<obj<String>>t_47)
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    byte t_52 =     call<function> printString(<obj<String>>t_51)
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    byte t_56 =     call<function> printString(<obj<String>>t_55)
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    byte t_60 =     call<function> printString(<obj<String>>t_59)
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    byte t_64 =     call<function> printString(<obj<String>>t_63)
    return

obj<Node> genNull()
    obj<Node> t_65 = <obj<Node>>null
    return <obj<Node>>t_65

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    byte t_68 =     call<function> print(<obj<Object>>t_67)
    int t_69 = <int>0
    return <int>t_69

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    int t_28 =     call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    int t_30 =     call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    obj<?> t_36 = <obj<?>>null
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>t_36 or pass-through to _IELSE33
  _IIF32:
    byte t_37 = <byte>1
    return <byte>t_37
  _IELSE33:
    byte t_38 = <byte>0
    return <byte>t_38

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    byte t_48 =     call<function> printString(<obj<String>>t_47)
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    byte t_52 =     call<function> printString(<obj<String>>t_51)
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    byte t_56 =     call<function> printString(<obj<String>>t_55)
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    byte t_60 =     call<function> printString(<obj<String>>t_59)
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    byte t_64 =     call<function> printString(<obj<String>>t_63)
    return

obj<Node> genNull()
    obj<Node> t_65 = <obj<Node>>null
    return <obj<Node>>t_65

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    byte t_68 =     call<function> print(<obj<Object>>t_67)
    int t_69 = <int>0
    return <int>t_69

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    discard<int> call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    discard<int> call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>null or pass-through to _IELSE33
  _IIF32:
    return <byte>1
  _IELSE33:
    return <byte>0

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    discard<byte> call<function> printString(<obj<String>>t_47)
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    discard<byte> call<function> printString(<obj<String>>t_51)
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    discard<byte> call<function> printString(<obj<String>>t_55)
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    discard<byte> call<function> printString(<obj<String>>t_59)
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    discard<byte> call<function> printString(<obj<String>>t_63)
    return

obj<Node> genNull()
    return <obj<Node>>null

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    discard<byte> call<function> print(<obj<Object>>t_67)
    return <int>0

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 2 (took 6 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    discard<int> call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    discard<int> call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>null or pass-through to _IELSE33
  _IIF32:
    return <byte>1
  _IELSE33:
    return <byte>0

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    discard<byte> call<function> printString(<obj<String>>t_47)
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    discard<byte> call<function> printString(<obj<String>>t_51)
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    discard<byte> call<function> printString(<obj<String>>t_55)
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    discard<byte> call<function> printString(<obj<String>>t_59)
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    discard<byte> call<function> printString(<obj<String>>t_63)
    return

obj<Node> genNull()
    return <obj<Node>>null

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    discard<byte> call<function> print(<obj<Object>>t_67)
    return <int>0

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    t_16.field[Node.elem] = <obj<Shape>>t_17
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    t_18.field[Node.next] = <obj<Node>>t_19
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    return <obj<Shape>>t_21

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    return <obj<Node>>t_23

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    obj<Node> t_27 = <obj<Node>>t_26
    discard<int> call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    discard<int> call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    t_24.field[Stack.head] = <obj<Node>>t_27
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>null or pass-through to _IELSE33
  _IIF32:
    return <byte>1
  _IELSE33:
    return <byte>0

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    return <obj<Shape>>t_41

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    t_42.field[Stack.head] = <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    discard<byte> call<function> printString(<obj<String>>t_47)
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    discard<byte> call<function> printString(<obj<String>>t_51)
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    discard<byte> call<function> printString(<obj<String>>t_55)
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    discard<byte> call<function> printString(<obj<String>>t_59)
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    discard<byte> call<function> printString(<obj<String>>t_63)
    return

obj<Node> genNull()
    return <obj<Node>>null

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    discard<byte> call<function> print(<obj<Object>>t_67)
    return <int>0

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Reference counters embedding
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_16" of type obj<Node> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_17" of type obj<Shape> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c0" of type obj<Shape> in stmt     obj<Shape> c0 = t_16.field<obj<Shape>>[Node.elem]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_18" of type obj<Node> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_19" of type obj<Node> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c1" of type obj<Node> in stmt     obj<Node> c1 = t_18.field<obj<Node>>[Node.next]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_20" of type obj<Node> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_21" of type obj<Shape> in stmt     obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c2" of type obj<Shape> in stmt     obj<Shape> c2 = <obj<Shape>>t_21
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_22" of type obj<Node> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_23" of type obj<Node> in stmt     obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c3" of type obj<Node> in stmt     obj<Node> c3 = <obj<Node>>t_23
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_24" of type obj<Stack> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_25" of type obj<Shape> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_26" of type obj<Node> in stmt     obj<Node> t_26 = new Node
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_27" of type obj<Node> in stmt     obj<Node> t_27 = <obj<Node>>t_26
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_29" of type obj<Node> in stmt     obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c4" of type obj<Node> in stmt     obj<Node> c4 = t_24.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_31" of type obj<Stack> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_35" of type obj<Node> in stmt     obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_39" of type obj<Stack> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_40" of type obj<Node> in stmt     obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_41" of type obj<Shape> in stmt     obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c5" of type obj<Shape> in stmt     obj<Shape> c5 = <obj<Shape>>t_41
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_42" of type obj<Stack> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_43" of type obj<Node> in stmt     obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_44" of type obj<Node> in stmt     obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "c6" of type obj<Node> in stmt     obj<Node> c6 = t_42.field<obj<Node>>[Stack.head]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_45" of type obj<Shape> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_47" of type obj<String> in stmt     obj<String> t_47 =     new string _S46
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_49" of type obj<Shape> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_51" of type obj<String> in stmt     obj<String> t_51 =     new string _S50
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_53" of type obj<Rectangle> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_55" of type obj<String> in stmt     obj<String> t_55 =     new string _S54
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_57" of type obj<Circle> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_59" of type obj<String> in stmt     obj<String> t_59 =     new string _S58
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_61" of type obj<Square> just as-is
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_63" of type obj<String> in stmt     obj<String> t_63 =     new string _S62
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] addRefCounters for new function!
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_66" of type obj<Node> in stmt     obj<Node> t_66 =     call<function> genNull()
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Register var "t_67" of type obj<Node> in stmt     obj<Node> t_67 = <obj<Node>>t_66
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Reference counters embedding
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] AST to convert:
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Circle extends [Circle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Circle.tellAgain ()

struct Node extends [Node, Object]
    field obj<Shape> elem;
    field obj<Node> next;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Node> int Node.setElem (c obj<Shape>)
    method <from:Node> int Node.setNext (n obj<Node>)
    method <from:Node> obj<Shape> Node.getElem ()
    method <from:Node> obj<Node> Node.getNext ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Rectangle extends [Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Rectangle.tellAgain ()

struct Shape extends [Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Shape.tellAgain ()

struct Square extends [Square, Rectangle, Shape, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Shape> int Shape.tell ()
    method <from:Shape> int Square.tellAgain ()

struct Stack extends [Stack, Object]
    field obj<Node> head;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()
    method <from:Stack> int Stack.push (c obj<Shape>)
    method <from:Stack> byte Stack.isEmpty ()
    method <from:Stack> obj<Shape> Stack.top ()
    method <from:Stack> int Stack.pop ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int Node.setElem(obj<Node> t_16, obj<Shape> t_17)
    obj<Shape> c0 = t_16.field<obj<Shape>>[Node.elem]
    decr <obj<Shape>>c0
    c0 = <obj<Shape>>t_17
    inc <obj<Shape>>c0
    t_16.field[Node.elem] = <obj<Shape>>c0
    decr <obj<Shape>>t_17
    decr <obj<Node>>t_16
    return

int Node.setNext(obj<Node> t_18, obj<Node> t_19)
    obj<Node> c1 = t_18.field<obj<Node>>[Node.next]
    decr <obj<Node>>c1
    c1 = <obj<Node>>t_19
    inc <obj<Node>>c1
    t_18.field[Node.next] = <obj<Node>>c1
    decr <obj<Node>>t_19
    decr <obj<Node>>t_18
    return

obj<Shape> Node.getElem(obj<Node> t_20)
    obj<Shape> t_21 = t_20.field<obj<Shape>>[Node.elem]
    inc <obj<Shape>>t_21
    decr <obj<Node>>t_20
    obj<Shape> c2 = <obj<Shape>>t_21
    inc <obj<Shape>>c2
    decr <obj<Shape>>t_21
    return <obj<Shape>>c2

obj<Node> Node.getNext(obj<Node> t_22)
    obj<Node> t_23 = t_22.field<obj<Node>>[Node.next]
    inc <obj<Node>>t_23
    decr <obj<Node>>t_22
    obj<Node> c3 = <obj<Node>>t_23
    inc <obj<Node>>c3
    decr <obj<Node>>t_23
    return <obj<Node>>c3

int Stack.push(obj<Stack> t_24, obj<Shape> t_25)
    obj<Node> t_26 = new Node
    inc <obj<Node>>t_26
    obj<Node> t_27 = <obj<Node>>t_26
    inc <obj<Node>>t_27
    decr <obj<Node>>t_26
    discard<int> call<method:Node, class:setElem> t_27(<obj<Node>>t_27, <obj<Shape>>t_25)
    decr <obj<Node>>t_27
    decr <obj<Shape>>t_25
    obj<Node> t_29 = t_24.field<obj<Node>>[Stack.head]
    inc <obj<Node>>t_29
    decr <obj<Stack>>t_24
    discard<int> call<method:Node, class:setNext> t_27(<obj<Node>>t_27, <obj<Node>>t_29)
    decr <obj<Node>>t_27
    decr <obj<Node>>t_29
    obj<Node> c4 = t_24.field<obj<Node>>[Stack.head]
    decr <obj<Node>>c4
    c4 = <obj<Node>>t_27
    inc <obj<Node>>c4
    t_24.field[Stack.head] = <obj<Node>>c4
    decr <obj<Node>>t_27
    decr <obj<Stack>>t_24
    return

byte Stack.isEmpty(obj<Stack> t_31)
    obj<Node> t_35 = t_31.field<obj<Node>>[Stack.head]
    inc <obj<Node>>t_35
    decr <obj<Stack>>t_31
    decr <obj<Node>>t_35
    jump _IIF32 if <obj<Node>>t_35 == <obj<?>>null or pass-through to _IELSE33
  _IIF32:
    return <byte>1
  _IELSE33:
    return <byte>0

obj<Shape> Stack.top(obj<Stack> t_39)
    obj<Node> t_40 = t_39.field<obj<Node>>[Stack.head]
    inc <obj<Node>>t_40
    decr <obj<Stack>>t_39
    obj<Shape> t_41 =     call<method:Node, class:getElem> t_40(<obj<Node>>t_40)
    decr <obj<Node>>t_40
    obj<Shape> c5 = <obj<Shape>>t_41
    inc <obj<Shape>>c5
    decr <obj<Shape>>t_41
    return <obj<Shape>>c5

int Stack.pop(obj<Stack> t_42)
    obj<Node> t_43 = t_42.field<obj<Node>>[Stack.head]
    inc <obj<Node>>t_43
    decr <obj<Stack>>t_42
    obj<Node> t_44 =     call<method:Node, class:getNext> t_43(<obj<Node>>t_43)
    decr <obj<Node>>t_43
    obj<Node> c6 = t_42.field<obj<Node>>[Stack.head]
    decr <obj<Node>>c6
    c6 = <obj<Node>>t_44
    inc <obj<Node>>c6
    t_42.field[Stack.head] = <obj<Node>>c6
    decr <obj<Stack>>t_42
    decr <obj<Node>>t_44
    return

int Shape.tell(obj<Shape> t_45)
    obj<String> t_47 =     new string _S46
    inc <obj<String>>t_47
    discard<byte> call<function> printString(<obj<String>>t_47)
    decr <obj<String>>t_47
    return

int Shape.tellAgain(obj<Shape> t_49)
    obj<String> t_51 =     new string _S50
    inc <obj<String>>t_51
    discard<byte> call<function> printString(<obj<String>>t_51)
    decr <obj<String>>t_51
    return

int Rectangle.tellAgain(obj<Rectangle> t_53)
    obj<String> t_55 =     new string _S54
    inc <obj<String>>t_55
    discard<byte> call<function> printString(<obj<String>>t_55)
    decr <obj<String>>t_55
    return

int Circle.tellAgain(obj<Circle> t_57)
    obj<String> t_59 =     new string _S58
    inc <obj<String>>t_59
    discard<byte> call<function> printString(<obj<String>>t_59)
    decr <obj<String>>t_59
    return

int Square.tellAgain(obj<Square> t_61)
    obj<String> t_63 =     new string _S62
    inc <obj<String>>t_63
    discard<byte> call<function> printString(<obj<String>>t_63)
    decr <obj<String>>t_63
    return

obj<Node> genNull()
    return <obj<Node>>null

int main()
    obj<Node> t_66 =     call<function> genNull()
    obj<Node> t_67 = <obj<Node>>t_66
    inc <obj<Node>>t_67
    decr <obj<Node>>t_66
    discard<byte> call<function> print(<obj<Object>>t_67)
    decr <obj<Node>>t_67
    return <int>0

data string _S46 = "I'm a shape"
data string _S50 = "I'm just a shape"
data string _S54 = "I'm really a rectangle"
data string _S58 = "I'm really a circle"
data string _S62 = "I'm really a square"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Linearizer terminated
[94m[Info]    [0m[Reporting.Logs.logInfo#75] IR conversion doneexample.lat

.metadata: [
  .classes: [
    Array  extends [IRTargetRefName "Array", IRTargetRefName "Object"] : [
      .fields: [
        Object & elements;
        int length;
        int elementSize;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Array.toString;
      ]
    ]
    Circle  extends [IRTargetRefName "Circle", IRTargetRefName "Shape", IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Shape.tell;
        int () Circle.tellAgain;
      ]
    ]
    Node  extends [IRTargetRefName "Node", IRTargetRefName "Object"] : [
      .fields: [
        Shape & elem;
        Node & next;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int (Shape &)Node.setElem;
        int (Node &)Node.setNext;
        Shape & () Node.getElem;
        Node & () Node.getNext;
      ]
    ]
    Object  extends [IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
      ]
    ]
    Rectangle  extends [IRTargetRefName "Rectangle", IRTargetRefName "Shape", IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Shape.tell;
        int () Rectangle.tellAgain;
      ]
    ]
    Shape  extends [IRTargetRefName "Shape", IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Shape.tell;
        int () Shape.tellAgain;
      ]
    ]
    Square  extends [IRTargetRefName "Square", IRTargetRefName "Rectangle", IRTargetRefName "Shape", IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Shape.tell;
        int () Square.tellAgain;
      ]
    ]
    Stack  extends [IRTargetRefName "Stack", IRTargetRefName "Object"] : [
      .fields: [
        Node & head;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int (Shape &)Stack.push;
        boolean () Stack.isEmpty;
        Shape & () Stack.top;
        int () Stack.pop;
      ]
    ]
    String  extends [IRTargetRefName "String", IRTargetRefName "Object"] : [
      .fields: [
        ]
      .methods: [
        int (int)String.charAt;
        boolean (Object &)String.equals;
        String & (String &)String.concat;
        boolean (String &)String.startsWith;
        boolean (String &)String.endsWith;
        int [] & () String.getBytes;
        int (String &, int)String.indexOf;
        int () String.length;
        String & (int, int)String.substring;
        String & () String.toString;
        int () String.getHashCode;
      ]
    ]
    ~cl_TopLevel  extends [] : [
      .fields: [
        ]
      .methods: [
        Array & () Array.toString;
        Object & () Object.toString;
        int () Object.getHashCode;
        boolean (Object &)Object.equals;
        boolean (Object &)String.equals;
        int () String.getHashCode;
        String & () String.toString;
        String & () String.substring;
        int () String.length;
        int (String &, int)String.indexOf;
        String & () String.getBytes;
        boolean (String &)String.endsWith;
        boolean (String &)String.startsWith;
        String & (String &, String &)String.concat;
        int (int)String.charAt;
        boolean (String &)~cl_TopLevel.printString;
        boolean (int)~cl_TopLevel.printInt;
        boolean (boolean)~cl_TopLevel.printByte;
        boolean (boolean)~cl_TopLevel.printBoolean;
        boolean (Array &)~cl_TopLevel.printBinArray;
        String & (boolean)~cl_TopLevel.byteToString;
        String & (boolean)~cl_TopLevel.boolToString;
        String & (int)~cl_TopLevel.intToString;
        boolean (Object &)~cl_TopLevel.print;
        boolean () ~cl_TopLevel.error;
        int () ~cl_TopLevel.readInt;
        String & () ~cl_TopLevel.readString;
        Object & (Object &, Object &)~cl_TopLevel.__cast;
        int (Node &, Shape &)Node.setElem;
        int (Node &, Node &)Node.setNext;
        Shape & (Node &)Node.getElem;
        Node & (Node &)Node.getNext;
        int (Stack &, Shape &)Stack.push;
        boolean (Stack &)Stack.isEmpty;
        Shape & (Stack &)Stack.top;
        int (Stack &)Stack.pop;
        int (Shape &)Shape.tell;
        int (Shape &)Shape.tellAgain;
        int (Rectangle &)Rectangle.tellAgain;
        int (Circle &)Circle.tellAgain;
        int (Square &)Square.tellAgain;
        Node & () ~cl_TopLevel.genNull;
        int () ~cl_TopLevel.main;
      ]
    ]
  ]
]
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
]
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit",".L_exit__from__IELSE33",".L_exit__from__IIF32","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_exit__from__IELSE33",IRLabelName ".L_exit__from__IIF32"]
".L_exit__from__IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName "_IELSE33"]
".L_exit__from__IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit__from__IELSE33"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit__from__IIF32"] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge _IELSE33 == to => .L_exit__from__IELSE33
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit",".L_exit__from__IIF32","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_exit__from__IIF32",IRLabelName "_IELSE33"]
".L_exit__from__IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit__from__IIF32"] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge _IIF32 == to => .L_exit__from__IIF32
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED CFGS

CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_16",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(14,Int ())),("%a_t_17",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_16",(0,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(13,Int ())),("%a_t_17",(1,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(14,Int ())),("%a_t_18",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%v_return",(13,Int ())),("%a_t_18",(0,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_20",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_20",(0,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_return",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_return",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_22",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_22",(0,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_return",(2,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (IRTargetRefName "Node")))], kill = []
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_24",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(28,Int ())),("%a_t_25",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_24",(0,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(27,Int ())),("%a_t_25",(1,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_31",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_31",(0,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v___temp_5",(0,Bool ()))], out = [], use = [("%v___temp_5",Bool ())], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Bool ()))], out = [("%v_return",(0,Bool ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Bool ()))], out = [], use = [("%v_return",Bool ())], kill = []
Liveness at start of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at end of _IELSE33: in = [("%v_return",(3,Bool ()))], out = [("%v_return",(2,Bool ()))], use = [], kill = []
Liveness at start of _IIF32: in = [], out = [], use = [], kill = []
Liveness at end of _IIF32: in = [("%v_return",(3,Bool ()))], out = [("%v_return",(2,Bool ()))], use = [], kill = []
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_39",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_39",(0,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_return",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_return",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_42",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(18,Int ()))], out = [("%a_t_42",(0,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(17,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(9,Int ())),("%a_t_45",(1,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%v_return",(8,Int ())),("%a_t_45",(0,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(9,Int ())),("%a_t_49",(1,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%v_return",(8,Int ())),("%a_t_49",(0,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(9,Int ())),("%a_t_53",(1,Ref () (Ref () (Cl () (IRTargetRefName "Rectangle")))))], out = [("%v_return",(8,Int ())),("%a_t_53",(0,Ref () (Ref () (Cl () (IRTargetRefName "Rectangle")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(9,Int ())),("%a_t_57",(1,Ref () (Ref () (Cl () (IRTargetRefName "Circle")))))], out = [("%v_return",(8,Int ())),("%a_t_57",(0,Ref () (Ref () (Cl () (IRTargetRefName "Circle")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(9,Int ())),("%a_t_61",(1,Ref () (Ref () (Cl () (IRTargetRefName "Square")))))], out = [("%v_return",(8,Int ())),("%a_t_61",(0,Ref () (Ref () (Cl () (IRTargetRefName "Square")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_return",(2,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (IRTargetRefName "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (IRTargetRefName "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:4:5 (Int example.lat:4:5) (QIdent example.lat:4:10 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [Param example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_16"),Param example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%a_t_17")] [ILabel example.lat:4:5 (IRLabelName ".L_entry"),ILoad example.lat:4:5 (IRValueName "%v_t_16") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_16")),ILoad example.lat:4:5 (IRValueName "%v_t_17") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_17")),ILoad example.lat:4:29 (IRValueName "%v_c0") (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")) (-1),ISet example.lat:4:29 (IRValueName "%v_c0") (VVal example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")) 1,ISet example.lat:4:29 (IRValueName "%v___temp_0") (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")),IStore example.lat:4:29 (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_0")) (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")) (-1),IAddRef example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_16")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:4:5 (IRLabelName ".L_exit"),IRet example.lat:4:5 (VVal example.lat:4:5 (Int example.lat:4:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:5:5 (Int example.lat:5:5) (QIdent example.lat:5:10 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [Param example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_18"),Param example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%a_t_19")] [ILabel example.lat:5:5 (IRLabelName ".L_entry"),ILoad example.lat:5:5 (IRValueName "%v_t_18") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_18")),ILoad example.lat:5:5 (IRValueName "%v_t_19") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node")))) 1 (IRValueName "%a_t_19")),ILoad example.lat:5:28 (IRValueName "%v_c1") (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")) (-1),ISet example.lat:5:28 (IRValueName "%v_c1") (VVal example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")) 1,ISet example.lat:5:28 (IRValueName "%v___temp_1") (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")),IStore example.lat:5:28 (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_1")) (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")) (-1),IAddRef example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_18")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:5:5 (IRLabelName ".L_exit"),IRet example.lat:5:5 (VVal example.lat:5:5 (Int example.lat:5:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:6:11 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [Param example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_20")] [ILabel example.lat:6:5 (IRLabelName ".L_entry"),ILoad example.lat:6:5 (IRValueName "%v_t_20") (PParam example.lat:6:5 (Ref example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_20")),ILoad example.lat:6:30 (IRValueName "%v_t_21") (PFld example.lat:6:30 (Ref example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:6:30 (Cl example.lat:6:30 (IRTargetRefName "Node")) (IRValueName "%v_t_20")) (QIdent example.lat:6:30 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) 1,IAddRef example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_20")) (-1),ISet example.lat:6:23 (IRValueName "%v_c2") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")),IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c2")) 1,IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) (-1),ISet example.lat:6:23 (IRValueName "%v___temp_2") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c2")),ISet example.lat:6:23 (IRValueName "%v_return") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_2")),IJmp example.lat:6:23 (IRLabelName ".L_exit"),ILabel example.lat:6:5 (IRLabelName ".L_exit"),IRet example.lat:6:5 (VVal example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:7:10 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [Param example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_22")] [ILabel example.lat:7:5 (IRLabelName ".L_entry"),ILoad example.lat:7:5 (IRValueName "%v_t_22") (PParam example.lat:7:5 (Ref example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_22")),ILoad example.lat:7:29 (IRValueName "%v_t_23") (PFld example.lat:7:29 (Ref example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:7:29 (Cl example.lat:7:29 (IRTargetRefName "Node")) (IRValueName "%v_t_22")) (QIdent example.lat:7:29 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) 1,IAddRef example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_22")) (-1),ISet example.lat:7:22 (IRValueName "%v_c3") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")),IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c3")) 1,IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) (-1),ISet example.lat:7:22 (IRValueName "%v___temp_3") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c3")),ISet example.lat:7:22 (IRValueName "%v_return") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_3")),IJmp example.lat:7:22 (IRLabelName ".L_exit"),ILabel example.lat:7:5 (IRLabelName ".L_exit"),IRet example.lat:7:5 (VVal example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:11:5 (Int example.lat:11:5) (QIdent example.lat:11:10 (IRTargetRefName "Stack") (IRTargetRefName "push")) [Param example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_24"),Param example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%a_t_25")] [ILabel example.lat:11:5 (IRLabelName ".L_entry"),ILoad example.lat:11:5 (IRValueName "%v_t_24") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_24")),ILoad example.lat:11:5 (IRValueName "%v_t_25") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_25")),INew example.lat:12:24 (IRValueName "%v_t_26") (Cl example.lat:12:24 (IRTargetRefName "Node")),IAddRef example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) 1,ISet example.lat:12:14 (IRValueName "%v_t_27") (VVal example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")),IAddRef example.lat:12:14 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) 1,IAddRef example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IVCall example.lat:13:9 (CallVirt example.lat:13:9 (Int example.lat:4:5) (QIdent example.lat:13:9 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [VVal example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27"),VVal example.lat:13:9 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")]),IAddRef example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (VVal example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")) (-1),ILoad example.lat:14:25 (IRValueName "%v_t_29") (PFld example.lat:14:25 (Ref example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:14:25 (Cl example.lat:14:25 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:14:25 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) 1,IAddRef example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IVCall example.lat:14:9 (CallVirt example.lat:14:9 (Int example.lat:5:5) (QIdent example.lat:14:9 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [VVal example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27"),VVal example.lat:14:9 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")]),IAddRef example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) (-1),ILoad example.lat:15:9 (IRValueName "%v_c4") (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")) (-1),ISet example.lat:15:9 (IRValueName "%v_c4") (VVal example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")) 1,ISet example.lat:15:9 (IRValueName "%v___temp_4") (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")),IStore example.lat:15:9 (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_4")) (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:11:5 (IRLabelName ".L_exit"),IRet example.lat:11:5 (VVal example.lat:11:5 (Int example.lat:11:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:17:5 (Bool example.lat:17:5) (QIdent example.lat:17:13 (IRTargetRefName "Stack") (IRTargetRefName "isEmpty")) [Param example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_31")] [ILabel example.lat:17:5 (IRLabelName ".L_entry"),ILoad example.lat:17:5 (IRValueName "%v_t_31") (PParam example.lat:17:5 (Ref example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_31")),ILoad example.lat:18:16 (IRValueName "%v_t_35") (PFld example.lat:18:16 (Ref example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:18:16 (Cl example.lat:18:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_31")) (QIdent example.lat:18:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) 1,IAddRef example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_31")) (-1),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (-1),IOp example.lat:18:16 (IRValueName "%v___temp_5") (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (OpEQU example.lat:18:16) (VNull example.lat:18:28 (Ref  (Cl  (IRTargetRefName "?")))),ICondJmp example.lat:18:16 (VVal example.lat:18:16 (Bool example.lat:18:16) (IRValueName "%v___temp_5")) (IRLabelName "_IIF32") (IRLabelName "_IELSE33"),ILabel example.lat:18:9 (IRLabelName "_IELSE33"),ISet example.lat:18:9 (IRValueName "%v___temp_7") (VInt example.lat:18:9 0),ISet example.lat:18:9 (IRValueName "%v_return") (VVal example.lat:18:9 (Bool example.lat:18:9) (IRValueName "%v___temp_7")),IJmp example.lat:18:9 (IRLabelName ".L_exit"),ILabel example.lat:17:5 (IRLabelName ".L_exit"),IRet example.lat:17:5 (VVal example.lat:17:5 (Bool example.lat:17:5) (IRValueName "%v_return")),ILabel example.lat:18:9 (IRLabelName "_IIF32"),ISet example.lat:18:9 (IRValueName "%v___temp_6") (VInt example.lat:18:9 1),ISet example.lat:18:9 (IRValueName "%v_return") (VVal example.lat:18:9 (Bool example.lat:18:9) (IRValueName "%v___temp_6")),IJmp example.lat:18:9 (IRLabelName ".L_exit")]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (QIdent example.lat:20:11 (IRTargetRefName "Stack") (IRTargetRefName "top")) [Param example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_39")] [ILabel example.lat:20:5 (IRLabelName ".L_entry"),ILoad example.lat:20:5 (IRValueName "%v_t_39") (PParam example.lat:20:5 (Ref example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_39")),ILoad example.lat:21:16 (IRValueName "%v_t_40") (PFld example.lat:21:16 (Ref example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:21:16 (Cl example.lat:21:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_39")) (QIdent example.lat:21:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) 1,IAddRef example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_39")) (-1),ICall example.lat:21:16 (IRValueName "%v_t_41") (CallVirt example.lat:21:16 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:21:16 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")]),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) (-1),ISet example.lat:21:9 (IRValueName "%v_c5") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")),IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c5")) 1,IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")) (-1),ISet example.lat:21:9 (IRValueName "%v___temp_8") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c5")),ISet example.lat:21:9 (IRValueName "%v_return") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_8")),IJmp example.lat:21:9 (IRLabelName ".L_exit"),ILabel example.lat:20:5 (IRLabelName ".L_exit"),IRet example.lat:20:5 (VVal example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:23:5 (Int example.lat:23:5) (QIdent example.lat:23:10 (IRTargetRefName "Stack") (IRTargetRefName "pop")) [Param example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_42")] [ILabel example.lat:23:5 (IRLabelName ".L_entry"),ILoad example.lat:23:5 (IRValueName "%v_t_42") (PParam example.lat:23:5 (Ref example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_42")),ILoad example.lat:24:16 (IRValueName "%v_t_43") (PFld example.lat:24:16 (Ref example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:16 (Cl example.lat:24:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) 1,IAddRef example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),ICall example.lat:24:16 (IRValueName "%v_t_44") (CallVirt example.lat:24:16 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:24:16 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")]),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) (-1),ILoad example.lat:24:9 (IRValueName "%v_c6") (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")) (-1),ISet example.lat:24:9 (IRValueName "%v_c6") (VVal example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")) 1,ISet example.lat:24:9 (IRValueName "%v___temp_9") (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")),IStore example.lat:24:9 (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_9")) (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),IAddRef example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:23:5 (IRLabelName ".L_exit"),IRet example.lat:23:5 (VVal example.lat:23:5 (Int example.lat:23:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:28:5 (Int example.lat:28:5) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")) [Param example.lat:28:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_45")] [ILabel example.lat:28:5 (IRLabelName ".L_entry"),ILoad example.lat:28:5 (IRValueName "%v_t_45") (PParam example.lat:28:5 (Ref example.lat:28:5 (Ref  (Cl  (IRTargetRefName "Shape")))) 0 (IRValueName "%a_t_45")),INewStr example.lat:29:21 (IRValueName "%v_t_47") "I'm a shape",IAddRef example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) 1,IVCall example.lat:29:9 (Call example.lat:29:9 (Bool inside standard library) (QIdent example.lat:29:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:29:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_47")] []),IAddRef example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:28:5 (IRLabelName ".L_exit"),IRet example.lat:28:5 (VVal example.lat:28:5 (Int example.lat:28:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:31:5 (Int example.lat:31:5) (QIdent example.lat:31:10 (IRTargetRefName "Shape") (IRTargetRefName "tellAgain")) [Param example.lat:31:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_49")] [ILabel example.lat:31:5 (IRLabelName ".L_entry"),ILoad example.lat:31:5 (IRValueName "%v_t_49") (PParam example.lat:31:5 (Ref example.lat:31:5 (Ref  (Cl  (IRTargetRefName "Shape")))) 0 (IRValueName "%a_t_49")),INewStr example.lat:32:21 (IRValueName "%v_t_51") "I'm just a shape",IAddRef example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) 1,IVCall example.lat:32:9 (Call example.lat:32:9 (Bool inside standard library) (QIdent example.lat:32:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:32:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_51")] []),IAddRef example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:31:5 (IRLabelName ".L_exit"),IRet example.lat:31:5 (VVal example.lat:31:5 (Int example.lat:31:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:36:5 (Int example.lat:36:5) (QIdent example.lat:36:10 (IRTargetRefName "Rectangle") (IRTargetRefName "tellAgain")) [Param example.lat:36:5 (Ref  (Cl  (IRTargetRefName "Rectangle"))) (IRValueName "%a_t_53")] [ILabel example.lat:36:5 (IRLabelName ".L_entry"),ILoad example.lat:36:5 (IRValueName "%v_t_53") (PParam example.lat:36:5 (Ref example.lat:36:5 (Ref  (Cl  (IRTargetRefName "Rectangle")))) 0 (IRValueName "%a_t_53")),INewStr example.lat:37:21 (IRValueName "%v_t_55") "I'm really a rectangle",IAddRef example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) 1,IVCall example.lat:37:9 (Call example.lat:37:9 (Bool inside standard library) (QIdent example.lat:37:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:37:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_55")] []),IAddRef example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:36:5 (IRLabelName ".L_exit"),IRet example.lat:36:5 (VVal example.lat:36:5 (Int example.lat:36:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:41:5 (Int example.lat:41:5) (QIdent example.lat:41:10 (IRTargetRefName "Circle") (IRTargetRefName "tellAgain")) [Param example.lat:41:5 (Ref  (Cl  (IRTargetRefName "Circle"))) (IRValueName "%a_t_57")] [ILabel example.lat:41:5 (IRLabelName ".L_entry"),ILoad example.lat:41:5 (IRValueName "%v_t_57") (PParam example.lat:41:5 (Ref example.lat:41:5 (Ref  (Cl  (IRTargetRefName "Circle")))) 0 (IRValueName "%a_t_57")),INewStr example.lat:42:21 (IRValueName "%v_t_59") "I'm really a circle",IAddRef example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) 1,IVCall example.lat:42:9 (Call example.lat:42:9 (Bool inside standard library) (QIdent example.lat:42:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:42:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_59")] []),IAddRef example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:41:5 (IRLabelName ".L_exit"),IRet example.lat:41:5 (VVal example.lat:41:5 (Int example.lat:41:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:46:5 (Int example.lat:46:5) (QIdent example.lat:46:10 (IRTargetRefName "Square") (IRTargetRefName "tellAgain")) [Param example.lat:46:5 (Ref  (Cl  (IRTargetRefName "Square"))) (IRValueName "%a_t_61")] [ILabel example.lat:46:5 (IRLabelName ".L_entry"),ILoad example.lat:46:5 (IRValueName "%v_t_61") (PParam example.lat:46:5 (Ref example.lat:46:5 (Ref  (Cl  (IRTargetRefName "Square")))) 0 (IRValueName "%a_t_61")),INewStr example.lat:47:21 (IRValueName "%v_t_63") "I'm really a square",IAddRef example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) 1,IVCall example.lat:47:9 (Call example.lat:47:9 (Bool inside standard library) (QIdent example.lat:47:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:47:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_63")] []),IAddRef example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:46:5 (IRLabelName ".L_exit"),IRet example.lat:46:5 (VVal example.lat:46:5 (Int example.lat:46:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:51:6 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] [ILabel example.lat:51:1 (IRLabelName ".L_entry"),ISet example.lat:52:5 (IRValueName "%v___temp_10") (VNull example.lat:52:12 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node")))),ISet example.lat:52:5 (IRValueName "%v_return") (VVal example.lat:52:5 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v___temp_10")),IJmp example.lat:52:5 (IRLabelName ".L_exit"),ILabel example.lat:51:1 (IRLabelName ".L_exit"),IRet example.lat:51:1 (VVal example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:55:1 (Int example.lat:55:1) (QIdent example.lat:55:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "main")) [] [ILabel example.lat:55:1 (IRLabelName ".L_entry"),ICall example.lat:56:16 (IRValueName "%v_t_66") (Call example.lat:56:16 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:56:16 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] []),ISet example.lat:56:10 (IRValueName "%v_t_67") (VVal example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")),IAddRef example.lat:56:10 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_67")) 1,IAddRef example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")) (-1),IVCall example.lat:57:5 (Call example.lat:57:5 (Bool inside standard library) (QIdent example.lat:57:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "print")) [VVal example.lat:57:5 (Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))) (IRValueName "%v_t_67")] []),IAddRef example.lat:57:5 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:57:5 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_67")) (-1),ISet example.lat:58:5 (IRValueName "%v___temp_11") (VInt example.lat:58:5 0),ISet example.lat:58:5 (IRValueName "%v_return") (VVal example.lat:58:5 (Int example.lat:58:12) (IRValueName "%v___temp_11")),IJmp example.lat:58:5 (IRLabelName ".L_exit"),ILabel example.lat:55:1 (IRLabelName ".L_exit"),IRet example.lat:55:1 (VVal example.lat:55:1 (Int example.lat:55:1) (IRValueName "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Optimising ...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Optimising ...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:4:5 (Int example.lat:4:5) (QIdent example.lat:4:10 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [Param example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_16"),Param example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%a_t_17")] [ILabel example.lat:4:5 (IRLabelName ".L_entry"),ILoad example.lat:4:5 (IRValueName "%v_t_16") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_16")),ILoad example.lat:4:5 (IRValueName "%v_t_17") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_17")),ILoad example.lat:4:29 (IRValueName "%v_c0") (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")) (-1),ISet example.lat:4:29 (IRValueName "%v_c0") (VVal example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")) 1,ISet example.lat:4:29 (IRValueName "%v___temp_0") (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")),IStore example.lat:4:29 (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_0")) (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")) (-1),IAddRef example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_16")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:4:5 (IRLabelName ".L_exit"),IRet example.lat:4:5 (VVal example.lat:4:5 (Int example.lat:4:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:5:5 (Int example.lat:5:5) (QIdent example.lat:5:10 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [Param example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_18"),Param example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%a_t_19")] [ILabel example.lat:5:5 (IRLabelName ".L_entry"),ILoad example.lat:5:5 (IRValueName "%v_t_18") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_18")),ILoad example.lat:5:5 (IRValueName "%v_t_19") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node")))) 1 (IRValueName "%a_t_19")),ILoad example.lat:5:28 (IRValueName "%v_c1") (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")) (-1),ISet example.lat:5:28 (IRValueName "%v_c1") (VVal example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")) 1,ISet example.lat:5:28 (IRValueName "%v___temp_1") (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")),IStore example.lat:5:28 (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_1")) (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")) (-1),IAddRef example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_18")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:5:5 (IRLabelName ".L_exit"),IRet example.lat:5:5 (VVal example.lat:5:5 (Int example.lat:5:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:6:11 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [Param example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_20")] [ILabel example.lat:6:5 (IRLabelName ".L_entry"),ILoad example.lat:6:5 (IRValueName "%v_t_20") (PParam example.lat:6:5 (Ref example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_20")),ILoad example.lat:6:30 (IRValueName "%v_t_21") (PFld example.lat:6:30 (Ref example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:6:30 (Cl example.lat:6:30 (IRTargetRefName "Node")) (IRValueName "%v_t_20")) (QIdent example.lat:6:30 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) 1,IAddRef example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_20")) (-1),ISet example.lat:6:23 (IRValueName "%v_c2") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")),IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c2")) 1,IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) (-1),ISet example.lat:6:23 (IRValueName "%v___temp_2") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c2")),ISet example.lat:6:23 (IRValueName "%v_return") (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_2")),IJmp example.lat:6:23 (IRLabelName ".L_exit"),ILabel example.lat:6:5 (IRLabelName ".L_exit"),IRet example.lat:6:5 (VVal example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:7:10 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [Param example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_22")] [ILabel example.lat:7:5 (IRLabelName ".L_entry"),ILoad example.lat:7:5 (IRValueName "%v_t_22") (PParam example.lat:7:5 (Ref example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_22")),ILoad example.lat:7:29 (IRValueName "%v_t_23") (PFld example.lat:7:29 (Ref example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:7:29 (Cl example.lat:7:29 (IRTargetRefName "Node")) (IRValueName "%v_t_22")) (QIdent example.lat:7:29 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) 1,IAddRef example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_22")) (-1),ISet example.lat:7:22 (IRValueName "%v_c3") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")),IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c3")) 1,IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) (-1),ISet example.lat:7:22 (IRValueName "%v___temp_3") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c3")),ISet example.lat:7:22 (IRValueName "%v_return") (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_3")),IJmp example.lat:7:22 (IRLabelName ".L_exit"),ILabel example.lat:7:5 (IRLabelName ".L_exit"),IRet example.lat:7:5 (VVal example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:11:5 (Int example.lat:11:5) (QIdent example.lat:11:10 (IRTargetRefName "Stack") (IRTargetRefName "push")) [Param example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_24"),Param example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%a_t_25")] [ILabel example.lat:11:5 (IRLabelName ".L_entry"),ILoad example.lat:11:5 (IRValueName "%v_t_24") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_24")),ILoad example.lat:11:5 (IRValueName "%v_t_25") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_25")),INew example.lat:12:24 (IRValueName "%v_t_26") (Cl example.lat:12:24 (IRTargetRefName "Node")),IAddRef example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) 1,ISet example.lat:12:14 (IRValueName "%v_t_27") (VVal example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")),IAddRef example.lat:12:14 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) 1,IAddRef example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IVCall example.lat:13:9 (CallVirt example.lat:13:9 (Int example.lat:4:5) (QIdent example.lat:13:9 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [VVal example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27"),VVal example.lat:13:9 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")]),IAddRef example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (VVal example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")) (-1),ILoad example.lat:14:25 (IRValueName "%v_t_29") (PFld example.lat:14:25 (Ref example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:14:25 (Cl example.lat:14:25 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:14:25 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) 1,IAddRef example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IVCall example.lat:14:9 (CallVirt example.lat:14:9 (Int example.lat:5:5) (QIdent example.lat:14:9 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [VVal example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27"),VVal example.lat:14:9 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")]),IAddRef example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) (-1),ILoad example.lat:15:9 (IRValueName "%v_c4") (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")) (-1),ISet example.lat:15:9 (IRValueName "%v_c4") (VVal example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")) 1,ISet example.lat:15:9 (IRValueName "%v___temp_4") (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")),IStore example.lat:15:9 (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_4")) (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_27")) (-1),IAddRef example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:11:5 (IRLabelName ".L_exit"),IRet example.lat:11:5 (VVal example.lat:11:5 (Int example.lat:11:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:17:5 (Bool example.lat:17:5) (QIdent example.lat:17:13 (IRTargetRefName "Stack") (IRTargetRefName "isEmpty")) [Param example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_31")] [ILabel example.lat:17:5 (IRLabelName ".L_entry"),ILoad example.lat:17:5 (IRValueName "%v_t_31") (PParam example.lat:17:5 (Ref example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_31")),ILoad example.lat:18:16 (IRValueName "%v_t_35") (PFld example.lat:18:16 (Ref example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:18:16 (Cl example.lat:18:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_31")) (QIdent example.lat:18:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) 1,IAddRef example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_31")) (-1),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (-1),IOp example.lat:18:16 (IRValueName "%v___temp_5") (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (OpEQU example.lat:18:16) (VNull example.lat:18:28 (Ref  (Cl  (IRTargetRefName "?")))),ICondJmp example.lat:18:16 (VVal example.lat:18:16 (Bool example.lat:18:16) (IRValueName "%v___temp_5")) (IRLabelName "_IIF32") (IRLabelName "_IELSE33"),ILabel example.lat:18:9 (IRLabelName "_IELSE33"),ISet example.lat:18:9 (IRValueName "%v___temp_7") (VInt example.lat:18:9 0),ISet example.lat:18:9 (IRValueName "%v_return") (VVal example.lat:18:9 (Bool example.lat:18:9) (IRValueName "%v___temp_7")),IJmp example.lat:18:9 (IRLabelName ".L_exit"),ILabel example.lat:17:5 (IRLabelName ".L_exit"),IRet example.lat:17:5 (VVal example.lat:17:5 (Bool example.lat:17:5) (IRValueName "%v_return")),ILabel example.lat:18:9 (IRLabelName "_IIF32"),ISet example.lat:18:9 (IRValueName "%v___temp_6") (VInt example.lat:18:9 1),ISet example.lat:18:9 (IRValueName "%v_return") (VVal example.lat:18:9 (Bool example.lat:18:9) (IRValueName "%v___temp_6")),IJmp example.lat:18:9 (IRLabelName ".L_exit")]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (QIdent example.lat:20:11 (IRTargetRefName "Stack") (IRTargetRefName "top")) [Param example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_39")] [ILabel example.lat:20:5 (IRLabelName ".L_entry"),ILoad example.lat:20:5 (IRValueName "%v_t_39") (PParam example.lat:20:5 (Ref example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_39")),ILoad example.lat:21:16 (IRValueName "%v_t_40") (PFld example.lat:21:16 (Ref example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:21:16 (Cl example.lat:21:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_39")) (QIdent example.lat:21:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) 1,IAddRef example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_39")) (-1),ICall example.lat:21:16 (IRValueName "%v_t_41") (CallVirt example.lat:21:16 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:21:16 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")]),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) (-1),ISet example.lat:21:9 (IRValueName "%v_c5") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")),IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c5")) 1,IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")) (-1),ISet example.lat:21:9 (IRValueName "%v___temp_8") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c5")),ISet example.lat:21:9 (IRValueName "%v_return") (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v___temp_8")),IJmp example.lat:21:9 (IRLabelName ".L_exit"),ILabel example.lat:20:5 (IRLabelName ".L_exit"),IRet example.lat:20:5 (VVal example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:23:5 (Int example.lat:23:5) (QIdent example.lat:23:10 (IRTargetRefName "Stack") (IRTargetRefName "pop")) [Param example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_42")] [ILabel example.lat:23:5 (IRLabelName ".L_entry"),ILoad example.lat:23:5 (IRValueName "%v_t_42") (PParam example.lat:23:5 (Ref example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_42")),ILoad example.lat:24:16 (IRValueName "%v_t_43") (PFld example.lat:24:16 (Ref example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:16 (Cl example.lat:24:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) 1,IAddRef example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),ICall example.lat:24:16 (IRValueName "%v_t_44") (CallVirt example.lat:24:16 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:24:16 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")]),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) (-1),ILoad example.lat:24:9 (IRValueName "%v_c6") (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")) (-1),ISet example.lat:24:9 (IRValueName "%v_c6") (VVal example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")) 1,ISet example.lat:24:9 (IRValueName "%v___temp_9") (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")),IStore example.lat:24:9 (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v___temp_9")) (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),IAddRef example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:23:5 (IRLabelName ".L_exit"),IRet example.lat:23:5 (VVal example.lat:23:5 (Int example.lat:23:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:28:5 (Int example.lat:28:5) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")) [Param example.lat:28:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_45")] [ILabel example.lat:28:5 (IRLabelName ".L_entry"),ILoad example.lat:28:5 (IRValueName "%v_t_45") (PParam example.lat:28:5 (Ref example.lat:28:5 (Ref  (Cl  (IRTargetRefName "Shape")))) 0 (IRValueName "%a_t_45")),INewStr example.lat:29:21 (IRValueName "%v_t_47") "I'm a shape",IAddRef example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) 1,IVCall example.lat:29:9 (Call example.lat:29:9 (Bool inside standard library) (QIdent example.lat:29:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:29:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_47")] []),IAddRef example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:28:5 (IRLabelName ".L_exit"),IRet example.lat:28:5 (VVal example.lat:28:5 (Int example.lat:28:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:31:5 (Int example.lat:31:5) (QIdent example.lat:31:10 (IRTargetRefName "Shape") (IRTargetRefName "tellAgain")) [Param example.lat:31:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_49")] [ILabel example.lat:31:5 (IRLabelName ".L_entry"),ILoad example.lat:31:5 (IRValueName "%v_t_49") (PParam example.lat:31:5 (Ref example.lat:31:5 (Ref  (Cl  (IRTargetRefName "Shape")))) 0 (IRValueName "%a_t_49")),INewStr example.lat:32:21 (IRValueName "%v_t_51") "I'm just a shape",IAddRef example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) 1,IVCall example.lat:32:9 (Call example.lat:32:9 (Bool inside standard library) (QIdent example.lat:32:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:32:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_51")] []),IAddRef example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:31:5 (IRLabelName ".L_exit"),IRet example.lat:31:5 (VVal example.lat:31:5 (Int example.lat:31:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:36:5 (Int example.lat:36:5) (QIdent example.lat:36:10 (IRTargetRefName "Rectangle") (IRTargetRefName "tellAgain")) [Param example.lat:36:5 (Ref  (Cl  (IRTargetRefName "Rectangle"))) (IRValueName "%a_t_53")] [ILabel example.lat:36:5 (IRLabelName ".L_entry"),ILoad example.lat:36:5 (IRValueName "%v_t_53") (PParam example.lat:36:5 (Ref example.lat:36:5 (Ref  (Cl  (IRTargetRefName "Rectangle")))) 0 (IRValueName "%a_t_53")),INewStr example.lat:37:21 (IRValueName "%v_t_55") "I'm really a rectangle",IAddRef example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) 1,IVCall example.lat:37:9 (Call example.lat:37:9 (Bool inside standard library) (QIdent example.lat:37:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:37:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_55")] []),IAddRef example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:36:5 (IRLabelName ".L_exit"),IRet example.lat:36:5 (VVal example.lat:36:5 (Int example.lat:36:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:41:5 (Int example.lat:41:5) (QIdent example.lat:41:10 (IRTargetRefName "Circle") (IRTargetRefName "tellAgain")) [Param example.lat:41:5 (Ref  (Cl  (IRTargetRefName "Circle"))) (IRValueName "%a_t_57")] [ILabel example.lat:41:5 (IRLabelName ".L_entry"),ILoad example.lat:41:5 (IRValueName "%v_t_57") (PParam example.lat:41:5 (Ref example.lat:41:5 (Ref  (Cl  (IRTargetRefName "Circle")))) 0 (IRValueName "%a_t_57")),INewStr example.lat:42:21 (IRValueName "%v_t_59") "I'm really a circle",IAddRef example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) 1,IVCall example.lat:42:9 (Call example.lat:42:9 (Bool inside standard library) (QIdent example.lat:42:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:42:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_59")] []),IAddRef example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:41:5 (IRLabelName ".L_exit"),IRet example.lat:41:5 (VVal example.lat:41:5 (Int example.lat:41:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:46:5 (Int example.lat:46:5) (QIdent example.lat:46:10 (IRTargetRefName "Square") (IRTargetRefName "tellAgain")) [Param example.lat:46:5 (Ref  (Cl  (IRTargetRefName "Square"))) (IRValueName "%a_t_61")] [ILabel example.lat:46:5 (IRLabelName ".L_entry"),ILoad example.lat:46:5 (IRValueName "%v_t_61") (PParam example.lat:46:5 (Ref example.lat:46:5 (Ref  (Cl  (IRTargetRefName "Square")))) 0 (IRValueName "%a_t_61")),INewStr example.lat:47:21 (IRValueName "%v_t_63") "I'm really a square",IAddRef example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) 1,IVCall example.lat:47:9 (Call example.lat:47:9 (Bool inside standard library) (QIdent example.lat:47:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:47:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_63")] []),IAddRef example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) (-1),IJmp inside standard library (IRLabelName ".L_exit"),ILabel example.lat:46:5 (IRLabelName ".L_exit"),IRet example.lat:46:5 (VVal example.lat:46:5 (Int example.lat:46:5) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:51:6 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] [ILabel example.lat:51:1 (IRLabelName ".L_entry"),ISet example.lat:52:5 (IRValueName "%v___temp_10") (VNull example.lat:52:12 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node")))),ISet example.lat:52:5 (IRValueName "%v_return") (VVal example.lat:52:5 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v___temp_10")),IJmp example.lat:52:5 (IRLabelName ".L_exit"),ILabel example.lat:51:1 (IRLabelName ".L_exit"),IRet example.lat:51:1 (VVal example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:55:1 (Int example.lat:55:1) (QIdent example.lat:55:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "main")) [] [ILabel example.lat:55:1 (IRLabelName ".L_entry"),ICall example.lat:56:16 (IRValueName "%v_t_66") (Call example.lat:56:16 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:56:16 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] []),ISet example.lat:56:10 (IRValueName "%v_t_67") (VVal example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")),IAddRef example.lat:56:10 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_67")) 1,IAddRef example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")) (-1),IVCall example.lat:57:5 (Call example.lat:57:5 (Bool inside standard library) (QIdent example.lat:57:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "print")) [VVal example.lat:57:5 (Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))) (IRValueName "%v_t_67")] []),IAddRef example.lat:57:5 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:57:5 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_67")) (-1),ISet example.lat:58:5 (IRValueName "%v___temp_11") (VInt example.lat:58:5 0),ISet example.lat:58:5 (IRValueName "%v_return") (VVal example.lat:58:5 (Int example.lat:58:12) (IRValueName "%v___temp_11")),IJmp example.lat:58:5 (IRLabelName ".L_exit"),ILabel example.lat:55:1 (IRLabelName ".L_exit"),IRet example.lat:55:1 (VVal example.lat:55:1 (Int example.lat:55:1) (IRValueName "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_16",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(14,Int ())),("%a_t_17",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_16",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(13,Int ())),("%a_t_17",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(14,Int ())),("%a_t_18",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(3,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%v_return",(13,Int ())),("%a_t_18",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_20",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_20",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_21",(4,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_21",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_21",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_21",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_21",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_21",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_22",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_22",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_23",(4,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_t_23",(3,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_23",(2,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_t_23",(1,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_23",(0,Ref () (Cl () (IRTargetRefName "Node"))))], out = [], use = [("%v_t_23",Ref () (Cl () (IRTargetRefName "Node")))], kill = []
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_24",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(27,Int ())),("%a_t_25",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_24",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(26,Int ())),("%a_t_25",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_31",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_31",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v___temp_5",(0,Bool ()))], out = [], use = [("%v___temp_5",Bool ())], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return~2",(0,Bool ()))], out = [], use = [("%v_return~2",Bool ())], kill = []
Liveness at start of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at end of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at start of _IIF32: in = [], out = [], use = [], kill = []
Liveness at end of _IIF32: in = [], out = [], use = [], kill = []
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_39",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_39",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(4,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_41",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_41",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_41",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_41",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_41",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_42",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(18,Int ()))], out = [("%a_t_42",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(17,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_16",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(14,Int ())),("%a_t_17",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_16",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(13,Int ())),("%a_t_17",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(14,Int ())),("%a_t_18",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(3,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%v_return",(13,Int ())),("%a_t_18",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_20",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_20",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_21",(4,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_21",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_21",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_21",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_21",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_21",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_22",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_22",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_23",(4,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_t_23",(3,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_23",(2,Ref () (Cl () (IRTargetRefName "Node"))))], out = [("%v_t_23",(1,Ref () (Cl () (IRTargetRefName "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_23",(0,Ref () (Cl () (IRTargetRefName "Node"))))], out = [], use = [("%v_t_23",Ref () (Cl () (IRTargetRefName "Node")))], kill = []
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_24",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(27,Int ())),("%a_t_25",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_24",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(26,Int ())),("%a_t_25",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_31",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_31",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v___temp_5",(0,Bool ()))], out = [], use = [("%v___temp_5",Bool ())], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return~2",(0,Bool ()))], out = [], use = [("%v_return~2",Bool ())], kill = []
Liveness at start of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at end of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at start of _IIF32: in = [], out = [], use = [], kill = []
Liveness at end of _IIF32: in = [], out = [], use = [], kill = []
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_39",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_39",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(4,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_41",(3,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_41",(2,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [("%v_t_41",(1,Ref () (Cl () (IRTargetRefName "Shape"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_41",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_41",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_42",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(18,Int ()))], out = [("%a_t_42",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(17,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%v_return",(10,Int ()))], out = [("%v_return",(9,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(4,Int ()))], out = [("%v_return",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(2,Int ()))], out = [("%v_return",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [%a_t_16 (reg preference: CallerSaved) (RDI): ["%a_t_17","%v_return"]
%a_t_17 (reg preference: CallerSaved) (RSI): ["%a_t_16","%v_return","%v_t_16"]
%v_c0 (reg preference: CallerSaved) (RDI): ["%v_return","%v_t_16","%v_t_17"]
%v_return (reg preference: CallerSaved) (RCX): ["%a_t_16","%a_t_17","%v_c0","%v_t_16","%v_t_17"]
%v_t_16 (reg preference: CallerSaved) (RDX): ["%a_t_17","%v_c0","%v_return","%v_t_17"]
%v_t_17 (reg preference: CallerSaved) (RAX): ["%v_c0","%v_return","%v_t_16"]
,%a_t_18 (reg preference: CallerSaved) (RDI): ["%a_t_19","%v_return"]
%a_t_19 (reg preference: CallerSaved) (RSI): ["%a_t_18","%v_return","%v_t_18"]
%v_c1 (reg preference: CallerSaved) (RDI): ["%v_return","%v_t_18","%v_t_19"]
%v_return (reg preference: CallerSaved) (RCX): ["%a_t_18","%a_t_19","%v_c1","%v_t_18","%v_t_19"]
%v_t_18 (reg preference: CallerSaved) (RDX): ["%a_t_19","%v_c1","%v_return","%v_t_19"]
%v_t_19 (reg preference: CallerSaved) (RAX): ["%v_c1","%v_return","%v_t_18"]
,%a_t_20 (reg preference: CallerSaved) (RDI): []
%v_t_20 (reg preference: CallerSaved) (RCX): ["%v_t_21"]
%v_t_21 (reg preference: CallerSaved) (RAX): ["%v_t_20"]
,%a_t_22 (reg preference: CallerSaved) (RDI): []
%v_t_22 (reg preference: CallerSaved) (RCX): ["%v_t_23"]
%v_t_23 (reg preference: CallerSaved) (RAX): ["%v_t_22"]
,%a_t_24 (reg preference: CallerSaved) (RDI): ["%a_t_25","%v_return"]
%a_t_25 (reg preference: CallerSaved) (RSI): ["%a_t_24","%v_return","%v_t_24"]
%v_c4 (reg preference: CallerSaved) (RAX): ["%v_return","%v_t_24","%v_t_26"]
%v_return (reg preference: CalleeSaved) (R13): ["%a_t_24","%a_t_25","%v_c4","%v_t_24","%v_t_25","%v_t_26","%v_t_29"]
%v_t_24 (reg preference: CalleeSaved) (RBX): ["%a_t_25","%v_c4","%v_return","%v_t_25","%v_t_26","%v_t_29"]
%v_t_25 (reg preference: CalleeSaved) (R14): ["%v_return","%v_t_24","%v_t_26","~arg_0_RDI"]
%v_t_26 (reg preference: CalleeSaved) (R12): ["%v_c4","%v_return","%v_t_24","%v_t_25","%v_t_29","~arg_1_RSI","~arg_3_RSI"]
%v_t_29 (reg preference: CalleeSaved) (R14): ["%v_return","%v_t_24","%v_t_26","~arg_2_RDI"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): ["%v_t_25"]
~arg_1_RSI (reg preference: CallerSaved) (RSI): ["%v_t_26"]
~arg_2_RDI (reg preference: CallerSaved) (RDI): ["%v_t_29"]
~arg_3_RSI (reg preference: CallerSaved) (RSI): ["%v_t_26"]
,%a_t_31 (reg preference: CallerSaved) (RDI): []
%v___temp_5 (reg preference: CallerSaved) (RAX): []
%v_return~2 (reg preference: CallerSaved) (RAX): []
%v_t_31 (reg preference: CallerSaved) (RCX): ["%v_t_35"]
%v_t_35 (reg preference: CallerSaved) (RAX): ["%v_t_31"]
,%a_t_39 (reg preference: CallerSaved) (RDI): []
%v_t_39 (reg preference: CallerSaved) (RAX): ["%v_t_40"]
%v_t_40 (reg preference: CalleeSaved) (RBX): ["%v_t_39","%v_t_41"]
%v_t_41 (reg preference: CallerSaved) (RAX): ["%v_t_40"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_42 (reg preference: CallerSaved) (RDI): ["%v_return"]
%v_c6 (reg preference: CallerSaved) (RCX): ["%v_return","%v_t_42","%v_t_44"]
%v_return (reg preference: CalleeSaved) (RBX): ["%a_t_42","%v_c6","%v_t_42","%v_t_43","%v_t_44"]
%v_t_42 (reg preference: CalleeSaved) (R12): ["%v_c6","%v_return","%v_t_43","%v_t_44"]
%v_t_43 (reg preference: CalleeSaved) (R13): ["%v_return","%v_t_42","%v_t_44"]
%v_t_44 (reg preference: CallerSaved) (RAX): ["%v_c6","%v_return","%v_t_42","%v_t_43"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_return (reg preference: CalleeSaved) (R12): ["%v_t_47"]
%v_t_47 (reg preference: CalleeSaved) (RBX): ["%v_return"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_return (reg preference: CalleeSaved) (R12): ["%v_t_51"]
%v_t_51 (reg preference: CalleeSaved) (RBX): ["%v_return"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_return (reg preference: CalleeSaved) (R12): ["%v_t_55"]
%v_t_55 (reg preference: CalleeSaved) (RBX): ["%v_return"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_return (reg preference: CalleeSaved) (R12): ["%v_t_59"]
%v_t_59 (reg preference: CalleeSaved) (RBX): ["%v_return"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_return (reg preference: CalleeSaved) (R12): ["%v_t_63"]
%v_t_63 (reg preference: CalleeSaved) (RBX): ["%v_return"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,,%v_t_66 (reg preference: CalleeSaved) (RBX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  %v_c0 := Shape & %v_t_17;
  addref Shape & Shape & %v_c0 1;
  %v___temp_0 := Shape & %v_c0;
  store Shape & %v___temp_0 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  %v_c1 := Node & %v_t_19;
  addref Node & Node & %v_c1 1;
  %v___temp_1 := Node & %v_c1;
  store Node & %v___temp_1 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  %v_c2 := Shape & %v_t_21;
  addref Shape & Shape & %v_c2 1;
  addref Shape & Shape & %v_t_21 -1;
  %v___temp_2 := Shape & %v_c2;
  %v_return := Shape & %v___temp_2;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Node.getNext:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  %v_c3 := Node & %v_t_23;
  addref Node & Node & %v_c3 1;
  addref Node & Node & %v_t_23 -1;
  %v___temp_3 := Node & %v_c3;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Stack.push:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  %v_t_27 := Node & %v_t_26;
  addref Node & Node & %v_t_27 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_27, Shape & %v_t_25);
  addref Node & Node & %v_t_27 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_27, Node & %v_t_29);
  addref Node & Node & %v_t_27 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  %v_c4 := Node & %v_t_27;
  addref Node & Node & %v_c4 1;
  %v___temp_4 := Node & %v_c4;
  store Node & %v___temp_4 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_27 -1;
  addref Stack & Stack & %v_t_24 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit",".L_exit__from__IELSE33",".L_exit__from__IIF32","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_exit__from__IELSE33",IRLabelName ".L_exit__from__IIF32"]
".L_exit__from__IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName "_IELSE33"]
".L_exit__from__IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit__from__IELSE33"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit__from__IIF32"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  %v___temp_7 := 0;
  %v_return := boolean %v___temp_7;
  jump .L_exit;
.L_exit:
  return boolean %v_return;
  _IIF32:
  %v___temp_6 := 1;
  %v_return := boolean %v___temp_6;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  %v_c5 := Shape & %v_t_41;
  addref Shape & Shape & %v_c5 1;
  addref Shape & Shape & %v_t_41 -1;
  %v___temp_8 := Shape & %v_c5;
  %v_return := Shape & %v___temp_8;
  jump .L_exit;
.L_exit:
  return Shape & %v_return;
]

CFG for Stack.pop:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  %v_c6 := Node & %v_t_44;
  addref Node & Node & %v_c6 1;
  %v___temp_9 := Node & %v_c6;
  store Node & %v___temp_9 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  %v_t_45 := load Shape & & param 0 %a_t_45;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  %v_t_49 := load Shape & & param 0 %a_t_49;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  %v_t_53 := load Rectangle & & param 0 %a_t_53;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  %v_t_57 := load Circle & & param 0 %a_t_57;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  %v_t_61 := load Square & & param 0 %a_t_61;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  %v___temp_10 := Node & null;
  %v_return := Node & %v___temp_10;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [IRLabelName ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  %v_t_67 := Node & %v_t_66;
  addref Node & Node & %v_t_67 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Object & %v_t_67);
  addref Node & Node & %v_t_67 -1;
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  endphi;
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  addref Shape & Shape & %v_t_17 1;
  store Shape & %v_t_17 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  endphi;
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  endphi;
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  addref Node & Node & %v_t_19 1;
  store Node & %v_t_19 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  endphi;
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  endphi;
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  addref Shape & Shape & %v_t_21 1;
  addref Shape & Shape & %v_t_21 -1;
  endphi;
  return Shape & %v_t_21;
]

CFG for Node.getNext:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  endphi;
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_23 -1;
  endphi;
  return Node & %v_t_23;
]

CFG for Stack.push:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  endphi;
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  addref Node & Node & %v_t_26 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_26, Shape & %v_t_25);
  addref Node & Node & %v_t_26 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_26, Node & %v_t_29);
  addref Node & Node & %v_t_26 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  addref Node & Node & %v_t_26 1;
  store Node & %v_t_26 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_26 -1;
  addref Stack & Stack & %v_t_24 -1;
  endphi;
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  endphi;
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  endphi;
  %v_return~2 := 0;
  jump .L_exit;
.L_exit:
  endphi;
  return boolean %v_return~2;
  _IIF32:
  endphi;
  %v_return~2 := 1;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  endphi;
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  addref Shape & Shape & %v_t_41 1;
  addref Shape & Shape & %v_t_41 -1;
  endphi;
  return Shape & %v_t_41;
]

CFG for Stack.pop:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  endphi;
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  addref Node & Node & %v_t_44 1;
  store Node & %v_t_44 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  endphi;
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  endphi;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  endphi;
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  endphi;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  endphi;
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  endphi;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  endphi;
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  endphi;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  endphi;
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  endphi;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  endphi;
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  endphi;
  endphi;
  return Node & null;
]

CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  addref Node & Node & %v_t_66 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Node & %v_t_66);
  addref Node & Node & %v_t_66 -1;
  endphi;
  return 0;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for Node.setElem:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_16",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(11,Int ())),("%a_t_17",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_16",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%v_return",(10,Int ())),("%a_t_17",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setElem (Node & %a_t_16, Shape & %a_t_17): [
.L_entry:
  endphi;
  %v_t_16 := load Node & & param 0 %a_t_16;
  %v_t_17 := load Shape & & param 1 %a_t_17;
  %v_c0 := load Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_c0 -1;
  addref Shape & Shape & %v_t_17 1;
  store Shape & %v_t_17 into Shape & & fldptr Node %v_t_16 Node.elem;
  addref Shape & Shape & %v_t_17 -1;
  addref Node & Node & %v_t_16 -1;
  endphi;
  return int %v_return;
]

CFG for Node.setNext:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(11,Int ())),("%a_t_18",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(3,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%v_return",(10,Int ())),("%a_t_18",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node"))))),("%a_t_19",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.setNext (Node & %a_t_18, Node & %a_t_19): [
.L_entry:
  endphi;
  %v_t_18 := load Node & & param 0 %a_t_18;
  %v_t_19 := load Node & & param 1 %a_t_19;
  %v_c1 := load Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_c1 -1;
  addref Node & Node & %v_t_19 1;
  store Node & %v_t_19 into Node & & fldptr Node %v_t_18 Node.next;
  addref Node & Node & %v_t_19 -1;
  addref Node & Node & %v_t_18 -1;
  endphi;
  return int %v_return;
]

CFG for Node.getElem:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_20",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_20",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_21",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_21",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Node.getElem (Node & %a_t_20): [
.L_entry:
  endphi;
  %v_t_20 := load Node & & param 0 %a_t_20;
  %v_t_21 := load Shape & & fldptr Node %v_t_20 Node.elem;
  addref Shape & Shape & %v_t_21 1;
  addref Node & Node & %v_t_20 -1;
  addref Shape & Shape & %v_t_21 1;
  addref Shape & Shape & %v_t_21 -1;
  endphi;
  return Shape & %v_t_21;
]

CFG for Node.getNext:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_22",(2,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], out = [("%a_t_22",(1,Ref () (Ref () (Cl () (IRTargetRefName "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_23",(0,Ref () (Cl () (IRTargetRefName "Node"))))], out = [], use = [("%v_t_23",Ref () (Cl () (IRTargetRefName "Node")))], kill = []
Code: 
.method Node & Node.getNext (Node & %a_t_22): [
.L_entry:
  endphi;
  %v_t_22 := load Node & & param 0 %a_t_22;
  %v_t_23 := load Node & & fldptr Node %v_t_22 Node.next;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_22 -1;
  addref Node & Node & %v_t_23 1;
  addref Node & Node & %v_t_23 -1;
  endphi;
  return Node & %v_t_23;
]

CFG for Stack.push:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_24",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(24,Int ())),("%a_t_25",(3,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], out = [("%a_t_24",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(23,Int ())),("%a_t_25",(2,Ref () (Ref () (Cl () (IRTargetRefName "Shape")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.push (Stack & %a_t_24, Shape & %a_t_25): [
.L_entry:
  endphi;
  %v_t_24 := load Stack & & param 0 %a_t_24;
  %v_t_25 := load Shape & & param 1 %a_t_25;
  %v_t_26 := new Node;
  addref Node & Node & %v_t_26 1;
  addref Node & Node & %v_t_26 1;
  addref Node & Node & %v_t_26 -1;
  callvirt int Node.setElem (Node & %v_t_26, Shape & %v_t_25);
  addref Node & Node & %v_t_26 -1;
  addref Shape & Shape & %v_t_25 -1;
  %v_t_29 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_29 1;
  addref Stack & Stack & %v_t_24 -1;
  callvirt int Node.setNext (Node & %v_t_26, Node & %v_t_29);
  addref Node & Node & %v_t_26 -1;
  addref Node & Node & %v_t_29 -1;
  %v_c4 := load Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_c4 -1;
  addref Node & Node & %v_t_26 1;
  store Node & %v_t_26 into Node & & fldptr Stack %v_t_24 Stack.head;
  addref Node & Node & %v_t_26 -1;
  addref Stack & Stack & %v_t_24 -1;
  endphi;
  return int %v_return;
]

CFG for Stack.isEmpty:
[".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_31",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_31",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v___temp_5",(0,Bool ()))], out = [], use = [("%v___temp_5",Bool ())], kill = []
Liveness at start of .L_exit: in = [("%v_return~2",(2,Bool ()))], out = [("%v_return~2",(1,Bool ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return~2",(0,Bool ()))], out = [], use = [("%v_return~2",Bool ())], kill = []
Liveness at start of _IELSE33: in = [], out = [], use = [], kill = []
Liveness at end of _IELSE33: in = [("%v_return~2",(4,Bool ()))], out = [("%v_return~2",(3,Bool ()))], use = [], kill = []
Liveness at start of _IIF32: in = [], out = [], use = [], kill = []
Liveness at end of _IIF32: in = [("%v_return~2",(4,Bool ()))], out = [("%v_return~2",(3,Bool ()))], use = [], kill = []
Code: 
.method boolean Stack.isEmpty (Stack & %a_t_31): [
.L_entry:
  endphi;
  %v_t_31 := load Stack & & param 0 %a_t_31;
  %v_t_35 := load Node & & fldptr Stack %v_t_31 Stack.head;
  addref Node & Node & %v_t_35 1;
  addref Stack & Stack & %v_t_31 -1;
  addref Node & Node & %v_t_35 -1;
  %v___temp_5 := Node & %v_t_35 == ? & null;
  jump if boolean %v___temp_5 then _IIF32 else _IELSE33;
  _IELSE33:
  endphi;
  %v_return~2 := 0;
  jump .L_exit;
.L_exit:
  endphi;
  return boolean %v_return~2;
  _IIF32:
  endphi;
  %v_return~2 := 1;
  jump .L_exit;
]

CFG for Stack.top:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_39",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], out = [("%a_t_39",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(0,Ref () (Cl () (IRTargetRefName "Shape"))))], out = [], use = [("%v_t_41",Ref () (Cl () (IRTargetRefName "Shape")))], kill = []
Code: 
.method Shape & Stack.top (Stack & %a_t_39): [
.L_entry:
  endphi;
  %v_t_39 := load Stack & & param 0 %a_t_39;
  %v_t_40 := load Node & & fldptr Stack %v_t_39 Stack.head;
  addref Node & Node & %v_t_40 1;
  addref Stack & Stack & %v_t_39 -1;
  %v_t_41 := callvirt Shape & Node.getElem (Node & %v_t_40);
  addref Node & Node & %v_t_40 -1;
  addref Shape & Shape & %v_t_41 1;
  addref Shape & Shape & %v_t_41 -1;
  endphi;
  return Shape & %v_t_41;
]

CFG for Stack.pop:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_42",(2,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(15,Int ()))], out = [("%a_t_42",(1,Ref () (Ref () (Cl () (IRTargetRefName "Stack"))))),("%v_return",(14,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Stack.pop (Stack & %a_t_42): [
.L_entry:
  endphi;
  %v_t_42 := load Stack & & param 0 %a_t_42;
  %v_t_43 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_t_43 1;
  addref Stack & Stack & %v_t_42 -1;
  %v_t_44 := callvirt Node & Node.getNext (Node & %v_t_43);
  addref Node & Node & %v_t_43 -1;
  %v_c6 := load Node & & fldptr Stack %v_t_42 Stack.head;
  addref Node & Node & %v_c6 -1;
  addref Node & Node & %v_t_44 1;
  store Node & %v_t_44 into Node & & fldptr Stack %v_t_42 Stack.head;
  addref Stack & Stack & %v_t_42 -1;
  addref Node & Node & %v_t_44 -1;
  endphi;
  return int %v_return;
]

CFG for Shape.tell:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(7,Int ()))], out = [("%v_return",(6,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tell (Shape & %a_t_45): [
.L_entry:
  endphi;
  %v_t_47 := newstr "I'm a shape";
  addref String & String & %v_t_47 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_47);
  addref String & String & %v_t_47 -1;
  endphi;
  return int %v_return;
]

CFG for Shape.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(7,Int ()))], out = [("%v_return",(6,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Shape.tellAgain (Shape & %a_t_49): [
.L_entry:
  endphi;
  %v_t_51 := newstr "I'm just a shape";
  addref String & String & %v_t_51 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_51);
  addref String & String & %v_t_51 -1;
  endphi;
  return int %v_return;
]

CFG for Rectangle.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(7,Int ()))], out = [("%v_return",(6,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Rectangle.tellAgain (Rectangle & %a_t_53): [
.L_entry:
  endphi;
  %v_t_55 := newstr "I'm really a rectangle";
  addref String & String & %v_t_55 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_55);
  addref String & String & %v_t_55 -1;
  endphi;
  return int %v_return;
]

CFG for Circle.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(7,Int ()))], out = [("%v_return",(6,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Circle.tellAgain (Circle & %a_t_57): [
.L_entry:
  endphi;
  %v_t_59 := newstr "I'm really a circle";
  addref String & String & %v_t_59 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_59);
  addref String & String & %v_t_59 -1;
  endphi;
  return int %v_return;
]

CFG for Square.tellAgain:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%v_return",(7,Int ()))], out = [("%v_return",(6,Int ()))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Square.tellAgain (Square & %a_t_61): [
.L_entry:
  endphi;
  %v_t_63 := newstr "I'm really a square";
  addref String & String & %v_t_63 1;
  call boolean ~cl_TopLevel.printString (String & %v_t_63);
  addref String & String & %v_t_63 -1;
  endphi;
  return int %v_return;
]

CFG for ~cl_TopLevel.genNull:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method Node & ~cl_TopLevel.genNull (): [
.L_entry:
  endphi;
  endphi;
  return Node & null;
]

CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_66 := call Node & ~cl_TopLevel.genNull ();
  addref Node & Node & %v_t_66 1;
  addref Node & Node & %v_t_66 -1;
  call boolean ~cl_TopLevel.print (Node & %v_t_66);
  addref Node & Node & %v_t_66 -1;
  endphi;
  return 0;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] COMPL_ DONEexample.lat

CompiledProg example.lat:1:1 (Meta example.lat:1:1 [ClDef inside standard library (IRTargetRefName "Array") [IRTargetRefName "Array",IRTargetRefName "Object"] [FldDef inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))) (IRTargetRefName "elements"),FldDef inside standard library (Int inside standard library) (IRTargetRefName "length"),FldDef inside standard library (Int inside standard library) (IRTargetRefName "elementSize")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Array") (IRTargetRefName "toString"))],ClDef example.lat:40:7 (IRTargetRefName "Circle") [IRTargetRefName "Circle",IRTargetRefName "Shape",IRTargetRefName "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:28:10 "Shape" (FType example.lat:28:10 (Int example.lat:28:5) []) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")),MthdDef example.lat:41:10 "Shape" (FType example.lat:41:10 (Int example.lat:41:5) []) (QIdent example.lat:41:10 (IRTargetRefName "Circle") (IRTargetRefName "tellAgain"))],ClDef example.lat:1:7 (IRTargetRefName "Node") [IRTargetRefName "Node",IRTargetRefName "Object"] [FldDef example.lat:2:11 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRTargetRefName "elem"),FldDef example.lat:3:10 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRTargetRefName "next")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:4:10 "Node" (FType example.lat:4:10 (Int example.lat:4:5) [Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))]) (QIdent example.lat:4:10 (IRTargetRefName "Node") (IRTargetRefName "setElem")),MthdDef example.lat:5:10 "Node" (FType example.lat:5:10 (Int example.lat:5:5) [Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))]) (QIdent example.lat:5:10 (IRTargetRefName "Node") (IRTargetRefName "setNext")),MthdDef example.lat:6:11 "Node" (FType example.lat:6:11 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) []) (QIdent example.lat:6:11 (IRTargetRefName "Node") (IRTargetRefName "getElem")),MthdDef example.lat:7:10 "Node" (FType example.lat:7:10 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) []) (QIdent example.lat:7:10 (IRTargetRefName "Node") (IRTargetRefName "getNext"))],ClDef inside standard library (IRTargetRefName "Object") [IRTargetRefName "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString"))],ClDef example.lat:35:7 (IRTargetRefName "Rectangle") [IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:28:10 "Shape" (FType example.lat:28:10 (Int example.lat:28:5) []) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")),MthdDef example.lat:36:10 "Shape" (FType example.lat:36:10 (Int example.lat:36:5) []) (QIdent example.lat:36:10 (IRTargetRefName "Rectangle") (IRTargetRefName "tellAgain"))],ClDef example.lat:27:7 (IRTargetRefName "Shape") [IRTargetRefName "Shape",IRTargetRefName "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:28:10 "Shape" (FType example.lat:28:10 (Int example.lat:28:5) []) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")),MthdDef example.lat:31:10 "Shape" (FType example.lat:31:10 (Int example.lat:31:5) []) (QIdent example.lat:31:10 (IRTargetRefName "Shape") (IRTargetRefName "tellAgain"))],ClDef example.lat:45:7 (IRTargetRefName "Square") [IRTargetRefName "Square",IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:28:10 "Shape" (FType example.lat:28:10 (Int example.lat:28:5) []) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")),MthdDef example.lat:46:10 "Shape" (FType example.lat:46:10 (Int example.lat:46:5) []) (QIdent example.lat:46:10 (IRTargetRefName "Square") (IRTargetRefName "tellAgain"))],ClDef example.lat:9:7 (IRTargetRefName "Stack") [IRTargetRefName "Stack",IRTargetRefName "Object"] [FldDef example.lat:10:10 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRTargetRefName "head")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:11:10 "Stack" (FType example.lat:11:10 (Int example.lat:11:5) [Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))]) (QIdent example.lat:11:10 (IRTargetRefName "Stack") (IRTargetRefName "push")),MthdDef example.lat:17:13 "Stack" (FType example.lat:17:13 (Bool example.lat:17:5) []) (QIdent example.lat:17:13 (IRTargetRefName "Stack") (IRTargetRefName "isEmpty")),MthdDef example.lat:20:11 "Stack" (FType example.lat:20:11 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) []) (QIdent example.lat:20:11 (IRTargetRefName "Stack") (IRTargetRefName "top")),MthdDef example.lat:23:10 "Stack" (FType example.lat:23:10 (Int example.lat:23:5) []) (QIdent example.lat:23:10 (IRTargetRefName "Stack") (IRTargetRefName "pop"))],ClDef inside standard library (IRTargetRefName "String") [IRTargetRefName "String",IRTargetRefName "Object"] [] [MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) [Int inside standard library]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "charAt")),MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "Object"))]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "equals")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) [Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "concat")),MthdDef inside standard library "String" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "startsWith")),MthdDef inside standard library "String" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "endsWith")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Arr inside standard library (Int inside standard library))) []) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "getBytes")),MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) [Ref inside standard library (Cl inside standard library (IRTargetRefName "String")),Int inside standard library]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "indexOf")),MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "length")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) [Int inside standard library,Int inside standard library]) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "substring")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) []) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "toString")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (IRTargetRefName "String") (IRTargetRefName "getHashCode"))],ClDef example.lat:1:1 (IRTargetRefName "~cl_TopLevel") [] [] [MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Array"))) []) (QIdent example.lat:1:1 (IRTargetRefName "Array") (IRTargetRefName "toString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))) []) (QIdent example.lat:1:1 (IRTargetRefName "Object") (IRTargetRefName "toString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) []) (QIdent example.lat:1:1 (IRTargetRefName "Object") (IRTargetRefName "getHashCode")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))]) (QIdent example.lat:1:1 (IRTargetRefName "Object") (IRTargetRefName "equals")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "equals")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) []) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "getHashCode")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) []) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "toString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) []) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "substring")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) []) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "length")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String")),Int example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "indexOf")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) []) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "getBytes")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "endsWith")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "startsWith")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String")),Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "concat")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) [Int example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "String") (IRTargetRefName "charAt")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Int example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printInt")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Bool example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printByte")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Bool example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printBoolean")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Array"))]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printBinArray")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) [Bool example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "byteToString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) [Bool example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "boolToString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) [Int example.lat:1:1]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "intToString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "print")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Bool example.lat:1:1) []) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "error")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Int example.lat:1:1) []) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "readInt")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "String"))) []) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "readString")),MthdDef example.lat:1:1 "" (FType example.lat:1:1 (Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))) [Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object")),Ref example.lat:1:1 (Cl example.lat:1:1 (IRTargetRefName "Object"))]) (QIdent example.lat:1:1 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "__cast")),MthdDef example.lat:4:5 "" (FType example.lat:4:5 (Int example.lat:4:5) [Ref  (Cl  (IRTargetRefName "Node")),Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))]) (QIdent example.lat:4:10 (IRTargetRefName "Node") (IRTargetRefName "setElem")),MthdDef example.lat:5:5 "" (FType example.lat:5:5 (Int example.lat:5:5) [Ref  (Cl  (IRTargetRefName "Node")),Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))]) (QIdent example.lat:5:10 (IRTargetRefName "Node") (IRTargetRefName "setNext")),MthdDef example.lat:6:5 "" (FType example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) [Ref  (Cl  (IRTargetRefName "Node"))]) (QIdent example.lat:6:11 (IRTargetRefName "Node") (IRTargetRefName "getElem")),MthdDef example.lat:7:5 "" (FType example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) [Ref  (Cl  (IRTargetRefName "Node"))]) (QIdent example.lat:7:10 (IRTargetRefName "Node") (IRTargetRefName "getNext")),MthdDef example.lat:11:5 "" (FType example.lat:11:5 (Int example.lat:11:5) [Ref  (Cl  (IRTargetRefName "Stack")),Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))]) (QIdent example.lat:11:10 (IRTargetRefName "Stack") (IRTargetRefName "push")),MthdDef example.lat:17:5 "" (FType example.lat:17:5 (Bool example.lat:17:5) [Ref  (Cl  (IRTargetRefName "Stack"))]) (QIdent example.lat:17:13 (IRTargetRefName "Stack") (IRTargetRefName "isEmpty")),MthdDef example.lat:20:5 "" (FType example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) [Ref  (Cl  (IRTargetRefName "Stack"))]) (QIdent example.lat:20:11 (IRTargetRefName "Stack") (IRTargetRefName "top")),MthdDef example.lat:23:5 "" (FType example.lat:23:5 (Int example.lat:23:5) [Ref  (Cl  (IRTargetRefName "Stack"))]) (QIdent example.lat:23:10 (IRTargetRefName "Stack") (IRTargetRefName "pop")),MthdDef example.lat:28:5 "" (FType example.lat:28:5 (Int example.lat:28:5) [Ref  (Cl  (IRTargetRefName "Shape"))]) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")),MthdDef example.lat:31:5 "" (FType example.lat:31:5 (Int example.lat:31:5) [Ref  (Cl  (IRTargetRefName "Shape"))]) (QIdent example.lat:31:10 (IRTargetRefName "Shape") (IRTargetRefName "tellAgain")),MthdDef example.lat:36:5 "" (FType example.lat:36:5 (Int example.lat:36:5) [Ref  (Cl  (IRTargetRefName "Rectangle"))]) (QIdent example.lat:36:10 (IRTargetRefName "Rectangle") (IRTargetRefName "tellAgain")),MthdDef example.lat:41:5 "" (FType example.lat:41:5 (Int example.lat:41:5) [Ref  (Cl  (IRTargetRefName "Circle"))]) (QIdent example.lat:41:10 (IRTargetRefName "Circle") (IRTargetRefName "tellAgain")),MthdDef example.lat:46:5 "" (FType example.lat:46:5 (Int example.lat:46:5) [Ref  (Cl  (IRTargetRefName "Square"))]) (QIdent example.lat:46:10 (IRTargetRefName "Square") (IRTargetRefName "tellAgain")),MthdDef example.lat:51:1 "" (FType example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) []) (QIdent example.lat:51:6 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")),MthdDef example.lat:55:1 "" (FType example.lat:55:1 (Int example.lat:55:1) []) (QIdent example.lat:55:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "main"))]]) [([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:4:5 (Int example.lat:4:5) (QIdent example.lat:4:10 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [Param example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_16"),Param example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%a_t_17")] [ILabel example.lat:4:5 (IRLabelName ".L_entry"),IEndPhi example.lat:4:5,ILoad example.lat:4:5 (IRValueName "%v_t_16") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_16")),ILoad example.lat:4:5 (IRValueName "%v_t_17") (PParam example.lat:4:5 (Ref example.lat:4:5 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_17")),ILoad example.lat:4:29 (IRValueName "%v_c0") (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_c0")) (-1),IAddRef example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")) 1,IStore example.lat:4:29 (VVal example.lat:4:29 (Ref example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")) (PFld example.lat:4:29 (Ref example.lat:4:29 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:4:29 (Cl example.lat:4:29 (IRTargetRefName "Node")) (IRValueName "%v_t_16")) (QIdent example.lat:4:29 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (VVal example.lat:4:29 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_17")) (-1),IAddRef example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:4:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_16")) (-1),IEndPhi example.lat:4:5,IRet example.lat:4:5 (VVal example.lat:4:5 (Int example.lat:4:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_16",RDI),(IRValueName "%a_t_17",RSI),(IRValueName "%v_c0",RDI),(IRValueName "%v_return",RCX),(IRValueName "%v_t_16",RDX),(IRValueName "%v_t_17",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:5:5 (Int example.lat:5:5) (QIdent example.lat:5:10 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [Param example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_18"),Param example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%a_t_19")] [ILabel example.lat:5:5 (IRLabelName ".L_entry"),IEndPhi example.lat:5:5,ILoad example.lat:5:5 (IRValueName "%v_t_18") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_18")),ILoad example.lat:5:5 (IRValueName "%v_t_19") (PParam example.lat:5:5 (Ref example.lat:5:5 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node")))) 1 (IRValueName "%a_t_19")),ILoad example.lat:5:28 (IRValueName "%v_c1") (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_c1")) (-1),IAddRef example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")) 1,IStore example.lat:5:28 (VVal example.lat:5:28 (Ref example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")) (PFld example.lat:5:28 (Ref example.lat:5:28 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:5:28 (Cl example.lat:5:28 (IRTargetRefName "Node")) (IRValueName "%v_t_18")) (QIdent example.lat:5:28 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_19")) (-1),IAddRef example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:5:28 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_18")) (-1),IEndPhi example.lat:5:5,IRet example.lat:5:5 (VVal example.lat:5:5 (Int example.lat:5:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_18",RDI),(IRValueName "%a_t_19",RSI),(IRValueName "%v_c1",RDI),(IRValueName "%v_return",RCX),(IRValueName "%v_t_18",RDX),(IRValueName "%v_t_19",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:6:11 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [Param example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_20")] [ILabel example.lat:6:5 (IRLabelName ".L_entry"),IEndPhi example.lat:6:5,ILoad example.lat:6:5 (IRValueName "%v_t_20") (PParam example.lat:6:5 (Ref example.lat:6:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_20")),ILoad example.lat:6:30 (IRValueName "%v_t_21") (PFld example.lat:6:30 (Ref example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape")))) (VVal example.lat:6:30 (Cl example.lat:6:30 (IRTargetRefName "Node")) (IRValueName "%v_t_20")) (QIdent example.lat:6:30 (IRTargetRefName "Node") (IRTargetRefName "elem"))),IAddRef example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:30 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) 1,IAddRef example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:6:30 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_20")) (-1),IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:6:23 (Cl example.lat:6:23 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) 1,IAddRef example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (VVal example.lat:6:23 (Ref example.lat:2:5 (Cl example.lat:2:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21")) (-1),IEndPhi example.lat:6:5,IRet example.lat:6:5 (VVal example.lat:6:5 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_21"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_20",RDI),(IRValueName "%v_t_20",RCX),(IRValueName "%v_t_21",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:7:10 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [Param example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%a_t_22")] [ILabel example.lat:7:5 (IRLabelName ".L_entry"),IEndPhi example.lat:7:5,ILoad example.lat:7:5 (IRValueName "%v_t_22") (PParam example.lat:7:5 (Ref example.lat:7:5 (Ref  (Cl  (IRTargetRefName "Node")))) 0 (IRValueName "%a_t_22")),ILoad example.lat:7:29 (IRValueName "%v_t_23") (PFld example.lat:7:29 (Ref example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node")))) (VVal example.lat:7:29 (Cl example.lat:7:29 (IRTargetRefName "Node")) (IRValueName "%v_t_22")) (QIdent example.lat:7:29 (IRTargetRefName "Node") (IRTargetRefName "next"))),IAddRef example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) 1,IAddRef example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (VVal example.lat:7:29 (Ref  (Cl  (IRTargetRefName "Node"))) (IRValueName "%v_t_22")) (-1),IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:7:22 (Cl example.lat:7:22 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) 1,IAddRef example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (VVal example.lat:7:22 (Ref example.lat:3:5 (Cl example.lat:3:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23")) (-1),IEndPhi example.lat:7:5,IRet example.lat:7:5 (VVal example.lat:7:5 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_23"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_22",RDI),(IRValueName "%v_t_22",RCX),(IRValueName "%v_t_23",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:11:5 (Int example.lat:11:5) (QIdent example.lat:11:10 (IRTargetRefName "Stack") (IRTargetRefName "push")) [Param example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_24"),Param example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%a_t_25")] [ILabel example.lat:11:5 (IRLabelName ".L_entry"),IEndPhi example.lat:11:5,ILoad example.lat:11:5 (IRValueName "%v_t_24") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_24")),ILoad example.lat:11:5 (IRValueName "%v_t_25") (PParam example.lat:11:5 (Ref example.lat:11:5 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape")))) 1 (IRValueName "%a_t_25")),INew example.lat:12:24 (IRValueName "%v_t_26") (Cl example.lat:12:24 (IRTargetRefName "Node")),IAddRef example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:24 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) 1,IAddRef example.lat:12:14 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:14 (Cl example.lat:12:14 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) 1,IAddRef example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (VVal example.lat:12:14 (Ref example.lat:12:28 (Cl example.lat:12:28 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IVCall example.lat:13:9 (CallVirt example.lat:13:9 (Int example.lat:4:5) (QIdent example.lat:13:9 (IRTargetRefName "Node") (IRTargetRefName "setElem")) [VVal example.lat:13:9 (Ref example.lat:13:9 (Cl example.lat:13:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26"),VVal example.lat:13:9 (Ref example.lat:4:18 (Cl example.lat:4:18 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")]),IAddRef example.lat:13:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:13:9 (Ref example.lat:13:9 (Cl example.lat:13:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IAddRef example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (VVal example.lat:13:9 (Ref example.lat:11:15 (Cl example.lat:11:15 (IRTargetRefName "Shape"))) (IRValueName "%v_t_25")) (-1),ILoad example.lat:14:25 (IRValueName "%v_t_29") (PFld example.lat:14:25 (Ref example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:14:25 (Cl example.lat:14:25 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:14:25 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:25 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) 1,IAddRef example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:14:25 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IVCall example.lat:14:9 (CallVirt example.lat:14:9 (Int example.lat:5:5) (QIdent example.lat:14:9 (IRTargetRefName "Node") (IRTargetRefName "setNext")) [VVal example.lat:14:9 (Ref example.lat:14:9 (Cl example.lat:14:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26"),VVal example.lat:14:9 (Ref example.lat:5:18 (Cl example.lat:5:18 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")]),IAddRef example.lat:14:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:14:9 (Cl example.lat:14:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IAddRef example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:14:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_29")) (-1),ILoad example.lat:15:9 (IRValueName "%v_c4") (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c4")) (-1),IAddRef example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) 1,IStore example.lat:15:9 (VVal example.lat:15:9 (Ref example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (PFld example.lat:15:9 (Ref example.lat:15:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_24")) (QIdent example.lat:15:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:15:9 (Ref example.lat:12:9 (Cl example.lat:12:9 (IRTargetRefName "Node"))) (VVal example.lat:15:9 (Ref example.lat:15:9 (Cl example.lat:15:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_26")) (-1),IAddRef example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:15:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_24")) (-1),IEndPhi example.lat:11:5,IRet example.lat:11:5 (VVal example.lat:11:5 (Int example.lat:11:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_24",RDI),(IRValueName "%a_t_25",RSI),(IRValueName "%v_c4",RAX),(IRValueName "%v_return",R13),(IRValueName "%v_t_24",RBX),(IRValueName "%v_t_25",R14),(IRValueName "%v_t_26",R12),(IRValueName "%v_t_29",R14),(IRValueName "~arg_0_RDI",RDI),(IRValueName "~arg_1_RSI",RSI),(IRValueName "~arg_2_RDI",RDI),(IRValueName "~arg_3_RSI",RSI)], numLocals = 0}),([".L_entry",".L_exit","_IELSE33","_IIF32"]
".L_entry" -> fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"] <- fromList []
".L_exit" -> fromList [] <- fromList [IRLabelName "_IELSE33",IRLabelName "_IIF32"]
"_IELSE33" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
"_IIF32" -> fromList [IRLabelName ".L_exit"] <- fromList [IRLabelName ".L_entry"]
,Mthd example.lat:17:5 (Bool example.lat:17:5) (QIdent example.lat:17:13 (IRTargetRefName "Stack") (IRTargetRefName "isEmpty")) [Param example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_31")] [ILabel example.lat:17:5 (IRLabelName ".L_entry"),IEndPhi example.lat:17:5,ILoad example.lat:17:5 (IRValueName "%v_t_31") (PParam example.lat:17:5 (Ref example.lat:17:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_31")),ILoad example.lat:18:16 (IRValueName "%v_t_35") (PFld example.lat:18:16 (Ref example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:18:16 (Cl example.lat:18:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_31")) (QIdent example.lat:18:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) 1,IAddRef example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:18:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_31")) (-1),IAddRef example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (-1),IOp example.lat:18:16 (IRValueName "%v___temp_5") (VVal example.lat:18:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_35")) (OpEQU example.lat:18:16) (VNull example.lat:18:28 (Ref  (Cl  (IRTargetRefName "?")))),ICondJmp example.lat:18:16 (VVal example.lat:18:16 (Bool example.lat:18:16) (IRValueName "%v___temp_5")) (IRLabelName "_IIF32") (IRLabelName "_IELSE33"),ILabel example.lat:18:9 (IRLabelName "_IELSE33"),IEndPhi example.lat:18:9,ISet example.lat:17:5 (IRValueName "%v_return~2") (VInt example.lat:17:5 0),IJmp example.lat:17:5 (IRLabelName ".L_exit"),ILabel example.lat:17:5 (IRLabelName ".L_exit"),IEndPhi example.lat:17:5,IRet example.lat:17:5 (VVal example.lat:17:5 (Bool example.lat:17:5) (IRValueName "%v_return~2")),ILabel example.lat:18:9 (IRLabelName "_IIF32"),IEndPhi example.lat:18:9,ISet example.lat:17:5 (IRValueName "%v_return~2") (VInt example.lat:17:5 1),IJmp example.lat:17:5 (IRLabelName ".L_exit")],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_31",RDI),(IRValueName "%v___temp_5",RAX),(IRValueName "%v_return~2",RAX),(IRValueName "%v_t_31",RCX),(IRValueName "%v_t_35",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (QIdent example.lat:20:11 (IRTargetRefName "Stack") (IRTargetRefName "top")) [Param example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_39")] [ILabel example.lat:20:5 (IRLabelName ".L_entry"),IEndPhi example.lat:20:5,ILoad example.lat:20:5 (IRValueName "%v_t_39") (PParam example.lat:20:5 (Ref example.lat:20:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_39")),ILoad example.lat:21:16 (IRValueName "%v_t_40") (PFld example.lat:21:16 (Ref example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:21:16 (Cl example.lat:21:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_39")) (QIdent example.lat:21:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) 1,IAddRef example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:21:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_39")) (-1),ICall example.lat:21:16 (IRValueName "%v_t_41") (CallVirt example.lat:21:16 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (QIdent example.lat:21:16 (IRTargetRefName "Node") (IRTargetRefName "getElem")) [VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")]),IAddRef example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:21:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_40")) (-1),IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:21:9 (Cl example.lat:21:9 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")) 1,IAddRef example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (VVal example.lat:21:9 (Ref example.lat:6:5 (Cl example.lat:6:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41")) (-1),IEndPhi example.lat:20:5,IRet example.lat:20:5 (VVal example.lat:20:5 (Ref example.lat:20:5 (Cl example.lat:20:5 (IRTargetRefName "Shape"))) (IRValueName "%v_t_41"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_39",RDI),(IRValueName "%v_t_39",RAX),(IRValueName "%v_t_40",RBX),(IRValueName "%v_t_41",RAX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:23:5 (Int example.lat:23:5) (QIdent example.lat:23:10 (IRTargetRefName "Stack") (IRTargetRefName "pop")) [Param example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%a_t_42")] [ILabel example.lat:23:5 (IRLabelName ".L_entry"),IEndPhi example.lat:23:5,ILoad example.lat:23:5 (IRValueName "%v_t_42") (PParam example.lat:23:5 (Ref example.lat:23:5 (Ref  (Cl  (IRTargetRefName "Stack")))) 0 (IRValueName "%a_t_42")),ILoad example.lat:24:16 (IRValueName "%v_t_43") (PFld example.lat:24:16 (Ref example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:16 (Cl example.lat:24:16 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:16 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) 1,IAddRef example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:16 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),ICall example.lat:24:16 (IRValueName "%v_t_44") (CallVirt example.lat:24:16 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (QIdent example.lat:24:16 (IRTargetRefName "Node") (IRTargetRefName "getNext")) [VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")]),IAddRef example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:16 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_43")) (-1),ILoad example.lat:24:9 (IRValueName "%v_c6") (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (IRValueName "%v_c6")) (-1),IAddRef example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")) 1,IStore example.lat:24:9 (VVal example.lat:24:9 (Ref example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")) (PFld example.lat:24:9 (Ref example.lat:24:9 (Ref example.lat:10:5 (Cl example.lat:10:5 (IRTargetRefName "Node")))) (VVal example.lat:24:9 (Cl example.lat:24:9 (IRTargetRefName "Stack")) (IRValueName "%v_t_42")) (QIdent example.lat:24:9 (IRTargetRefName "Stack") (IRTargetRefName "head"))),IAddRef example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (VVal example.lat:24:9 (Ref  (Cl  (IRTargetRefName "Stack"))) (IRValueName "%v_t_42")) (-1),IAddRef example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (VVal example.lat:24:9 (Ref example.lat:7:5 (Cl example.lat:7:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_44")) (-1),IEndPhi example.lat:23:5,IRet example.lat:23:5 (VVal example.lat:23:5 (Int example.lat:23:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%a_t_42",RDI),(IRValueName "%v_c6",RCX),(IRValueName "%v_return",RBX),(IRValueName "%v_t_42",R12),(IRValueName "%v_t_43",R13),(IRValueName "%v_t_44",RAX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:28:5 (Int example.lat:28:5) (QIdent example.lat:28:10 (IRTargetRefName "Shape") (IRTargetRefName "tell")) [Param example.lat:28:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_45")] [ILabel example.lat:28:5 (IRLabelName ".L_entry"),IEndPhi example.lat:28:5,INewStr example.lat:29:21 (IRValueName "%v_t_47") "I'm a shape",IAddRef example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:21 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) 1,IVCall example.lat:29:9 (Call example.lat:29:9 (Bool inside standard library) (QIdent example.lat:29:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:29:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_47")] []),IAddRef example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (VVal example.lat:29:9 (Ref example.lat:29:21 (Cl example.lat:29:21 (IRTargetRefName "String"))) (IRValueName "%v_t_47")) (-1),IEndPhi example.lat:28:5,IRet example.lat:28:5 (VVal example.lat:28:5 (Int example.lat:28:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_return",R12),(IRValueName "%v_t_47",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:31:5 (Int example.lat:31:5) (QIdent example.lat:31:10 (IRTargetRefName "Shape") (IRTargetRefName "tellAgain")) [Param example.lat:31:5 (Ref  (Cl  (IRTargetRefName "Shape"))) (IRValueName "%a_t_49")] [ILabel example.lat:31:5 (IRLabelName ".L_entry"),IEndPhi example.lat:31:5,INewStr example.lat:32:21 (IRValueName "%v_t_51") "I'm just a shape",IAddRef example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:21 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) 1,IVCall example.lat:32:9 (Call example.lat:32:9 (Bool inside standard library) (QIdent example.lat:32:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:32:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_51")] []),IAddRef example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (VVal example.lat:32:9 (Ref example.lat:32:21 (Cl example.lat:32:21 (IRTargetRefName "String"))) (IRValueName "%v_t_51")) (-1),IEndPhi example.lat:31:5,IRet example.lat:31:5 (VVal example.lat:31:5 (Int example.lat:31:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_return",R12),(IRValueName "%v_t_51",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:36:5 (Int example.lat:36:5) (QIdent example.lat:36:10 (IRTargetRefName "Rectangle") (IRTargetRefName "tellAgain")) [Param example.lat:36:5 (Ref  (Cl  (IRTargetRefName "Rectangle"))) (IRValueName "%a_t_53")] [ILabel example.lat:36:5 (IRLabelName ".L_entry"),IEndPhi example.lat:36:5,INewStr example.lat:37:21 (IRValueName "%v_t_55") "I'm really a rectangle",IAddRef example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:21 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) 1,IVCall example.lat:37:9 (Call example.lat:37:9 (Bool inside standard library) (QIdent example.lat:37:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:37:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_55")] []),IAddRef example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (VVal example.lat:37:9 (Ref example.lat:37:21 (Cl example.lat:37:21 (IRTargetRefName "String"))) (IRValueName "%v_t_55")) (-1),IEndPhi example.lat:36:5,IRet example.lat:36:5 (VVal example.lat:36:5 (Int example.lat:36:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_return",R12),(IRValueName "%v_t_55",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:41:5 (Int example.lat:41:5) (QIdent example.lat:41:10 (IRTargetRefName "Circle") (IRTargetRefName "tellAgain")) [Param example.lat:41:5 (Ref  (Cl  (IRTargetRefName "Circle"))) (IRValueName "%a_t_57")] [ILabel example.lat:41:5 (IRLabelName ".L_entry"),IEndPhi example.lat:41:5,INewStr example.lat:42:21 (IRValueName "%v_t_59") "I'm really a circle",IAddRef example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:21 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) 1,IVCall example.lat:42:9 (Call example.lat:42:9 (Bool inside standard library) (QIdent example.lat:42:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:42:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_59")] []),IAddRef example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (VVal example.lat:42:9 (Ref example.lat:42:21 (Cl example.lat:42:21 (IRTargetRefName "String"))) (IRValueName "%v_t_59")) (-1),IEndPhi example.lat:41:5,IRet example.lat:41:5 (VVal example.lat:41:5 (Int example.lat:41:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_return",R12),(IRValueName "%v_t_59",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:46:5 (Int example.lat:46:5) (QIdent example.lat:46:10 (IRTargetRefName "Square") (IRTargetRefName "tellAgain")) [Param example.lat:46:5 (Ref  (Cl  (IRTargetRefName "Square"))) (IRValueName "%a_t_61")] [ILabel example.lat:46:5 (IRLabelName ".L_entry"),IEndPhi example.lat:46:5,INewStr example.lat:47:21 (IRValueName "%v_t_63") "I'm really a square",IAddRef example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:21 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) 1,IVCall example.lat:47:9 (Call example.lat:47:9 (Bool inside standard library) (QIdent example.lat:47:9 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "printString")) [VVal example.lat:47:9 (Ref inside standard library (Cl inside standard library (IRTargetRefName "String"))) (IRValueName "%v_t_63")] []),IAddRef example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (VVal example.lat:47:9 (Ref example.lat:47:21 (Cl example.lat:47:21 (IRTargetRefName "String"))) (IRValueName "%v_t_63")) (-1),IEndPhi example.lat:46:5,IRet example.lat:46:5 (VVal example.lat:46:5 (Int example.lat:46:5) (IRValueName "%v_return"))],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_return",R12),(IRValueName "%v_t_63",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:51:6 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] [ILabel example.lat:51:1 (IRLabelName ".L_entry"),IEndPhi example.lat:51:1,IEndPhi example.lat:51:1,IRet example.lat:51:1 (VNull example.lat:51:1 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))))],RegisterAllocation {regAlloc = fromList [], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd example.lat:55:1 (Int example.lat:55:1) (QIdent example.lat:55:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "main")) [] [ILabel example.lat:55:1 (IRLabelName ".L_entry"),IEndPhi example.lat:55:1,ICall example.lat:56:16 (IRValueName "%v_t_66") (Call example.lat:56:16 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (QIdent example.lat:56:16 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "genNull")) [] []),IAddRef example.lat:56:10 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:56:10 (Cl example.lat:56:10 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")) 1,IAddRef example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (VVal example.lat:56:10 (Ref example.lat:51:1 (Cl example.lat:51:1 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")) (-1),IVCall example.lat:57:5 (Call example.lat:57:5 (Bool inside standard library) (QIdent example.lat:57:5 (IRTargetRefName "~cl_TopLevel") (IRTargetRefName "print")) [VVal example.lat:57:5 (Ref example.lat:57:5 (Cl example.lat:57:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")] []),IAddRef example.lat:57:5 (Ref example.lat:56:5 (Cl example.lat:56:5 (IRTargetRefName "Node"))) (VVal example.lat:57:5 (Ref example.lat:57:5 (Cl example.lat:57:5 (IRTargetRefName "Node"))) (IRValueName "%v_t_66")) (-1),IEndPhi example.lat:55:1,IRet example.lat:55:1 (VInt example.lat:55:1 0)],RegisterAllocation {regAlloc = fromList [(IRValueName "%v_t_66",RBX),(IRValueName "~arg_0_RDI",RDI)], numLocals = 0})]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running correct compiler backend: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Array" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Array","toString")] 
 START for chain: 
[IRTargetRefName "Array",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Array_toString",2))] for chain: [IRTargetRefName "Array",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Array" RESULT IS = [(IRTargetRefName "toString",("_Array_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Circle" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Shape","Shape","tell"),("Shape","Circle","tellAgain")] 
 START for chain: 
[IRTargetRefName "Circle",IRTargetRefName "Shape",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "tell",(1001003,"Shape.tell",3)),(IRTargetRefName "tellAgain",(1001004,"Circle.tellAgain",4))] for chain: [IRTargetRefName "Circle",IRTargetRefName "Shape",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Circle" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "tell",("Shape.tell",24)),(IRTargetRefName "tellAgain",("Circle.tellAgain",32))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Node" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Node","Node","setElem"),("Node","Node","setNext"),("Node","Node","getElem"),("Node","Node","getNext")] 
 START for chain: 
[IRTargetRefName "Node",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "setElem",(1001003,"Node.setElem",3)),(IRTargetRefName "setNext",(1001004,"Node.setNext",4)),(IRTargetRefName "getElem",(1001005,"Node.getElem",5)),(IRTargetRefName "getNext",(1001006,"Node.getNext",6))] for chain: [IRTargetRefName "Node",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Node" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "setElem",("Node.setElem",24)),(IRTargetRefName "setNext",("Node.setNext",32)),(IRTargetRefName "getElem",("Node.getElem",40)),(IRTargetRefName "getNext",("Node.getNext",48))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Object" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString")] 
 START for chain: 
[IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2))] for chain: [IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Object" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Rectangle" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Shape","Shape","tell"),("Shape","Rectangle","tellAgain")] 
 START for chain: 
[IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "tell",(1001003,"Shape.tell",3)),(IRTargetRefName "tellAgain",(1001004,"Rectangle.tellAgain",4))] for chain: [IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Rectangle" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "tell",("Shape.tell",24)),(IRTargetRefName "tellAgain",("Rectangle.tellAgain",32))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Shape" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Shape","Shape","tell"),("Shape","Shape","tellAgain")] 
 START for chain: 
[IRTargetRefName "Shape",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "tell",(1001003,"Shape.tell",3)),(IRTargetRefName "tellAgain",(1001004,"Shape.tellAgain",4))] for chain: [IRTargetRefName "Shape",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Shape" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "tell",("Shape.tell",24)),(IRTargetRefName "tellAgain",("Shape.tellAgain",32))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Square" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Shape","Shape","tell"),("Shape","Square","tellAgain")] 
 START for chain: 
[IRTargetRefName "Square",IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "tell",(1001003,"Shape.tell",3)),(IRTargetRefName "tellAgain",(1001004,"Square.tellAgain",4))] for chain: [IRTargetRefName "Square",IRTargetRefName "Rectangle",IRTargetRefName "Shape",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Square" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "tell",("Shape.tell",24)),(IRTargetRefName "tellAgain",("Square.tellAgain",32))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Stack" START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString"),("Stack","Stack","push"),("Stack","Stack","isEmpty"),("Stack","Stack","top"),("Stack","Stack","pop")] 
 START for chain: 
[IRTargetRefName "Stack",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "equals",(3,"_Object_equals",0)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",1)),(IRTargetRefName "toString",(1,"_Object_toString",2)),(IRTargetRefName "push",(1001003,"Stack.push",3)),(IRTargetRefName "isEmpty",(1001004,"Stack.isEmpty",4)),(IRTargetRefName "top",(1001005,"Stack.top",5)),(IRTargetRefName "pop",(1001006,"Stack.pop",6))] for chain: [IRTargetRefName "Stack",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "Stack" RESULT IS = [(IRTargetRefName "toString",("_Object_toString",0)),(IRTargetRefName "getHashCode",("_Object_getHashCode",8)),(IRTargetRefName "equals",("_Object_equals",16)),(IRTargetRefName "push",("Stack.push",24)),(IRTargetRefName "isEmpty",("Stack.isEmpty",32)),(IRTargetRefName "top",("Stack.top",40)),(IRTargetRefName "pop",("Stack.pop",48))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "String" START
 [("String","String","charAt"),("Object","String","equals"),("String","String","concat"),("String","String","startsWith"),("String","String","endsWith"),("String","String","getBytes"),("String","String","indexOf"),("String","String","length"),("String","String","substring"),("Object","String","toString"),("Object","String","getHashCode")] 
 START for chain: 
[IRTargetRefName "String",IRTargetRefName "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "charAt",(1001000,"_String_charAt",0)),(IRTargetRefName "equals",(3,"_String_equals",1)),(IRTargetRefName "concat",(1001002,"_String_concat",2)),(IRTargetRefName "startsWith",(1001003,"_String_startsWith",3)),(IRTargetRefName "endsWith",(1001004,"_String_endsWith",4)),(IRTargetRefName "getBytes",(1001005,"_String_getBytes",5)),(IRTargetRefName "indexOf",(1001006,"_String_indexOf",6)),(IRTargetRefName "length",(1001007,"_String_length",7)),(IRTargetRefName "substring",(1001008,"_String_substring",8)),(IRTargetRefName "toString",(1,"_String_toString",9)),(IRTargetRefName "getHashCode",(2,"_String_getHashCode",10))] for chain: [IRTargetRefName "String",IRTargetRefName "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "String" RESULT IS = [(IRTargetRefName "toString",("_String_toString",0)),(IRTargetRefName "getHashCode",("_String_getHashCode",8)),(IRTargetRefName "equals",("_String_equals",16)),(IRTargetRefName "charAt",("_String_charAt",24)),(IRTargetRefName "concat",("_String_concat",32)),(IRTargetRefName "startsWith",("_String_startsWith",40)),(IRTargetRefName "endsWith",("_String_endsWith",48)),(IRTargetRefName "getBytes",("_String_getBytes",56)),(IRTargetRefName "indexOf",("_String_indexOf",64)),(IRTargetRefName "length",("_String_length",72)),(IRTargetRefName "substring",("_String_substring",80))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "~cl_TopLevel" START
 [("","Array","toString"),("","Object","toString"),("","Object","getHashCode"),("","Object","equals"),("","String","equals"),("","String","getHashCode"),("","String","toString"),("","String","substring"),("","String","length"),("","String","indexOf"),("","String","getBytes"),("","String","endsWith"),("","String","startsWith"),("","String","concat"),("","String","charAt"),("","~cl_TopLevel","printString"),("","~cl_TopLevel","printInt"),("","~cl_TopLevel","printByte"),("","~cl_TopLevel","printBoolean"),("","~cl_TopLevel","printBinArray"),("","~cl_TopLevel","byteToString"),("","~cl_TopLevel","boolToString"),("","~cl_TopLevel","intToString"),("","~cl_TopLevel","print"),("","~cl_TopLevel","error"),("","~cl_TopLevel","readInt"),("","~cl_TopLevel","readString"),("","~cl_TopLevel","__cast"),("","Node","setElem"),("","Node","setNext"),("","Node","getElem"),("","Node","getNext"),("","Stack","push"),("","Stack","isEmpty"),("","Stack","top"),("","Stack","pop"),("","Shape","tell"),("","Shape","tellAgain"),("","Rectangle","tellAgain"),("","Circle","tellAgain"),("","Square","tellAgain"),("","~cl_TopLevel","genNull"),("","~cl_TopLevel","main")] 
 START for chain: 
[]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(IRTargetRefName "toString",(1,"_Array_toString",0)),(IRTargetRefName "toString",(1,"_Object_toString",1)),(IRTargetRefName "getHashCode",(2,"_Object_getHashCode",2)),(IRTargetRefName "equals",(3,"_Object_equals",3)),(IRTargetRefName "equals",(3,"_String_equals",4)),(IRTargetRefName "getHashCode",(2,"_String_getHashCode",5)),(IRTargetRefName "toString",(1,"_String_toString",6)),(IRTargetRefName "substring",(1000007,"_String_substring",7)),(IRTargetRefName "length",(1000008,"_String_length",8)),(IRTargetRefName "indexOf",(1000009,"_String_indexOf",9)),(IRTargetRefName "getBytes",(1000010,"_String_getBytes",10)),(IRTargetRefName "endsWith",(1000011,"_String_endsWith",11)),(IRTargetRefName "startsWith",(1000012,"_String_startsWith",12)),(IRTargetRefName "concat",(1000013,"_String_concat",13)),(IRTargetRefName "charAt",(1000014,"_String_charAt",14)),(IRTargetRefName "printString",(1000015,"printString",15)),(IRTargetRefName "printInt",(1000016,"printInt",16)),(IRTargetRefName "printByte",(1000017,"printByte",17)),(IRTargetRefName "printBoolean",(1000018,"printBoolean",18)),(IRTargetRefName "printBinArray",(1000019,"printBinArray",19)),(IRTargetRefName "byteToString",(1000020,"byteToString",20)),(IRTargetRefName "boolToString",(1000021,"boolToString",21)),(IRTargetRefName "intToString",(1000022,"intToString",22)),(IRTargetRefName "print",(1000023,"print",23)),(IRTargetRefName "error",(1000024,"error",24)),(IRTargetRefName "readInt",(1000025,"readInt",25)),(IRTargetRefName "readString",(1000026,"readString",26)),(IRTargetRefName "__cast",(1000027,"__cast",27)),(IRTargetRefName "setElem",(1000028,"Node.setElem",28)),(IRTargetRefName "setNext",(1000029,"Node.setNext",29)),(IRTargetRefName "getElem",(1000030,"Node.getElem",30)),(IRTargetRefName "getNext",(1000031,"Node.getNext",31)),(IRTargetRefName "push",(1000032,"Stack.push",32)),(IRTargetRefName "isEmpty",(1000033,"Stack.isEmpty",33)),(IRTargetRefName "top",(1000034,"Stack.top",34)),(IRTargetRefName "pop",(1000035,"Stack.pop",35)),(IRTargetRefName "tell",(1000036,"Shape.tell",36)),(IRTargetRefName "tellAgain",(1000037,"Shape.tellAgain",37)),(IRTargetRefName "tellAgain",(1000037,"Rectangle.tellAgain",38)),(IRTargetRefName "tellAgain",(1000037,"Circle.tellAgain",39)),(IRTargetRefName "tellAgain",(1000037,"Square.tellAgain",40)),(IRTargetRefName "genNull",(1000041,"~cl_TopLevel.genNull",41)),(IRTargetRefName "main",(1000042,"~cl_TopLevel.main",42))] for chain: []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable "~cl_TopLevel" RESULT IS = [(IRTargetRefName "toString",("_Array_toString",0)),(IRTargetRefName "toString",("_Object_toString",8)),(IRTargetRefName "toString",("_String_toString",16)),(IRTargetRefName "getHashCode",("_Object_getHashCode",24)),(IRTargetRefName "getHashCode",("_String_getHashCode",32)),(IRTargetRefName "equals",("_Object_equals",40)),(IRTargetRefName "equals",("_String_equals",48)),(IRTargetRefName "substring",("_String_substring",56)),(IRTargetRefName "length",("_String_length",64)),(IRTargetRefName "indexOf",("_String_indexOf",72)),(IRTargetRefName "getBytes",("_String_getBytes",80)),(IRTargetRefName "endsWith",("_String_endsWith",88)),(IRTargetRefName "startsWith",("_String_startsWith",96)),(IRTargetRefName "concat",("_String_concat",104)),(IRTargetRefName "charAt",("_String_charAt",112)),(IRTargetRefName "printString",("printString",120)),(IRTargetRefName "printInt",("printInt",128)),(IRTargetRefName "printByte",("printByte",136)),(IRTargetRefName "printBoolean",("printBoolean",144)),(IRTargetRefName "printBinArray",("printBinArray",152)),(IRTargetRefName "byteToString",("byteToString",160)),(IRTargetRefName "boolToString",("boolToString",168)),(IRTargetRefName "intToString",("intToString",176)),(IRTargetRefName "print",("print",184)),(IRTargetRefName "error",("error",192)),(IRTargetRefName "readInt",("readInt",200)),(IRTargetRefName "readString",("readString",208)),(IRTargetRefName "__cast",("__cast",216)),(IRTargetRefName "setElem",("Node.setElem",224)),(IRTargetRefName "setNext",("Node.setNext",232)),(IRTargetRefName "getElem",("Node.getElem",240)),(IRTargetRefName "getNext",("Node.getNext",248)),(IRTargetRefName "push",("Stack.push",256)),(IRTargetRefName "isEmpty",("Stack.isEmpty",264)),(IRTargetRefName "top",("Stack.top",272)),(IRTargetRefName "pop",("Stack.pop",280)),(IRTargetRefName "tell",("Shape.tell",288)),(IRTargetRefName "tellAgain",("Circle.tellAgain",296)),(IRTargetRefName "tellAgain",("Rectangle.tellAgain",304)),(IRT/usr/bin/ld: /tmp/ccbIZjRt.o: warning: relocation in read-only section `.rodata'
/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
argetRefName "tellAgain",("Shape.tellAgain",312)),(IRTargetRefName "tellAgain",("Square.tellAgain",320)),(IRTargetRefName "genNull",("~cl_TopLevel.genNull",328)),(IRTargetRefName "main",("~cl_TopLevel.main",336))]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 40
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 40
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] optimizeASM.applyRulePass: Perform another rules pass...
[94m[Info]    [0m[Reporting.Logs.logInfo#75] optimizeASM.applyRulePass: Perform another rules pass...
[94m[Info]    [0m[Reporting.Logs.logInfo#75] optimizeASM.applyRulePass: Perform another rules pass...
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Created file: example.s
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Calling backend compile step: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Run GCC for X64 backend to generate './example' executable from object file 'example.o'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Executing command 'gcc -fPIE -Lsrc/Runtime/dependencies/_built_/lib lib/runtime -l:libunistring.a example.s -o ./example -z noexecstack'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Command executed successfully.
[94m[Info]    [0m[Reporting.Logs.logInfo#75] X64 compilation of 'example.s' seems to be successfull
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Backend code generation completed successfully example.lat -> ./example
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DONE
