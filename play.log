[94m[Info]    [0m[Reporting.Logs.logInfo#75] Reading: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsing: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Transformed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<???>();
	return 0;
}

Node plus(Node n1, Node n2)
{
	Operator res = new Plus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<???> = l;
	return res;
}

class Node
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return (("Liczba{" + this.v<???>) + "}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<???>("?");
	}
	String toStringFor(string opName)
	{
		return (((((("Operator{" + this.left<???>.toString<???>()) + " ") + opName) + " ") + this.right<???>.toString<???>()) + "}");
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<???>("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<???>();
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node w = plus(liczba(69), liczba(42));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:7:6 (ClassT ./play.lat:7:1 (Ident ./play.lat:7:1 "Node")) [ClassT ./play.lat:7:11 (Ident ./play.lat:7:11 "Node"),ClassT ./play.lat:7:20 (Ident ./play.lat:7:20 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:13:6 (ClassT ./play.lat:13:1 (Ident ./play.lat:13:1 "Node")) [IntT ./play.lat:13:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:13:6 (ClassT ./play.lat:13:1 (Ident ./play.lat:13:1 "Node")) [IntT ./play.lat:13:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node w = plus(liczba(69), liczba(42));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int rrr = w.value<???>();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:19:9 (IntT ./play.lat:19:5) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int rrr = w.value<"Node">();
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<"Node">();
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node plus(Node n1, Node n2)
{
	Operator res = new Plus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Operator res = new Plus;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Operator res = (Operator)(new Plus);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.left<???> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.left<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.left<"Operator"> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.right<???> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.right<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.right<"Operator"> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<???> = l;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Liczba res = new Liczba;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Liczba res = new Liczba;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.v<???> = l;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.v<"Liczba">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.v<"Liczba"> = l;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Node
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> String toString()
{
	return "Node{}";
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return "Node{}";
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return "Node{}";
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- String toString()
{
	return "Node{}";
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return (("Liczba{" + this.v<???>) + "}");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int v;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int v;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	return 42;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 42;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(42);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	return (int)(42);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> String toString()
{
	return (("Liczba{" + this.v<???>) + "}");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (("Liczba{" + this.v<???>) + "}");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (ClassT inside standard library (Ident inside standard library "String")) [ClassT inside standard library (Ident inside standard library "String")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (StringT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- String toString()
{
	return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<???>("?");
	}
	String toStringFor(string opName)
	{
		return (((((("Operator{" + this.left<???>.toString<???>()) + " ") + opName) + " ") + this.right<???>.toString<???>()) + "}");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node left;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node left;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node right;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node right;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int n1, int n2)
{
	printString("Node.operator()");
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("Node.operator()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("Node.operator()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int n1, int n2)
{
	printString("Node.operator()");
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	printString("Node.value()");
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("Node.value()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("Node.value()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	printString("Node.value()");
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> String toString()
{
	return this.toStringFor<???>("?");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return this.toStringFor<???>("?");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:53:12 (ClassT ./play.lat:53:5 (Ident ./play.lat:53:5 "String")) [StringT ./play.lat:53:24]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.toStringFor<"Operator">("?");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- String toString()
{
	return this.toStringFor<"Operator">("?");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> String toStringFor(string opName)
{
	return (((((("Operator{" + this.left<???>.toString<???>()) + " ") + opName) + " ") + this.right<???>.toString<???>()) + "}");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (((((("Operator{" + this.left<???>.toString<???>()) + " ") + opName) + " ") + this.right<???>.toString<???>()) + "}");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:22:12 (ClassT ./play.lat:22:5 (Ident ./play.lat:22:5 "String")) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:22:12 (ClassT ./play.lat:22:5 (Ident ./play.lat:22:5 "String")) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- String toStringFor(string opName)
{
	return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<???>("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int a, int b)
{
	printString("Plus.operator()");
	return (a + b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("Plus.operator()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("Plus.operator()");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (a + b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (a + b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int a, int b)
{
	printString("Plus.operator()");
	return (a + b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> String toString()
{
	return this.toStringFor<???>("+");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return this.toStringFor<???>("+");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:53:12 (ClassT ./play.lat:53:5 (Ident ./play.lat:53:5 "String")) [StringT ./play.lat:53:24]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.toStringFor<"Plus">("+");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- String toString()
{
	return this.toStringFor<"Plus">("+");
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<"Node">();
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Typecheck done./play.lat

int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<"Node">();
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<"Node">();
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) int main()
{
	Node w = plus(liczba(69), liczba(42));
	int rrr = w.value<"Node">();
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printString("Plus.operator()");
		return (a + b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return (int)(0);
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return (int)(0);
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return (int)(42);
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return (int)(0);
	}
	int value()
	{
		printString("Node.value()");
		return (int)(0);
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 1 (took 15 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 2 (took 16 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimization done./play.lat

int main()
{
	Node _var_1000002#w = plus(liczba(69), liczba(42));
	int _var_1000003#rrr = _var_1000002#w.value<"Node">();
	return 0;
}

Node plus(Node _var_1000007#n1, Node _var_1000008#n2)
{
	Operator _var_1000010#res = (Operator)(new Plus);
	_var_1000010#res.left<"Operator"> = _var_1000007#n1;
	_var_1000010#res.right<"Operator"> = _var_1000008#n2;
	return (Node)(_var_1000010#res);
}

Node liczba(int _var_1000014#l)
{
	Liczba _var_1000016#res = new Liczba;
	_var_1000016#res.v<"Liczba"> = _var_1000014#l;
	return (Node)(_var_1000016#res);
}

class Node extends Object
{
	int value()
	{
		return 0;
	}
	String toString()
	{
		return "Node{}";
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return 42;
	}
	String toString()
	{
		return "Liczba{".concat<"String">(intToString(this.v<"Liczba">)).concat<"String">("}");
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000036#n1, int _var_1000037#n2)
	{
		printString("Node.operator()");
		return 0;
	}
	int value()
	{
		printString("Node.value()");
		return 0;
	}
	String toString()
	{
		return this.toStringFor<"Operator">("?");
	}
	String toStringFor(string _var_1000050#opName)
	{
		return "Operator{".concat<"String">(this.left<"Operator">.toString<"Node">()).concat<"String">(" ").concat<"String">(_var_1000050#opName).concat<"String">(" ").concat<"String">(this.right<"Operator">.toString<"Node">()).concat<"String">("}");
	}
}

class Plus extends Operator
{
	int operator(int _var_1000055#a, int _var_1000056#b)
	{
		printString("Plus.operator()");
		return (_var_1000055#a + _var_1000056#b);
	}
	String toString()
	{
		return this.toStringFor<"Plus">("+");
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Node>,obj<Node>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:9:5 (Var ./play.lat:9:5 (Ident ./play.lat:9:5 "_var_1000010#res")) (Ident ./play.lat:9:9 "left") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:10:5 (Var ./play.lat:10:5 (Ident ./play.lat:10:5 "_var_1000010#res")) (Ident ./play.lat:10:9 "right") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:15:5 (Var ./play.lat:15:5 (Ident ./play.lat:15:5 "_var_1000016#res")) (Ident ./play.lat:15:9 "v") (Just "Liczba")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DEBUG COLLECT_FUNCTIONS PROTOTYPES
[94m[Info]    [0m[Reporting.Logs.logInfo#75] [int main()
    int t_18 = <int>69
    obj<Node> t_19 =     call<function> liczba(<int>t_18)
    int t_20 = <int>42
    obj<Node> t_21 =     call<function> liczba(<int>t_20)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    int t_24 =     call<method:Node, class:value> t_23(<obj<Node>>t_23)
    int t_25 = <int>t_24
    int t_26 = <int>0
    return <int>t_26
,obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32
,obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36
,int Node.value(obj<Node> t_37)
    int t_38 = <int>0
    return <int>t_38
,obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41
,int Liczba.value(obj<Liczba> t_42)
    int t_43 = <int>42
    return <int>t_43
,obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52
,int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    byte t_58 =     call<function> printString(<obj<String>>t_57)
    int t_59 = <int>0
    return <int>t_59
,int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    byte t_63 =     call<function> printString(<obj<String>>t_62)
    int t_64 = <int>0
    return <int>t_64
,obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68
,obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86
,int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    byte t_92 =     call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93
,obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] END DEBUG
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Initial IR: 
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    int t_18 = <int>69
    obj<Node> t_19 =     call<function> liczba(<int>t_18)
    int t_20 = <int>42
    obj<Node> t_21 =     call<function> liczba(<int>t_20)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    int t_24 =     call<method:Node, class:value> t_23(<obj<Node>>t_23)
    int t_25 = <int>t_24
    int t_26 = <int>0
    return <int>t_26

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    int t_38 = <int>0
    return <int>t_38

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    int t_43 = <int>42
    return <int>t_43

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    byte t_58 =     call<function> printString(<obj<String>>t_57)
    int t_59 = <int>0
    return <int>t_59

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    byte t_63 =     call<function> printString(<obj<String>>t_62)
    int t_64 = <int>0
    return <int>t_64

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    byte t_92 =     call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    int t_18 = <int>69
    obj<Node> t_19 =     call<function> liczba(<int>t_18)
    int t_20 = <int>42
    obj<Node> t_21 =     call<function> liczba(<int>t_20)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    int t_24 =     call<method:Node, class:value> t_23(<obj<Node>>t_23)
    int t_25 = <int>t_24
    int t_26 = <int>0
    return <int>t_26

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    int t_38 = <int>0
    return <int>t_38

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    int t_43 = <int>42
    return <int>t_43

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    byte t_58 =     call<function> printString(<obj<String>>t_57)
    int t_59 = <int>0
    return <int>t_59

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    byte t_63 =     call<function> printString(<obj<String>>t_62)
    int t_64 = <int>0
    return <int>t_64

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    byte t_92 =     call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    obj<Node> t_19 =     call<function> liczba(<int>69)
    obj<Node> t_21 =     call<function> liczba(<int>42)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    discard<int> call<method:Node, class:value> t_23(<obj<Node>>t_23)
    return <int>0

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    return <int>0

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    return <int>42

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    discard<byte> call<function> printString(<obj<String>>t_57)
    return <int>0

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    discard<byte> call<function> printString(<obj<String>>t_62)
    return <int>0

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    discard<byte> call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 2 (took 6 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    obj<Node> t_19 =     call<function> liczba(<int>69)
    obj<Node> t_21 =     call<function> liczba(<int>42)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    discard<int> call<method:Node, class:value> t_23(<obj<Node>>t_23)
    return <int>0

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    return <int>0

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    return <int>42

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    discard<byte> call<function> printString(<obj<String>>t_57)
    return <int>0

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    discard<byte> call<function> printString(<obj<String>>t_62)
    return <int>0

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    discard<byte> call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    obj<Node> t_19 =     call<function> liczba(<int>69)
    obj<Node> t_21 =     call<function> liczba(<int>42)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    discard<int> call<method:Node, class:value> t_23(<obj<Node>>t_23)
    return <int>0

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    return <int>0

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    return <int>42

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    discard<byte> call<function> printString(<obj<String>>t_57)
    return <int>0

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    discard<byte> call<function> printString(<obj<String>>t_62)
    return <int>0

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    discard<byte> call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] AST to convert:
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Liczba.value ()
    method <from:Object> obj<String> Liczba.toString ()

struct Node extends [Node, Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Node.value ()
    method <from:Object> obj<String> Node.toString ()

struct Object extends [Object]
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Object> obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Operator> int Operator.operator (n1 int, n2 int)
    method <from:Node> int Operator.value ()
    method <from:Object> obj<String> Operator.toString ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method <from:Object> byte Object.equals (_arg_1 obj<Object>)
    method <from:Object> int Object.getHashCode ()
    method <from:Node> int Operator.value ()
    method <from:Operator> obj<String> Operator.toStringFor (opName obj<String>)
    method <from:Operator> int Plus.operator (a int, b int)
    method <from:Object> obj<String> Plus.toString ()

struct String extends [String, Object]
    method <from:String> int String.charAt (_arg_1 int)
    method <from:Object> byte String.equals (_arg_1 obj<Object>)
    method <from:String> obj<String> String.concat (_arg_1 obj<String>)
    method <from:String> byte String.startsWith (_arg_1 obj<String>)
    method <from:String> byte String.endsWith (_arg_1 obj<String>)
    method <from:String> array<int> String.getBytes ()
    method <from:String> int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method <from:String> int String.length ()
    method <from:String> obj<String> String.substring (_arg_1 int, _arg_2 int)
    method <from:Object> obj<String> String.toString ()
    method <from:Object> int String.getHashCode ()

int main()
    obj<Node> t_19 =     call<function> liczba(<int>69)
    obj<Node> t_21 =     call<function> liczba(<int>42)
    obj<Node> t_22 =     call<function> plus(<obj<Node>>t_19, <obj<Node>>t_21)
    obj<Node> t_23 = <obj<Node>>t_22
    discard<int> call<method:Node, class:value> t_23(<obj<Node>>t_23)
    return <int>0

obj<Node> plus(obj<Node> t_27, obj<Node> t_28)
    obj<Plus> t_29 = new Plus
    obj<Operator> t_30 =     cast <obj<Plus>>t_29 to Operator
    obj<Operator> t_31 = <obj<Operator>>t_30
    t_31.field[Operator.left] = <obj<Node>>t_27
    t_31.field[Operator.right] = <obj<Node>>t_28
    obj<Node> t_32 =     cast <obj<Operator>>t_31 to Node
    return <obj<Node>>t_32

obj<Node> liczba(int t_33)
    obj<Liczba> t_34 = new Liczba
    obj<Liczba> t_35 = <obj<Liczba>>t_34
    t_35.field[Liczba.v] = <int>t_33
    obj<Node> t_36 =     cast <obj<Liczba>>t_35 to Node
    return <obj<Node>>t_36

int Node.value(obj<Node> t_37)
    return <int>0

obj<String> Node.toString(obj<Node> t_39)
    obj<String> t_41 =     new string _S40
    return <obj<String>>t_41

int Liczba.value(obj<Liczba> t_42)
    return <int>42

obj<String> Liczba.toString(obj<Liczba> t_44)
    obj<String> t_51 =     new string _S50
    int t_47 = t_44.field<int>[Liczba.v]
    obj<String> t_48 =     call<function> intToString(<int>t_47)
    obj<String> t_46 =     new string _S45
    obj<String> t_49 =     call<method:String, class:concat> t_46(<obj<String>>t_46, <obj<String>>t_48)
    obj<String> t_52 =     call<method:String, class:concat> t_49(<obj<String>>t_49, <obj<String>>t_51)
    return <obj<String>>t_52

int Operator.operator(obj<Operator> t_53, int t_54, int t_55)
    obj<String> t_57 =     new string _S56
    discard<byte> call<function> printString(<obj<String>>t_57)
    return <int>0

int Operator.value(obj<Operator> t_60)
    obj<String> t_62 =     new string _S61
    discard<byte> call<function> printString(<obj<String>>t_62)
    return <int>0

obj<String> Operator.toString(obj<Operator> t_65)
    obj<String> t_67 =     new string _S66
    obj<String> t_68 =     call<method:Operator, class:toStringFor> t_65(<obj<Operator>>t_65, <obj<String>>t_67)
    return <obj<String>>t_68

obj<String> Operator.toStringFor(obj<Operator> t_69, obj<String> t_70)
    obj<String> t_85 =     new string _S50
    obj<Node> t_82 = t_69.field<obj<Node>>[Operator.right]
    obj<String> t_83 =     call<method:Node, class:toString> t_82(<obj<Node>>t_82)
    obj<String> t_80 =     new string _S76
    obj<String> t_77 =     new string _S76
    obj<Node> t_73 = t_69.field<obj<Node>>[Operator.left]
    obj<String> t_74 =     call<method:Node, class:toString> t_73(<obj<Node>>t_73)
    obj<String> t_72 =     new string _S71
    obj<String> t_75 =     call<method:String, class:concat> t_72(<obj<String>>t_72, <obj<String>>t_74)
    obj<String> t_78 =     call<method:String, class:concat> t_75(<obj<String>>t_75, <obj<String>>t_77)
    obj<String> t_79 =     call<method:String, class:concat> t_78(<obj<String>>t_78, <obj<String>>t_70)
    obj<String> t_81 =     call<method:String, class:concat> t_79(<obj<String>>t_79, <obj<String>>t_80)
    obj<String> t_84 =     call<method:String, class:concat> t_81(<obj<String>>t_81, <obj<String>>t_83)
    obj<String> t_86 =     call<method:String, class:concat> t_84(<obj<String>>t_84, <obj<String>>t_85)
    return <obj<String>>t_86

int Plus.operator(obj<Plus> t_87, int t_88, int t_89)
    obj<String> t_91 =     new string _S90
    discard<byte> call<function> printString(<obj<String>>t_91)
    int t_93 = <int>t_88 + <int>t_89
    return <int>t_93

obj<String> Plus.toString(obj<Plus> t_94)
    obj<String> t_96 =     new string _S95
    obj<String> t_97 =     call<method:Plus, class:toStringFor> t_94(<obj<Plus>>t_94, <obj<String>>t_96)
    return <obj<String>>t_97

data string _S40 = "Node{}"
data string _S45 = "Liczba{"
data string _S50 = "}"
data string _S56 = "Node.operator()"
data string _S61 = "Node.value()"
data string _S66 = "?"
data string _S71 = "Operator{"
data string _S76 = " "
data string _S90 = "Plus.operator()"
data string _S95 = "+"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Linearizer terminated
[94m[Info]    [0m[Reporting.Logs.logInfo#75] IR conversion done./play.lat

.metadata: [
  .classes: [
    Array  extends [SymIdent "Array", SymIdent "Object"] : [
      .fields: [
        Object & elements;
        int length;
        int elementSize;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Array.toString;
      ]
    ]
    Liczba  extends [SymIdent "Liczba", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        int v;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        int () Liczba.value;
        String & () Liczba.toString;
      ]
    ]
    Node  extends [SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        int () Node.value;
        String & () Node.toString;
      ]
    ]
    Object  extends [SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
      ]
    ]
    Operator  extends [SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        int (int, int)Operator.operator;
        int () Operator.value;
        String & () Operator.toString;
        String & (String &)Operator.toStringFor;
      ]
    ]
    Plus  extends [SymIdent "Plus", SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        int () Operator.value;
        String & (String &)Operator.toStringFor;
        int (int, int)Plus.operator;
        String & () Plus.toString;
      ]
    ]
    String  extends [SymIdent "String", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (int)String.charAt;
        boolean (Object &)String.equals;
        String & (String &)String.concat;
        boolean (String &)String.startsWith;
        boolean (String &)String.endsWith;
        int [] & () String.getBytes;
        int (String &, int)String.indexOf;
        int () String.length;
        String & (int, int)String.substring;
        String & () String.toString;
        int () String.getHashCode;
      ]
    ]
    ~cl_TopLevel  extends [] : [
      .fields: [
        ]
      .methods: [
        Array & () Array.toString;
        Object & () Object.toString;
        int () Object.getHashCode;
        boolean (Object &)Object.equals;
        boolean (Object &)String.equals;
        int () String.getHashCode;
        String & () String.toString;
        String & () String.substring;
        int () String.length;
        int (String &, int)String.indexOf;
        String & () String.getBytes;
        boolean (String &)String.endsWith;
        boolean (String &)String.startsWith;
        String & (String &, String &)String.concat;
        int (int)String.charAt;
        boolean (String &)~cl_TopLevel.printString;
        boolean (int)~cl_TopLevel.printInt;
        boolean (boolean)~cl_TopLevel.printByte;
        boolean (boolean)~cl_TopLevel.printBoolean;
        boolean (Array &)~cl_TopLevel.printBinArray;
        String & (boolean)~cl_TopLevel.byteToString;
        String & (boolean)~cl_TopLevel.boolToString;
        String & (int)~cl_TopLevel.intToString;
        boolean (Object &)~cl_TopLevel.print;
        boolean () ~cl_TopLevel.error;
        int () ~cl_TopLevel.readInt;
        String & () ~cl_TopLevel.readString;
        Object & (Object &, Object &)~cl_TopLevel.__cast;
        int () ~cl_TopLevel.main;
        Node & (Node &, Node &)~cl_TopLevel.plus;
        Node & (int)~cl_TopLevel.liczba;
        int (Node &)Node.value;
        String & (Node &)Node.toString;
        int (Liczba &)Liczba.value;
        String & (Liczba &)Liczba.toString;
        int (Operator &, int, int)Operator.operator;
        int (Operator &)Operator.value;
        String & (Operator &)Operator.toString;
        String & (Operator &, String &)Operator.toStringFor;
        int (Plus &, int, int)Plus.operator;
        String & (Plus &)Plus.toString;
      ]
    ]
  ]
]
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED CFGS

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_28",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_28",(1,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_33",(1,Ref () (Int ())))], out = [("%a_t_33",(0,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_37",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_37",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_39",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_39",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_42",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_42",(0,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_44",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_44",(0,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_54",(2,Ref () (Int ()))),("%a_t_55",(3,Ref () (Int ()))),("%a_t_53",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_54",(1,Ref () (Int ()))),("%a_t_55",(2,Ref () (Int ()))),("%a_t_53",(0,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_60",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_60",(0,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_65",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_65",(0,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_70",(2,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_70",(1,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(0,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_88",(2,Ref () (Int ()))),("%a_t_89",(3,Ref () (Int ()))),("%a_t_87",(1,Ref () (Ref () (Cl () (SymIdent "Plus")))))], out = [("%a_t_88",(1,Ref () (Int ()))),("%a_t_89",(2,Ref () (Int ()))),("%a_t_87",(0,Ref () (Ref () (Cl () (SymIdent "Plus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(1,Ref () (Ref () (Cl () (SymIdent "Plus")))))], out = [("%a_t_94",(0,Ref () (Ref () (Cl () (SymIdent "Plus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "String"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),ICall ./play.lat:2:19 (ValIdent "%v_t_19") (Call ./play.lat:2:19 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:19 69] []),ICall ./play.lat:2:31 (ValIdent "%v_t_21") (Call ./play.lat:2:31 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:31 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:31 42] []),ICall ./play.lat:2:14 (ValIdent "%v_t_22") (Call ./play.lat:2:14 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%v_t_19"),VVal ./play.lat:2:14 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%v_t_21")] []),ISet ./play.lat:2:10 (ValIdent "%v_t_23") (VVal ./play.lat:2:10 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_t_22")),IVCall ./play.lat:4:15 (CallVirt ./play.lat:4:15 (Int ./play.lat:19:5) (QIdent ./play.lat:4:15 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:4:15 (Ref ./play.lat:2:5 (Cl ./play.lat:2:5 (SymIdent "Node"))) (ValIdent "%v_t_23")]),ISet ./play.lat:5:5 (ValIdent "%v___temp_0") (VInt ./play.lat:5:5 0),ISet ./play.lat:5:5 (ValIdent "%v_return") (VVal ./play.lat:5:5 (Int ./play.lat:5:12) (ValIdent "%v___temp_0")),IJmp ./play.lat:5:5 (LabIdent ".L_exit"),ILabel ./play.lat:1:1 (LabIdent ".L_exit"),IRet ./play.lat:1:1 (VVal ./play.lat:1:1 (Int ./play.lat:1:1) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%a_t_27"),Param ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%a_t_28")] [ILabel ./play.lat:7:1 (LabIdent ".L_entry"),ILoad ./play.lat:7:1 (ValIdent "%v_t_27") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_27")),ILoad ./play.lat:7:1 (ValIdent "%v_t_28") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_28")),INew ./play.lat:8:20 (ValIdent "%v_t_29") (Cl ./play.lat:8:20 (SymIdent "Plus")),ICall ./play.lat:8:5 (ValIdent "%v_t_30") (Call ./play.lat:8:5 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (QIdent ./play.lat:8:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:8:5 (Ref ./play.lat:8:24 (Cl ./play.lat:8:24 (SymIdent "Plus"))) (ValIdent "%v_t_29")] [LabIdent "_class_Operator"]),ISet ./play.lat:8:14 (ValIdent "%v_t_31") (VVal ./play.lat:8:14 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (ValIdent "%v_t_30")),ISet ./play.lat:9:5 (ValIdent "%v___temp_1") (VVal ./play.lat:9:5 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%v_t_27")),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (ValIdent "%v___temp_1")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator")) (ValIdent "%v_t_31")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:10:5 (ValIdent "%v___temp_2") (VVal ./play.lat:10:5 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%v_t_28")),IStore ./play.lat:10:5 (VVal ./play.lat:10:5 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (ValIdent "%v___temp_2")) (PFld ./play.lat:10:5 (Ref ./play.lat:10:5 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:10:5 (Cl ./play.lat:10:5 (SymIdent "Operator")) (ValIdent "%v_t_31")) (QIdent ./play.lat:10:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:7:1 (ValIdent "%v_t_32") (Call ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:1 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (ValIdent "%v_t_31")] [LabIdent "_class_Node"]),ISet ./play.lat:11:5 (ValIdent "%v___temp_3") (VVal ./play.lat:11:5 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_t_32")),ISet ./play.lat:11:5 (ValIdent "%v_return") (VVal ./play.lat:11:5 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v___temp_3")),IJmp ./play.lat:11:5 (LabIdent ".L_exit"),ILabel ./play.lat:7:1 (LabIdent ".L_exit"),IRet ./play.lat:7:1 (VVal ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:13:1 (Int ./play.lat:13:13) (ValIdent "%a_t_33")] [ILabel ./play.lat:13:1 (LabIdent ".L_entry"),ILoad ./play.lat:13:1 (ValIdent "%v_t_33") (PParam ./play.lat:13:1 (Ref ./play.lat:13:1 (Int ./play.lat:13:13)) 0 (ValIdent "%a_t_33")),INew ./play.lat:14:18 (ValIdent "%v_t_34") (Cl ./play.lat:14:18 (SymIdent "Liczba")),ISet ./play.lat:14:12 (ValIdent "%v_t_35") (VVal ./play.lat:14:12 (Ref ./play.lat:14:22 (Cl ./play.lat:14:22 (SymIdent "Liczba"))) (ValIdent "%v_t_34")),ISet ./play.lat:15:5 (ValIdent "%v___temp_4") (VVal ./play.lat:15:5 (Int ./play.lat:13:13) (ValIdent "%v_t_33")),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Int ./play.lat:27:5) (ValIdent "%v___temp_4")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Int ./play.lat:27:5)) (VVal ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Liczba")) (ValIdent "%v_t_35")) (QIdent ./play.lat:15:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:13:1 (ValIdent "%v_t_36") (Call ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:1 (Ref ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Liczba"))) (ValIdent "%v_t_35")] [LabIdent "_class_Node"]),ISet ./play.lat:16:5 (ValIdent "%v___temp_5") (VVal ./play.lat:16:5 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v_t_36")),ISet ./play.lat:16:5 (ValIdent "%v_return") (VVal ./play.lat:16:5 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v___temp_5")),IJmp ./play.lat:16:5 (LabIdent ".L_exit"),ILabel ./play.lat:13:1 (LabIdent ".L_exit"),IRet ./play.lat:13:1 (VVal ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:19:5 (Int ./play.lat:19:5) (QIdent ./play.lat:19:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:19:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_37")] [ILabel ./play.lat:19:5 (LabIdent ".L_entry"),ILoad ./play.lat:19:5 (ValIdent "%v_t_37") (PParam ./play.lat:19:5 (Ref ./play.lat:19:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_37")),ISet ./play.lat:20:9 (ValIdent "%v___temp_6") (VInt ./play.lat:20:9 0),ISet ./play.lat:20:9 (ValIdent "%v_return") (VVal ./play.lat:20:9 (Int ./play.lat:20:16) (ValIdent "%v___temp_6")),IJmp ./play.lat:20:9 (LabIdent ".L_exit"),ILabel ./play.lat:19:5 (LabIdent ".L_exit"),IRet ./play.lat:19:5 (VVal ./play.lat:19:5 (Int ./play.lat:19:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:22:12 (SymIdent "Node") (SymIdent "toString")) [Param ./play.lat:22:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_39")] [ILabel ./play.lat:22:5 (LabIdent ".L_entry"),ILoad ./play.lat:22:5 (ValIdent "%v_t_39") (PParam ./play.lat:22:5 (Ref ./play.lat:22:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_39")),INewStr ./play.lat:23:16 (ValIdent "%v_t_41") "Node{}",ISet ./play.lat:23:9 (ValIdent "%v___temp_7") (VVal ./play.lat:23:9 (Ref ./play.lat:23:16 (Cl ./play.lat:23:16 (SymIdent "String"))) (ValIdent "%v_t_41")),ISet ./play.lat:23:9 (ValIdent "%v_return") (VVal ./play.lat:23:9 (Ref ./play.lat:23:16 (Cl ./play.lat:23:16 (SymIdent "String"))) (ValIdent "%v___temp_7")),IJmp ./play.lat:23:9 (LabIdent ".L_exit"),ILabel ./play.lat:22:5 (LabIdent ".L_exit"),IRet ./play.lat:22:5 (VVal ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:28:5 (Int ./play.lat:28:5) (QIdent ./play.lat:28:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:28:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_42")] [ILabel ./play.lat:28:5 (LabIdent ".L_entry"),ILoad ./play.lat:28:5 (ValIdent "%v_t_42") (PParam ./play.lat:28:5 (Ref ./play.lat:28:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_42")),ISet ./play.lat:29:9 (ValIdent "%v___temp_8") (VInt ./play.lat:29:9 42),ISet ./play.lat:29:9 (ValIdent "%v_return") (VVal ./play.lat:29:9 (Int ./play.lat:29:16) (ValIdent "%v___temp_8")),IJmp ./play.lat:29:9 (LabIdent ".L_exit"),ILabel ./play.lat:28:5 (LabIdent ".L_exit"),IRet ./play.lat:28:5 (VVal ./play.lat:28:5 (Int ./play.lat:28:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (QIdent ./play.lat:31:12 (SymIdent "Liczba") (SymIdent "toString")) [Param ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_44")] [ILabel ./play.lat:31:5 (LabIdent ".L_entry"),ILoad ./play.lat:31:5 (ValIdent "%v_t_44") (PParam ./play.lat:31:5 (Ref ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_44")),INewStr ./play.lat:32:33 (ValIdent "%v_t_51") "}",ILoad ./play.lat:32:26 (ValIdent "%v_t_47") (PFld ./play.lat:32:26 (Ref ./play.lat:32:26 (Int ./play.lat:27:5)) (VVal ./play.lat:32:26 (Cl ./play.lat:32:26 (SymIdent "Liczba")) (ValIdent "%v_t_44")) (QIdent ./play.lat:32:26 (SymIdent "Liczba") (SymIdent "v"))),ICall inside standard library (ValIdent "%v_t_48") (Call inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent inside standard library (SymIdent "~cl_TopLevel") (SymIdent "intToString")) [VVal inside standard library (Int inside standard library) (ValIdent "%v_t_47")] []),INewStr ./play.lat:32:16 (ValIdent "%v_t_46") "Liczba{",ICall ./play.lat:32:16 (ValIdent "%v_t_49") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref ./play.lat:32:16 (Cl ./play.lat:32:16 (SymIdent "String"))) (ValIdent "%v_t_46"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_48")]),ICall ./play.lat:32:16 (ValIdent "%v_t_52") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_49"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_51")]),ISet ./play.lat:32:9 (ValIdent "%v___temp_9") (VVal ./play.lat:32:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_52")),ISet ./play.lat:32:9 (ValIdent "%v_return") (VVal ./play.lat:32:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v___temp_9")),IJmp ./play.lat:32:9 (LabIdent ".L_exit"),ILabel ./play.lat:31:5 (LabIdent ".L_exit"),IRet ./play.lat:31:5 (VVal ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:38:5 (Int ./play.lat:38:5) (QIdent ./play.lat:38:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:38:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_53"),Param ./play.lat:38:5 (Int ./play.lat:38:18) (ValIdent "%a_t_54"),Param ./play.lat:38:5 (Int ./play.lat:38:26) (ValIdent "%a_t_55")] [ILabel ./play.lat:38:5 (LabIdent ".L_entry"),ILoad ./play.lat:38:5 (ValIdent "%v_t_53") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_53")),ILoad ./play.lat:38:5 (ValIdent "%v_t_54") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Int ./play.lat:38:18)) 1 (ValIdent "%a_t_54")),ILoad ./play.lat:38:5 (ValIdent "%v_t_55") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Int ./play.lat:38:26)) 2 (ValIdent "%a_t_55")),INewStr ./play.lat:39:21 (ValIdent "%v_t_57") "Node.operator()",IVCall ./play.lat:39:9 (Call ./play.lat:39:9 (Bool inside standard library) (QIdent ./play.lat:39:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:39:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_57")] []),ISet ./play.lat:40:9 (ValIdent "%v___temp_10") (VInt ./play.lat:40:9 0),ISet ./play.lat:40:9 (ValIdent "%v_return") (VVal ./play.lat:40:9 (Int ./play.lat:40:16) (ValIdent "%v___temp_10")),IJmp ./play.lat:40:9 (LabIdent ".L_exit"),ILabel ./play.lat:38:5 (LabIdent ".L_exit"),IRet ./play.lat:38:5 (VVal ./play.lat:38:5 (Int ./play.lat:38:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:42:5 (Int ./play.lat:42:5) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:42:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_60")] [ILabel ./play.lat:42:5 (LabIdent ".L_entry"),ILoad ./play.lat:42:5 (ValIdent "%v_t_60") (PParam ./play.lat:42:5 (Ref ./play.lat:42:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_60")),INewStr ./play.lat:43:21 (ValIdent "%v_t_62") "Node.value()",IVCall ./play.lat:43:9 (Call ./play.lat:43:9 (Bool inside standard library) (QIdent ./play.lat:43:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:43:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_62")] []),ISet ./play.lat:48:9 (ValIdent "%v___temp_11") (VInt ./play.lat:48:9 0),ISet ./play.lat:48:9 (ValIdent "%v_return") (VVal ./play.lat:48:9 (Int ./play.lat:48:16) (ValIdent "%v___temp_11")),IJmp ./play.lat:48:9 (LabIdent ".L_exit"),ILabel ./play.lat:42:5 (LabIdent ".L_exit"),IRet ./play.lat:42:5 (VVal ./play.lat:42:5 (Int ./play.lat:42:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (QIdent ./play.lat:50:12 (SymIdent "Operator") (SymIdent "toString")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_65")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),ILoad ./play.lat:50:5 (ValIdent "%v_t_65") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_65")),INewStr ./play.lat:51:33 (ValIdent "%v_t_67") "?",ICall ./play.lat:51:16 (ValIdent "%v_t_68") (CallVirt ./play.lat:51:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:51:16 (SymIdent "Operator") (SymIdent "toStringFor")) [VVal ./play.lat:51:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_65"),VVal ./play.lat:51:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_67")]),ISet ./play.lat:51:9 (ValIdent "%v___temp_12") (VVal ./play.lat:51:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_t_68")),ISet ./play.lat:51:9 (ValIdent "%v_return") (VVal ./play.lat:51:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v___temp_12")),IJmp ./play.lat:51:9 (LabIdent ".L_exit"),ILabel ./play.lat:50:5 (LabIdent ".L_exit"),IRet ./play.lat:50:5 (VVal ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor")) [Param ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_69"),Param ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%a_t_70")] [ILabel ./play.lat:53:5 (LabIdent ".L_entry"),ILoad ./play.lat:53:5 (ValIdent "%v_t_69") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_69")),ILoad ./play.lat:53:5 (ValIdent "%v_t_70") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String")))) 1 (ValIdent "%a_t_70")),INewStr ./play.lat:54:90 (ValIdent "%v_t_85") "}",ILoad ./play.lat:54:67 (ValIdent "%v_t_82") (PFld ./play.lat:54:67 (Ref ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:54:67 (Cl ./play.lat:54:67 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:67 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:54:67 (ValIdent "%v_t_83") (CallVirt ./play.lat:54:67 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:67 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (ValIdent "%v_t_82")]),INewStr ./play.lat:54:62 (ValIdent "%v_t_80") " ",INewStr ./play.lat:54:51 (ValIdent "%v_t_77") " ",ILoad ./play.lat:54:29 (ValIdent "%v_t_73") (PFld ./play.lat:54:29 (Ref ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:54:29 (Cl ./play.lat:54:29 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:29 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:54:29 (ValIdent "%v_t_74") (CallVirt ./play.lat:54:29 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:29 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (ValIdent "%v_t_73")]),INewStr ./play.lat:54:16 (ValIdent "%v_t_72") "Operator{",ICall ./play.lat:54:16 (ValIdent "%v_t_75") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref ./play.lat:54:16 (Cl ./play.lat:54:16 (SymIdent "String"))) (ValIdent "%v_t_72"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_74")]),ICall ./play.lat:54:16 (ValIdent "%v_t_78") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_77")]),ICall ./play.lat:54:16 (ValIdent "%v_t_79") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_78"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_70")]),ICall ./play.lat:54:16 (ValIdent "%v_t_81") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_79"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_80")]),ICall ./play.lat:54:16 (ValIdent "%v_t_84") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_81"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_83")]),ICall ./play.lat:54:16 (ValIdent "%v_t_86") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_85")]),ISet ./play.lat:54:9 (ValIdent "%v___temp_13") (VVal ./play.lat:54:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_86")),ISet ./play.lat:54:9 (ValIdent "%v_return") (VVal ./play.lat:54:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v___temp_13")),IJmp ./play.lat:54:9 (LabIdent ".L_exit"),ILabel ./play.lat:53:5 (LabIdent ".L_exit"),IRet ./play.lat:53:5 (VVal ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:58:5 (Int ./play.lat:58:5) (QIdent ./play.lat:58:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:58:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_87"),Param ./play.lat:58:5 (Int ./play.lat:58:18) (ValIdent "%a_t_88"),Param ./play.lat:58:5 (Int ./play.lat:58:25) (ValIdent "%a_t_89")] [ILabel ./play.lat:58:5 (LabIdent ".L_entry"),ILoad ./play.lat:58:5 (ValIdent "%v_t_87") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_87")),ILoad ./play.lat:58:5 (ValIdent "%v_t_88") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:18)) 1 (ValIdent "%a_t_88")),ILoad ./play.lat:58:5 (ValIdent "%v_t_89") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:25)) 2 (ValIdent "%a_t_89")),INewStr ./play.lat:59:21 (ValIdent "%v_t_91") "Plus.operator()",IVCall ./play.lat:59:9 (Call ./play.lat:59:9 (Bool inside standard library) (QIdent ./play.lat:59:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:59:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_91")] []),IOp ./play.lat:60:18 (ValIdent "%v_t_93") (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_88")) (OpAdd ./play.lat:60:18) (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_89")),ISet ./play.lat:60:9 (ValIdent "%v___temp_14") (VVal ./play.lat:60:9 (Int ./play.lat:58:18) (ValIdent "%v_t_93")),ISet ./play.lat:60:9 (ValIdent "%v_return") (VVal ./play.lat:60:9 (Int ./play.lat:58:18) (ValIdent "%v___temp_14")),IJmp ./play.lat:60:9 (LabIdent ".L_exit"),ILabel ./play.lat:58:5 (LabIdent ".L_exit"),IRet ./play.lat:58:5 (VVal ./play.lat:58:5 (Int ./play.lat:58:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (QIdent ./play.lat:62:12 (SymIdent "Plus") (SymIdent "toString")) [Param ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_94")] [ILabel ./play.lat:62:5 (LabIdent ".L_entry"),ILoad ./play.lat:62:5 (ValIdent "%v_t_94") (PParam ./play.lat:62:5 (Ref ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_94")),INewStr ./play.lat:63:33 (ValIdent "%v_t_96") "+",ICall ./play.lat:63:16 (ValIdent "%v_t_97") (CallVirt ./play.lat:63:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:63:16 (SymIdent "Plus") (SymIdent "toStringFor")) [VVal ./play.lat:63:16 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%v_t_94"),VVal ./play.lat:63:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_96")]),ISet ./play.lat:63:9 (ValIdent "%v___temp_15") (VVal ./play.lat:63:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_t_97")),ISet ./play.lat:63:9 (ValIdent "%v_return") (VVal ./play.lat:63:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v___temp_15")),IJmp ./play.lat:63:9 (LabIdent ".L_exit"),ILabel ./play.lat:62:5 (LabIdent ".L_exit"),IRet ./play.lat:62:5 (VVal ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),ICall ./play.lat:2:19 (ValIdent "%v_t_19") (Call ./play.lat:2:19 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:19 69] []),ICall ./play.lat:2:31 (ValIdent "%v_t_21") (Call ./play.lat:2:31 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:31 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:31 42] []),ICall ./play.lat:2:14 (ValIdent "%v_t_22") (Call ./play.lat:2:14 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%v_t_19"),VVal ./play.lat:2:14 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%v_t_21")] []),ISet ./play.lat:2:10 (ValIdent "%v_t_23") (VVal ./play.lat:2:10 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_t_22")),IVCall ./play.lat:4:15 (CallVirt ./play.lat:4:15 (Int ./play.lat:19:5) (QIdent ./play.lat:4:15 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:4:15 (Ref ./play.lat:2:5 (Cl ./play.lat:2:5 (SymIdent "Node"))) (ValIdent "%v_t_23")]),ISet ./play.lat:5:5 (ValIdent "%v___temp_0") (VInt ./play.lat:5:5 0),ISet ./play.lat:5:5 (ValIdent "%v_return") (VVal ./play.lat:5:5 (Int ./play.lat:5:12) (ValIdent "%v___temp_0")),IJmp ./play.lat:5:5 (LabIdent ".L_exit"),ILabel ./play.lat:1:1 (LabIdent ".L_exit"),IRet ./play.lat:1:1 (VVal ./play.lat:1:1 (Int ./play.lat:1:1) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%a_t_27"),Param ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%a_t_28")] [ILabel ./play.lat:7:1 (LabIdent ".L_entry"),ILoad ./play.lat:7:1 (ValIdent "%v_t_27") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_27")),ILoad ./play.lat:7:1 (ValIdent "%v_t_28") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_28")),INew ./play.lat:8:20 (ValIdent "%v_t_29") (Cl ./play.lat:8:20 (SymIdent "Plus")),ICall ./play.lat:8:5 (ValIdent "%v_t_30") (Call ./play.lat:8:5 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (QIdent ./play.lat:8:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:8:5 (Ref ./play.lat:8:24 (Cl ./play.lat:8:24 (SymIdent "Plus"))) (ValIdent "%v_t_29")] [LabIdent "_class_Operator"]),ISet ./play.lat:8:14 (ValIdent "%v_t_31") (VVal ./play.lat:8:14 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (ValIdent "%v_t_30")),ISet ./play.lat:9:5 (ValIdent "%v___temp_1") (VVal ./play.lat:9:5 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%v_t_27")),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (ValIdent "%v___temp_1")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator")) (ValIdent "%v_t_31")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:10:5 (ValIdent "%v___temp_2") (VVal ./play.lat:10:5 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%v_t_28")),IStore ./play.lat:10:5 (VVal ./play.lat:10:5 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (ValIdent "%v___temp_2")) (PFld ./play.lat:10:5 (Ref ./play.lat:10:5 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:10:5 (Cl ./play.lat:10:5 (SymIdent "Operator")) (ValIdent "%v_t_31")) (QIdent ./play.lat:10:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:7:1 (ValIdent "%v_t_32") (Call ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:1 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (ValIdent "%v_t_31")] [LabIdent "_class_Node"]),ISet ./play.lat:11:5 (ValIdent "%v___temp_3") (VVal ./play.lat:11:5 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_t_32")),ISet ./play.lat:11:5 (ValIdent "%v_return") (VVal ./play.lat:11:5 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v___temp_3")),IJmp ./play.lat:11:5 (LabIdent ".L_exit"),ILabel ./play.lat:7:1 (LabIdent ".L_exit"),IRet ./play.lat:7:1 (VVal ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:13:1 (Int ./play.lat:13:13) (ValIdent "%a_t_33")] [ILabel ./play.lat:13:1 (LabIdent ".L_entry"),ILoad ./play.lat:13:1 (ValIdent "%v_t_33") (PParam ./play.lat:13:1 (Ref ./play.lat:13:1 (Int ./play.lat:13:13)) 0 (ValIdent "%a_t_33")),INew ./play.lat:14:18 (ValIdent "%v_t_34") (Cl ./play.lat:14:18 (SymIdent "Liczba")),ISet ./play.lat:14:12 (ValIdent "%v_t_35") (VVal ./play.lat:14:12 (Ref ./play.lat:14:22 (Cl ./play.lat:14:22 (SymIdent "Liczba"))) (ValIdent "%v_t_34")),ISet ./play.lat:15:5 (ValIdent "%v___temp_4") (VVal ./play.lat:15:5 (Int ./play.lat:13:13) (ValIdent "%v_t_33")),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Int ./play.lat:27:5) (ValIdent "%v___temp_4")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Int ./play.lat:27:5)) (VVal ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Liczba")) (ValIdent "%v_t_35")) (QIdent ./play.lat:15:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:13:1 (ValIdent "%v_t_36") (Call ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:1 (Ref ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Liczba"))) (ValIdent "%v_t_35")] [LabIdent "_class_Node"]),ISet ./play.lat:16:5 (ValIdent "%v___temp_5") (VVal ./play.lat:16:5 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v_t_36")),ISet ./play.lat:16:5 (ValIdent "%v_return") (VVal ./play.lat:16:5 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v___temp_5")),IJmp ./play.lat:16:5 (LabIdent ".L_exit"),ILabel ./play.lat:13:1 (LabIdent ".L_exit"),IRet ./play.lat:13:1 (VVal ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:19:5 (Int ./play.lat:19:5) (QIdent ./play.lat:19:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:19:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_37")] [ILabel ./play.lat:19:5 (LabIdent ".L_entry"),ILoad ./play.lat:19:5 (ValIdent "%v_t_37") (PParam ./play.lat:19:5 (Ref ./play.lat:19:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_37")),ISet ./play.lat:20:9 (ValIdent "%v___temp_6") (VInt ./play.lat:20:9 0),ISet ./play.lat:20:9 (ValIdent "%v_return") (VVal ./play.lat:20:9 (Int ./play.lat:20:16) (ValIdent "%v___temp_6")),IJmp ./play.lat:20:9 (LabIdent ".L_exit"),ILabel ./play.lat:19:5 (LabIdent ".L_exit"),IRet ./play.lat:19:5 (VVal ./play.lat:19:5 (Int ./play.lat:19:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:22:12 (SymIdent "Node") (SymIdent "toString")) [Param ./play.lat:22:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_39")] [ILabel ./play.lat:22:5 (LabIdent ".L_entry"),ILoad ./play.lat:22:5 (ValIdent "%v_t_39") (PParam ./play.lat:22:5 (Ref ./play.lat:22:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_39")),INewStr ./play.lat:23:16 (ValIdent "%v_t_41") "Node{}",ISet ./play.lat:23:9 (ValIdent "%v___temp_7") (VVal ./play.lat:23:9 (Ref ./play.lat:23:16 (Cl ./play.lat:23:16 (SymIdent "String"))) (ValIdent "%v_t_41")),ISet ./play.lat:23:9 (ValIdent "%v_return") (VVal ./play.lat:23:9 (Ref ./play.lat:23:16 (Cl ./play.lat:23:16 (SymIdent "String"))) (ValIdent "%v___temp_7")),IJmp ./play.lat:23:9 (LabIdent ".L_exit"),ILabel ./play.lat:22:5 (LabIdent ".L_exit"),IRet ./play.lat:22:5 (VVal ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:28:5 (Int ./play.lat:28:5) (QIdent ./play.lat:28:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:28:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_42")] [ILabel ./play.lat:28:5 (LabIdent ".L_entry"),ILoad ./play.lat:28:5 (ValIdent "%v_t_42") (PParam ./play.lat:28:5 (Ref ./play.lat:28:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_42")),ISet ./play.lat:29:9 (ValIdent "%v___temp_8") (VInt ./play.lat:29:9 42),ISet ./play.lat:29:9 (ValIdent "%v_return") (VVal ./play.lat:29:9 (Int ./play.lat:29:16) (ValIdent "%v___temp_8")),IJmp ./play.lat:29:9 (LabIdent ".L_exit"),ILabel ./play.lat:28:5 (LabIdent ".L_exit"),IRet ./play.lat:28:5 (VVal ./play.lat:28:5 (Int ./play.lat:28:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (QIdent ./play.lat:31:12 (SymIdent "Liczba") (SymIdent "toString")) [Param ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_44")] [ILabel ./play.lat:31:5 (LabIdent ".L_entry"),ILoad ./play.lat:31:5 (ValIdent "%v_t_44") (PParam ./play.lat:31:5 (Ref ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_44")),INewStr ./play.lat:32:33 (ValIdent "%v_t_51") "}",ILoad ./play.lat:32:26 (ValIdent "%v_t_47") (PFld ./play.lat:32:26 (Ref ./play.lat:32:26 (Int ./play.lat:27:5)) (VVal ./play.lat:32:26 (Cl ./play.lat:32:26 (SymIdent "Liczba")) (ValIdent "%v_t_44")) (QIdent ./play.lat:32:26 (SymIdent "Liczba") (SymIdent "v"))),ICall inside standard library (ValIdent "%v_t_48") (Call inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent inside standard library (SymIdent "~cl_TopLevel") (SymIdent "intToString")) [VVal inside standard library (Int inside standard library) (ValIdent "%v_t_47")] []),INewStr ./play.lat:32:16 (ValIdent "%v_t_46") "Liczba{",ICall ./play.lat:32:16 (ValIdent "%v_t_49") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref ./play.lat:32:16 (Cl ./play.lat:32:16 (SymIdent "String"))) (ValIdent "%v_t_46"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_48")]),ICall ./play.lat:32:16 (ValIdent "%v_t_52") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_49"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_51")]),ISet ./play.lat:32:9 (ValIdent "%v___temp_9") (VVal ./play.lat:32:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_52")),ISet ./play.lat:32:9 (ValIdent "%v_return") (VVal ./play.lat:32:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v___temp_9")),IJmp ./play.lat:32:9 (LabIdent ".L_exit"),ILabel ./play.lat:31:5 (LabIdent ".L_exit"),IRet ./play.lat:31:5 (VVal ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:38:5 (Int ./play.lat:38:5) (QIdent ./play.lat:38:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:38:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_53"),Param ./play.lat:38:5 (Int ./play.lat:38:18) (ValIdent "%a_t_54"),Param ./play.lat:38:5 (Int ./play.lat:38:26) (ValIdent "%a_t_55")] [ILabel ./play.lat:38:5 (LabIdent ".L_entry"),ILoad ./play.lat:38:5 (ValIdent "%v_t_53") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_53")),ILoad ./play.lat:38:5 (ValIdent "%v_t_54") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Int ./play.lat:38:18)) 1 (ValIdent "%a_t_54")),ILoad ./play.lat:38:5 (ValIdent "%v_t_55") (PParam ./play.lat:38:5 (Ref ./play.lat:38:5 (Int ./play.lat:38:26)) 2 (ValIdent "%a_t_55")),INewStr ./play.lat:39:21 (ValIdent "%v_t_57") "Node.operator()",IVCall ./play.lat:39:9 (Call ./play.lat:39:9 (Bool inside standard library) (QIdent ./play.lat:39:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:39:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_57")] []),ISet ./play.lat:40:9 (ValIdent "%v___temp_10") (VInt ./play.lat:40:9 0),ISet ./play.lat:40:9 (ValIdent "%v_return") (VVal ./play.lat:40:9 (Int ./play.lat:40:16) (ValIdent "%v___temp_10")),IJmp ./play.lat:40:9 (LabIdent ".L_exit"),ILabel ./play.lat:38:5 (LabIdent ".L_exit"),IRet ./play.lat:38:5 (VVal ./play.lat:38:5 (Int ./play.lat:38:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:42:5 (Int ./play.lat:42:5) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:42:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_60")] [ILabel ./play.lat:42:5 (LabIdent ".L_entry"),ILoad ./play.lat:42:5 (ValIdent "%v_t_60") (PParam ./play.lat:42:5 (Ref ./play.lat:42:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_60")),INewStr ./play.lat:43:21 (ValIdent "%v_t_62") "Node.value()",IVCall ./play.lat:43:9 (Call ./play.lat:43:9 (Bool inside standard library) (QIdent ./play.lat:43:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:43:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_62")] []),ISet ./play.lat:48:9 (ValIdent "%v___temp_11") (VInt ./play.lat:48:9 0),ISet ./play.lat:48:9 (ValIdent "%v_return") (VVal ./play.lat:48:9 (Int ./play.lat:48:16) (ValIdent "%v___temp_11")),IJmp ./play.lat:48:9 (LabIdent ".L_exit"),ILabel ./play.lat:42:5 (LabIdent ".L_exit"),IRet ./play.lat:42:5 (VVal ./play.lat:42:5 (Int ./play.lat:42:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (QIdent ./play.lat:50:12 (SymIdent "Operator") (SymIdent "toString")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_65")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),ILoad ./play.lat:50:5 (ValIdent "%v_t_65") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_65")),INewStr ./play.lat:51:33 (ValIdent "%v_t_67") "?",ICall ./play.lat:51:16 (ValIdent "%v_t_68") (CallVirt ./play.lat:51:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:51:16 (SymIdent "Operator") (SymIdent "toStringFor")) [VVal ./play.lat:51:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_65"),VVal ./play.lat:51:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_67")]),ISet ./play.lat:51:9 (ValIdent "%v___temp_12") (VVal ./play.lat:51:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_t_68")),ISet ./play.lat:51:9 (ValIdent "%v_return") (VVal ./play.lat:51:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v___temp_12")),IJmp ./play.lat:51:9 (LabIdent ".L_exit"),ILabel ./play.lat:50:5 (LabIdent ".L_exit"),IRet ./play.lat:50:5 (VVal ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor")) [Param ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_69"),Param ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%a_t_70")] [ILabel ./play.lat:53:5 (LabIdent ".L_entry"),ILoad ./play.lat:53:5 (ValIdent "%v_t_69") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_69")),ILoad ./play.lat:53:5 (ValIdent "%v_t_70") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String")))) 1 (ValIdent "%a_t_70")),INewStr ./play.lat:54:90 (ValIdent "%v_t_85") "}",ILoad ./play.lat:54:67 (ValIdent "%v_t_82") (PFld ./play.lat:54:67 (Ref ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:54:67 (Cl ./play.lat:54:67 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:67 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:54:67 (ValIdent "%v_t_83") (CallVirt ./play.lat:54:67 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:67 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (ValIdent "%v_t_82")]),INewStr ./play.lat:54:62 (ValIdent "%v_t_80") " ",INewStr ./play.lat:54:51 (ValIdent "%v_t_77") " ",ILoad ./play.lat:54:29 (ValIdent "%v_t_73") (PFld ./play.lat:54:29 (Ref ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:54:29 (Cl ./play.lat:54:29 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:29 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:54:29 (ValIdent "%v_t_74") (CallVirt ./play.lat:54:29 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:29 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (ValIdent "%v_t_73")]),INewStr ./play.lat:54:16 (ValIdent "%v_t_72") "Operator{",ICall ./play.lat:54:16 (ValIdent "%v_t_75") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref ./play.lat:54:16 (Cl ./play.lat:54:16 (SymIdent "String"))) (ValIdent "%v_t_72"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_74")]),ICall ./play.lat:54:16 (ValIdent "%v_t_78") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_77")]),ICall ./play.lat:54:16 (ValIdent "%v_t_79") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_78"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_70")]),ICall ./play.lat:54:16 (ValIdent "%v_t_81") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_79"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_80")]),ICall ./play.lat:54:16 (ValIdent "%v_t_84") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_81"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_83")]),ICall ./play.lat:54:16 (ValIdent "%v_t_86") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_85")]),ISet ./play.lat:54:9 (ValIdent "%v___temp_13") (VVal ./play.lat:54:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_86")),ISet ./play.lat:54:9 (ValIdent "%v_return") (VVal ./play.lat:54:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v___temp_13")),IJmp ./play.lat:54:9 (LabIdent ".L_exit"),ILabel ./play.lat:53:5 (LabIdent ".L_exit"),IRet ./play.lat:53:5 (VVal ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:58:5 (Int ./play.lat:58:5) (QIdent ./play.lat:58:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:58:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_87"),Param ./play.lat:58:5 (Int ./play.lat:58:18) (ValIdent "%a_t_88"),Param ./play.lat:58:5 (Int ./play.lat:58:25) (ValIdent "%a_t_89")] [ILabel ./play.lat:58:5 (LabIdent ".L_entry"),ILoad ./play.lat:58:5 (ValIdent "%v_t_87") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_87")),ILoad ./play.lat:58:5 (ValIdent "%v_t_88") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:18)) 1 (ValIdent "%a_t_88")),ILoad ./play.lat:58:5 (ValIdent "%v_t_89") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:25)) 2 (ValIdent "%a_t_89")),INewStr ./play.lat:59:21 (ValIdent "%v_t_91") "Plus.operator()",IVCall ./play.lat:59:9 (Call ./play.lat:59:9 (Bool inside standard library) (QIdent ./play.lat:59:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:59:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_91")] []),IOp ./play.lat:60:18 (ValIdent "%v_t_93") (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_88")) (OpAdd ./play.lat:60:18) (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_89")),ISet ./play.lat:60:9 (ValIdent "%v___temp_14") (VVal ./play.lat:60:9 (Int ./play.lat:58:18) (ValIdent "%v_t_93")),ISet ./play.lat:60:9 (ValIdent "%v_return") (VVal ./play.lat:60:9 (Int ./play.lat:58:18) (ValIdent "%v___temp_14")),IJmp ./play.lat:60:9 (LabIdent ".L_exit"),ILabel ./play.lat:58:5 (LabIdent ".L_exit"),IRet ./play.lat:58:5 (VVal ./play.lat:58:5 (Int ./play.lat:58:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (QIdent ./play.lat:62:12 (SymIdent "Plus") (SymIdent "toString")) [Param ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_94")] [ILabel ./play.lat:62:5 (LabIdent ".L_entry"),ILoad ./play.lat:62:5 (ValIdent "%v_t_94") (PParam ./play.lat:62:5 (Ref ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_94")),INewStr ./play.lat:63:33 (ValIdent "%v_t_96") "+",ICall ./play.lat:63:16 (ValIdent "%v_t_97") (CallVirt ./play.lat:63:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:63:16 (SymIdent "Plus") (SymIdent "toStringFor")) [VVal ./play.lat:63:16 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%v_t_94"),VVal ./play.lat:63:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_96")]),ISet ./play.lat:63:9 (ValIdent "%v___temp_15") (VVal ./play.lat:63:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_t_97")),ISet ./play.lat:63:9 (ValIdent "%v_return") (VVal ./play.lat:63:9 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v___temp_15")),IJmp ./play.lat:63:9 (LabIdent ".L_exit"),ILabel ./play.lat:62:5 (LabIdent ".L_exit"),IRet ./play.lat:62:5 (VVal ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_28",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_28",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_32",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_32",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_32",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_32",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_32",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_32",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_33",(2,Ref () (Int ())))], out = [("%a_t_33",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_36",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_36",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_36",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_36",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_36",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_36",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_41",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_41",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_41",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_41",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_41",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_44",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_44",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_52",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_52",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_52",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_52",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_52",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_52",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_65",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_65",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_68",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_68",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_68",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_70",(3,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_70",(2,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_86",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_86",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_86",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_86",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_86",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_86",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_88",(2,Ref () (Int ()))),("%a_t_89",(3,Ref () (Int ())))], out = [("%a_t_88",(1,Ref () (Int ()))),("%a_t_89",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_93",(4,Int ()))], out = [("%v_t_93",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_93",(2,Int ()))], out = [("%v_t_93",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_93",(0,Int ()))], out = [], use = [("%v_t_93",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Ref () (Cl () (SymIdent "Plus")))))], out = [("%a_t_94",(1,Ref () (Ref () (Cl () (SymIdent "Plus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_97",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_97",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_97",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_97",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_97",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_97",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_28",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_28",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_32",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_32",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_32",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_32",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_32",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_32",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_33",(2,Ref () (Int ())))], out = [("%a_t_33",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_36",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_36",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_36",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_36",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_36",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_36",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_41",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_41",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_41",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_41",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_41",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_44",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_44",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_52",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_52",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_52",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_52",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_52",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_52",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_65",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_65",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_68",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_68",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_68",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_70",(3,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_70",(2,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_86",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_86",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_86",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_86",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_86",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_86",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_88",(2,Ref () (Int ()))),("%a_t_89",(3,Ref () (Int ())))], out = [("%a_t_88",(1,Ref () (Int ()))),("%a_t_89",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_93",(4,Int ()))], out = [("%v_t_93",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_93",(2,Int ()))], out = [("%v_t_93",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_93",(0,Int ()))], out = [], use = [("%v_t_93",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Ref () (Cl () (SymIdent "Plus")))))], out = [("%a_t_94",(1,Ref () (Ref () (Cl () (SymIdent "Plus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_97",(4,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_97",(3,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_97",(2,Ref () (Cl () (SymIdent "String"))))], out = [("%v_t_97",(1,Ref () (Cl () (SymIdent "String"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_97",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_97",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [%v_t_19 (reg preference: CalleeSaved) (RBX): ["%v_t_21","~arg_3_RSI"]
%v_t_21 (reg preference: CallerSaved) (RAX): ["%v_t_19","~arg_2_RDI"]
%v_t_22 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): ["%v_t_21"]
~arg_3_RSI (reg preference: CallerSaved) (RSI): ["%v_t_19"]
~arg_4_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_27 (reg preference: CallerSaved) (RDI): ["%a_t_28"]
%a_t_28 (reg preference: CallerSaved) (RSI): ["%a_t_27","%v_t_27"]
%v_t_27 (reg preference: CalleeSaved) (R12): ["%a_t_28","%v_t_28","%v_t_29","%v_t_30"]
%v_t_28 (reg preference: CalleeSaved) (RBX): ["%v_t_27","%v_t_29","%v_t_30"]
%v_t_29 (reg preference: CallerSaved) (RAX): ["%v_t_27","%v_t_28"]
%v_t_30 (reg preference: CallerSaved) (RAX): ["%v_t_27","%v_t_28"]
%v_t_32 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_33 (reg preference: CallerSaved) (RDI): []
%v_t_33 (reg preference: CallerSaved) (RCX): ["%v_t_34"]
%v_t_34 (reg preference: CallerSaved) (RAX): ["%v_t_33"]
%v_t_36 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,,%v_t_41 (reg preference: CallerSaved) (RAX): []
,,%a_t_44 (reg preference: CallerSaved) (RDI): []
%v_t_44 (reg preference: CallerSaved) (RAX): ["%v_t_51"]
%v_t_46 (reg preference: CallerSaved) (RCX): ["%v_t_48","%v_t_51","~arg_2_RSI"]
%v_t_47 (reg preference: CallerSaved) (RAX): ["%v_t_51"]
%v_t_48 (reg preference: CallerSaved) (RAX): ["%v_t_46","%v_t_51","~arg_1_RDI"]
%v_t_49 (reg preference: CallerSaved) (RAX): ["%v_t_51","~arg_4_RSI"]
%v_t_51 (reg preference: CalleeSaved) (RBX): ["%v_t_44","%v_t_46","%v_t_47","%v_t_48","%v_t_49","~arg_3_RDI"]
%v_t_52 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): ["%v_t_48"]
~arg_2_RSI (reg preference: CallerSaved) (RSI): ["%v_t_46"]
~arg_3_RDI (reg preference: CallerSaved) (RDI): ["%v_t_51"]
~arg_4_RSI (reg preference: CallerSaved) (RSI): ["%v_t_49"]
,%v_t_57 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_t_62 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_65 (reg preference: CallerSaved) (RDI): []
%v_t_65 (reg preference: CallerSaved) (RCX): ["%v_t_67","~arg_1_RSI"]
%v_t_67 (reg preference: CallerSaved) (RAX): ["%v_t_65","~arg_0_RDI"]
%v_t_68 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): ["%v_t_67"]
~arg_1_RSI (reg preference: CallerSaved) (RSI): ["%v_t_65"]
,%a_t_69 (reg preference: CallerSaved) (RDI): ["%a_t_70"]
%a_t_70 (reg preference: CallerSaved) (RSI): ["%a_t_69","%v_t_69"]
%v_t_69 (reg preference: CalleeSaved) (R15): ["%a_t_70","%v_t_70","%v_t_80","%v_t_82","%v_t_83","%v_t_85"]
%v_t_70 (reg preference: CalleeSaved) (RBX): ["%v_t_69","%v_t_72","%v_t_73","%v_t_74","%v_t_75","%v_t_78","%v_t_80","%v_t_82","%v_t_83","%v_t_85","~arg_6_RDI"]
%v_t_72 (reg preference: CallerSaved) (RCX): ["%v_t_70","%v_t_74","%v_t_80","%v_t_83","%v_t_85","~arg_3_RSI"]
%v_t_73 (reg preference: CallerSaved) (RAX): ["%v_t_70","%v_t_80","%v_t_83","%v_t_85"]
%v_t_74 (reg preference: CallerSaved) (RAX): ["%v_t_70","%v_t_72","%v_t_80","%v_t_83","%v_t_85","~arg_2_RDI"]
%v_t_75 (reg preference: CallerSaved) (RAX): ["%v_t_70","%v_t_80","%v_t_83","%v_t_85","~arg_5_RSI"]
%v_t_78 (reg preference: CallerSaved) (RAX): ["%v_t_70","%v_t_80","%v_t_83","%v_t_85","~arg_7_RSI"]
%v_t_79 (reg preference: CallerSaved) (RAX): ["%v_t_80","%v_t_83","%v_t_85","~arg_9_RSI"]
%v_t_80 (reg preference: CalleeSaved) (R12): ["%v_t_69","%v_t_70","%v_t_72","%v_t_73","%v_t_74","%v_t_75","%v_t_78","%v_t_79","%v_t_83","%v_t_85","~arg_4_RDI","~arg_8_RDI"]
%v_t_81 (reg preference: CallerSaved) (RAX): ["%v_t_83","%v_t_85","~arg_11_RSI"]
%v_t_82 (reg preference: CallerSaved) (RAX): ["%v_t_69","%v_t_70","%v_t_85"]
%v_t_83 (reg preference: CalleeSaved) (R13): ["%v_t_69","%v_t_70","%v_t_72","%v_t_73","%v_t_74","%v_t_75","%v_t_78","%v_t_79","%v_t_80","%v_t_81","%v_t_85","~arg_10_RDI"]
%v_t_84 (reg preference: CallerSaved) (RAX): ["%v_t_85","~arg_13_RSI"]
%v_t_85 (reg preference: CalleeSaved) (R14): ["%v_t_69","%v_t_70","%v_t_72","%v_t_73","%v_t_74","%v_t_75","%v_t_78","%v_t_79","%v_t_80","%v_t_81","%v_t_82","%v_t_83","%v_t_84","~arg_12_RDI"]
%v_t_86 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_10_RDI (reg preference: CallerSaved) (RDI): ["%v_t_83"]
~arg_11_RSI (reg preference: CallerSaved) (RSI): ["%v_t_81"]
~arg_12_RDI (reg preference: CallerSaved) (RDI): ["%v_t_85"]
~arg_13_RSI (reg preference: CallerSaved) (RSI): ["%v_t_84"]
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): ["%v_t_74"]
~arg_3_RSI (reg preference: CallerSaved) (RSI): ["%v_t_72"]
~arg_4_RDI (reg preference: CallerSaved) (RDI): ["%v_t_80"]
~arg_5_RSI (reg preference: CallerSaved) (RSI): ["%v_t_75"]
~arg_6_RDI (reg preference: CallerSaved) (RDI): ["%v_t_70"]
~arg_7_RSI (reg preference: CallerSaved) (RSI): ["%v_t_78"]
~arg_8_RDI (reg preference: CallerSaved) (RDI): ["%v_t_80"]
~arg_9_RSI (reg preference: CallerSaved) (RSI): ["%v_t_79"]
,%a_t_88 (reg preference: CallerSaved) (RSI): ["%a_t_89"]
%a_t_89 (reg preference: CallerSaved) (RDX): ["%a_t_88","%v_t_88"]
%v_t_88 (reg preference: CalleeSaved) (R12): ["%a_t_89","%v_t_89","%v_t_91"]
%v_t_89 (reg preference: CalleeSaved) (RBX): ["%v_t_88","%v_t_91"]
%v_t_91 (reg preference: CallerSaved) (RAX): ["%v_t_88","%v_t_89"]
%v_t_93 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_94 (reg preference: CallerSaved) (RDI): []
%v_t_94 (reg preference: CallerSaved) (RCX): ["%v_t_96","~arg_1_RSI"]
%v_t_96 (reg preference: CallerSaved) (RAX): ["%v_t_94","~arg_0_RDI"]
%v_t_97 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): ["%v_t_96"]
~arg_1_RSI (reg preference: CallerSaved) (RSI): ["%v_t_94"]
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  %v_t_23 := Node & %v_t_22;
  callvirt int Node.value (Node & %v_t_23);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  %v_t_31 := Operator & %v_t_30;
  %v___temp_1 := Node & %v_t_27;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_31 Operator.left;
  %v___temp_2 := Node & %v_t_28;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_31 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_31);
  %v___temp_3 := Node & %v_t_32;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  %v_t_35 := Liczba & %v_t_34;
  %v___temp_4 := int %v_t_33;
  store int %v___temp_4 into int & fldptr Liczba %v_t_35 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_35);
  %v___temp_5 := Node & %v_t_36;
  %v_return := Node & %v___temp_5;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  %v_t_37 := load Node & & param 0 %a_t_37;
  %v___temp_6 := 0;
  %v_return := int %v___temp_6;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Node.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  %v_t_39 := load Node & & param 0 %a_t_39;
  %v_t_41 := newstr "Node{}";
  %v___temp_7 := String & %v_t_41;
  %v_return := String & %v___temp_7;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  %v_t_42 := load Liczba & & param 0 %a_t_42;
  %v___temp_8 := 42;
  %v_return := int %v___temp_8;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  %v___temp_9 := String & %v_t_52;
  %v_return := String & %v___temp_9;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  %v_t_53 := load Operator & & param 0 %a_t_53;
  %v_t_54 := load int & param 1 %a_t_54;
  %v_t_55 := load int & param 2 %a_t_55;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  %v___temp_10 := 0;
  %v_return := int %v___temp_10;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  %v_t_60 := load Operator & & param 0 %a_t_60;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  %v___temp_11 := 0;
  %v_return := int %v___temp_11;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  %v___temp_12 := String & %v_t_68;
  %v_return := String & %v___temp_12;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Operator.toStringFor:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_77 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_77);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  %v___temp_13 := String & %v_t_86;
  %v_return := String & %v___temp_13;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  %v_t_87 := load Plus & & param 0 %a_t_87;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  %v___temp_14 := int %v_t_93;
  %v_return := int %v___temp_14;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.toString:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  %v___temp_15 := String & %v_t_97;
  %v_return := String & %v___temp_15;
  jump .L_exit;
.L_exit:
  return String & %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  callvirt int Node.value (Node & %v_t_22);
  endphi;
  return 0;
]

CFG for ~cl_TopLevel.plus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  endphi;
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  store Node & %v_t_27 into Node & & fldptr Operator & %v_t_30 Operator.left;
  store Node & %v_t_28 into Node & & fldptr Operator & %v_t_30 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_30);
  endphi;
  return Node & %v_t_32;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  endphi;
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  store int %v_t_33 into int & fldptr Liczba & %v_t_34 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_34);
  endphi;
  return Node & %v_t_36;
]

CFG for Node.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  endphi;
  endphi;
  return 0;
]

CFG for Node.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  endphi;
  %v_t_41 := newstr "Node{}";
  endphi;
  return String & %v_t_41;
]

CFG for Liczba.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  endphi;
  endphi;
  return 42;
]

CFG for Liczba.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  endphi;
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  endphi;
  return String & %v_t_52;
]

CFG for Operator.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  endphi;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  endphi;
  return 0;
]

CFG for Operator.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  endphi;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  endphi;
  return 0;
]

CFG for Operator.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  endphi;
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  endphi;
  return String & %v_t_68;
]

CFG for Operator.toStringFor:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  endphi;
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_80);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  endphi;
  return String & %v_t_86;
]

CFG for Plus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  endphi;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  endphi;
  return int %v_t_93;
]

CFG for Plus.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  endphi;
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  endphi;
  return String & %v_t_97;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_19 := call Node & ~cl_TopLevel.liczba (69);
  %v_t_21 := call Node & ~cl_TopLevel.liczba (42);
  %v_t_22 := call Node & ~cl_TopLevel.plus (Node & %v_t_19, Node & %v_t_21);
  callvirt int Node.value (Node & %v_t_22);
  endphi;
  return 0;
]

CFG for ~cl_TopLevel.plus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_28",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_28",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_27",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_32",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_32",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_27, Node & %a_t_28): [
.L_entry:
  endphi;
  %v_t_27 := load Node & & param 0 %a_t_27;
  %v_t_28 := load Node & & param 1 %a_t_28;
  %v_t_29 := new Plus;
  %v_t_30 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_29);
  store Node & %v_t_27 into Node & & fldptr Operator & %v_t_30 Operator.left;
  store Node & %v_t_28 into Node & & fldptr Operator & %v_t_30 Operator.right;
  %v_t_32 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_30);
  endphi;
  return Node & %v_t_32;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_33",(2,Ref () (Int ())))], out = [("%a_t_33",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_36",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_36",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_33): [
.L_entry:
  endphi;
  %v_t_33 := load int & param 0 %a_t_33;
  %v_t_34 := new Liczba;
  store int %v_t_33 into int & fldptr Liczba & %v_t_34 Liczba.v;
  %v_t_36 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_34);
  endphi;
  return Node & %v_t_36;
]

CFG for Node.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_37): [
.L_entry:
  endphi;
  endphi;
  return 0;
]

CFG for Node.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_41",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_41",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Node.toString (Node & %a_t_39): [
.L_entry:
  endphi;
  %v_t_41 := newstr "Node{}";
  endphi;
  return String & %v_t_41;
]

CFG for Liczba.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_42): [
.L_entry:
  endphi;
  endphi;
  return 42;
]

CFG for Liczba.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_44",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_44",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_52",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_52",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Liczba.toString (Liczba & %a_t_44): [
.L_entry:
  endphi;
  %v_t_44 := load Liczba & & param 0 %a_t_44;
  %v_t_51 := newstr "}";
  %v_t_47 := load int & fldptr Liczba %v_t_44 Liczba.v;
  %v_t_48 := call String & ~cl_TopLevel.intToString (int %v_t_47);
  %v_t_46 := newstr "Liczba{";
  %v_t_49 := callvirt String & String.concat (String & %v_t_46, String & %v_t_48);
  %v_t_52 := callvirt String & String.concat (String & %v_t_49, String & %v_t_51);
  endphi;
  return String & %v_t_52;
]

CFG for Operator.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_53, int %a_t_54, int %a_t_55): [
.L_entry:
  endphi;
  %v_t_57 := newstr "Node.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_57);
  endphi;
  return 0;
]

CFG for Operator.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.value (Operator & %a_t_60): [
.L_entry:
  endphi;
  %v_t_62 := newstr "Node.value()";
  call boolean ~cl_TopLevel.printString (String & %v_t_62);
  endphi;
  return 0;
]

CFG for Operator.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_65",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_65",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toString (Operator & %a_t_65): [
.L_entry:
  endphi;
  %v_t_65 := load Operator & & param 0 %a_t_65;
  %v_t_67 := newstr "?";
  %v_t_68 := callvirt String & Operator.toStringFor (Operator & %v_t_65, String & %v_t_67);
  endphi;
  return String & %v_t_68;
]

CFG for Operator.toStringFor:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_70",(3,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_70",(2,Ref () (Ref () (Cl () (SymIdent "String"))))),("%a_t_69",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_86",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_86",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Operator.toStringFor (Operator & %a_t_69, String & %a_t_70): [
.L_entry:
  endphi;
  %v_t_69 := load Operator & & param 0 %a_t_69;
  %v_t_70 := load String & & param 1 %a_t_70;
  %v_t_85 := newstr "}";
  %v_t_82 := load Node & & fldptr Operator %v_t_69 Operator.right;
  %v_t_83 := callvirt String & Node.toString (Node & %v_t_82);
  %v_t_80 := newstr " ";
  %v_t_73 := load Node & & fldptr Operator %v_t_69 Operator.left;
  %v_t_74 := callvirt String & Node.toString (Node & %v_t_73);
  %v_t_72 := newstr "Operator{";
  %v_t_75 := callvirt String & String.concat (String & %v_t_72, String & %v_t_74);
  %v_t_78 := callvirt String & String.concat (String & %v_t_75, String & %v_t_80);
  %v_t_79 := callvirt String & String.concat (String & %v_t_78, String & %v_t_70);
  %v_t_81 := callvirt String & String.concat (String & %v_t_79, String & %v_t_80);
  %v_t_84 := callvirt String & String.concat (String & %v_t_81, String & %v_t_83);
  %v_t_86 := callvirt String & String.concat (String & %v_t_84, String & %v_t_85);
  endphi;
  return String & %v_t_86;
]

CFG for Plus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_88",(2,Ref () (Int ()))),("%a_t_89",(3,Ref () (Int ())))], out = [("%a_t_88",(1,Ref () (Int ()))),("%a_t_89",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_93",(0,Int ()))], out = [], use = [("%v_t_93",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_87, int %a_t_88, int %a_t_89): [
.L_entry:
  endphi;
  %v_t_88 := load int & param 1 %a_t_88;
  %v_t_89 := load int & param 2 %a_t_89;
  %v_t_91 := newstr "Plus.operator()";
  call boolean ~cl_TopLevel.printString (String & %v_t_91);
  %v_t_93 := int %v_t_88 + int %v_t_89;
  endphi;
  return int %v_t_93;
]

CFG for Plus.toString:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Ref () (Cl () (SymIdent "Plus")))))], out = [("%a_t_94",(1,Ref () (Ref () (Cl () (SymIdent "Plus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_97",(0,Ref () (Cl () (SymIdent "String"))))], out = [], use = [("%v_t_97",Ref () (Cl () (SymIdent "String")))], kill = []
Code: 
.method String & Plus.toString (Plus & %a_t_94): [
.L_entry:
  endphi;
  %v_t_94 := load Plus & & param 0 %a_t_94;
  %v_t_96 := newstr "+";
  %v_t_97 := callvirt String & Plus.toStringFor (Plus & %v_t_94, String & %v_t_96);
  endphi;
  return String & %v_t_97;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] COMPL_ DONE./play.lat

CompiledProg ./play.lat:1:1 (Meta ./play.lat:1:1 [ClDef inside standard library (SymIdent "Array") [SymIdent "Array",SymIdent "Object"] [FldDef inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "Object"))) (SymIdent "elements"),FldDef inside standard library (Int inside standard library) (SymIdent "length"),FldDef inside standard library (Int inside standard library) (SymIdent "elementSize")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Array") (SymIdent "toString"))],ClDef ./play.lat:26:7 (SymIdent "Liczba") [SymIdent "Liczba",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:27:9 (Int ./play.lat:27:5) (SymIdent "v")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:28:9 "Node" (FType ./play.lat:28:9 (Int ./play.lat:28:5) []) (QIdent ./play.lat:28:9 (SymIdent "Liczba") (SymIdent "value")),MthdDef ./play.lat:31:12 "Object" (FType ./play.lat:31:12 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) []) (QIdent ./play.lat:31:12 (SymIdent "Liczba") (SymIdent "toString"))],ClDef ./play.lat:18:7 (SymIdent "Node") [SymIdent "Node",SymIdent "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:19:9 "Node" (FType ./play.lat:19:9 (Int ./play.lat:19:5) []) (QIdent ./play.lat:19:9 (SymIdent "Node") (SymIdent "value")),MthdDef ./play.lat:22:12 "Object" (FType ./play.lat:22:12 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) []) (QIdent ./play.lat:22:12 (SymIdent "Node") (SymIdent "toString"))],ClDef inside standard library (SymIdent "Object") [SymIdent "Object"] [] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString"))],ClDef ./play.lat:35:7 (SymIdent "Operator") [SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:36:10 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:37:10 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:38:9 "Operator" (FType ./play.lat:38:9 (Int ./play.lat:38:5) [Int ./play.lat:38:18,Int ./play.lat:38:26]) (QIdent ./play.lat:38:9 (SymIdent "Operator") (SymIdent "operator")),MthdDef ./play.lat:42:9 "Node" (FType ./play.lat:42:9 (Int ./play.lat:42:5) []) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:50:12 "Object" (FType ./play.lat:50:12 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) []) (QIdent ./play.lat:50:12 (SymIdent "Operator") (SymIdent "toString")),MthdDef ./play.lat:53:12 "Operator" (FType ./play.lat:53:12 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) [Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))]) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor"))],ClDef ./play.lat:57:7 (SymIdent "Plus") [SymIdent "Plus",SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:36:10 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:37:10 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:42:9 "Node" (FType ./play.lat:42:9 (Int ./play.lat:42:5) []) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:53:12 "Operator" (FType ./play.lat:53:12 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) [Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))]) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor")),MthdDef ./play.lat:58:9 "Operator" (FType ./play.lat:58:9 (Int ./play.lat:58:5) [Int ./play.lat:58:18,Int ./play.lat:58:25]) (QIdent ./play.lat:58:9 (SymIdent "Plus") (SymIdent "operator")),MthdDef ./play.lat:62:12 "Object" (FType ./play.lat:62:12 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) []) (QIdent ./play.lat:62:12 (SymIdent "Plus") (SymIdent "toString"))],ClDef inside standard library (SymIdent "String") [SymIdent "String",SymIdent "Object"] [] [MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) [Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "charAt")),MthdDef inside standard library "Object" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "equals")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "concat")),MthdDef inside standard library "String" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "startsWith")),MthdDef inside standard library "String" (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "endsWith")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Arr inside standard library (Int inside standard library))) []) (QIdent inside standard library (SymIdent "String") (SymIdent "getBytes")),MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String")),Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "indexOf")),MthdDef inside standard library "String" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "String") (SymIdent "length")),MthdDef inside standard library "String" (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) [Int inside standard library,Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "substring")),MthdDef inside standard library "Object" (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "String") (SymIdent "toString")),MthdDef inside standard library "Object" (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "String") (SymIdent "getHashCode"))],ClDef ./play.lat:1:1 (SymIdent "~cl_TopLevel") [] [] [MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Array"))) []) (QIdent ./play.lat:1:1 (SymIdent "Array") (SymIdent "toString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))) []) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "equals")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "equals")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "getHashCode")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "toString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "substring")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "length")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String")),Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "indexOf")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "getBytes")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "endsWith")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "startsWith")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String")),Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "concat")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "charAt")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printInt")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printByte")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printBoolean")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Array"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printBinArray")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "byteToString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "boolToString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "intToString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "print")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Bool ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "error")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "readInt")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "readString")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object")),Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")),MthdDef ./play.lat:1:1 "" (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")),MthdDef ./play.lat:7:1 "" (FType ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) [Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node")),Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))]) (QIdent ./play.lat:7:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")),MthdDef ./play.lat:13:1 "" (FType ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) [Int ./play.lat:13:13]) (QIdent ./play.lat:13:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")),MthdDef ./play.lat:19:5 "" (FType ./play.lat:19:5 (Int ./play.lat:19:5) [Ref  (Cl  (SymIdent "Node"))]) (QIdent ./play.lat:19:9 (SymIdent "Node") (SymIdent "value")),MthdDef ./play.lat:22:5 "" (FType ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) [Ref  (Cl  (SymIdent "Node"))]) (QIdent ./play.lat:22:12 (SymIdent "Node") (SymIdent "toString")),MthdDef ./play.lat:28:5 "" (FType ./play.lat:28:5 (Int ./play.lat:28:5) [Ref  (Cl  (SymIdent "Liczba"))]) (QIdent ./play.lat:28:9 (SymIdent "Liczba") (SymIdent "value")),MthdDef ./play.lat:31:5 "" (FType ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) [Ref  (Cl  (SymIdent "Liczba"))]) (QIdent ./play.lat:31:12 (SymIdent "Liczba") (SymIdent "toString")),MthdDef ./play.lat:38:5 "" (FType ./play.lat:38:5 (Int ./play.lat:38:5) [Ref  (Cl  (SymIdent "Operator")),Int ./play.lat:38:18,Int ./play.lat:38:26]) (QIdent ./play.lat:38:9 (SymIdent "Operator") (SymIdent "operator")),MthdDef ./play.lat:42:5 "" (FType ./play.lat:42:5 (Int ./play.lat:42:5) [Ref  (Cl  (SymIdent "Operator"))]) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:50:5 "" (FType ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) [Ref  (Cl  (SymIdent "Operator"))]) (QIdent ./play.lat:50:12 (SymIdent "Operator") (SymIdent "toString")),MthdDef ./play.lat:53:5 "" (FType ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) [Ref  (Cl  (SymIdent "Operator")),Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))]) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor")),MthdDef ./play.lat:58:5 "" (FType ./play.lat:58:5 (Int ./play.lat:58:5) [Ref  (Cl  (SymIdent "Plus")),Int ./play.lat:58:18,Int ./play.lat:58:25]) (QIdent ./play.lat:58:9 (SymIdent "Plus") (SymIdent "operator")),MthdDef ./play.lat:62:5 "" (FType ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) [Ref  (Cl  (SymIdent "Plus"))]) (QIdent ./play.lat:62:12 (SymIdent "Plus") (SymIdent "toString"))]]) [([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:1:1,ICall ./play.lat:2:19 (ValIdent "%v_t_19") (Call ./play.lat:2:19 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:19 69] []),ICall ./play.lat:2:31 (ValIdent "%v_t_21") (Call ./play.lat:2:31 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:2:31 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:31 42] []),ICall ./play.lat:2:14 (ValIdent "%v_t_22") (Call ./play.lat:2:14 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%v_t_19"),VVal ./play.lat:2:14 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%v_t_21")] []),IVCall ./play.lat:4:15 (CallVirt ./play.lat:4:15 (Int ./play.lat:19:5) (QIdent ./play.lat:4:15 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:4:15 (Ref ./play.lat:4:15 (Cl ./play.lat:4:15 (SymIdent "Node"))) (ValIdent "%v_t_22")]),IEndPhi ./play.lat:1:1,IRet ./play.lat:1:1 (VInt ./play.lat:1:1 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_19",RBX),(ValIdent "%v_t_21",RAX),(ValIdent "%v_t_22",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI),(ValIdent "~arg_3_RSI",RSI),(ValIdent "~arg_4_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node"))) (ValIdent "%a_t_27"),Param ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node"))) (ValIdent "%a_t_28")] [ILabel ./play.lat:7:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:7:1,ILoad ./play.lat:7:1 (ValIdent "%v_t_27") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:11 (Cl ./play.lat:7:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_27")),ILoad ./play.lat:7:1 (ValIdent "%v_t_28") (PParam ./play.lat:7:1 (Ref ./play.lat:7:1 (Ref ./play.lat:7:20 (Cl ./play.lat:7:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_28")),INew ./play.lat:8:20 (ValIdent "%v_t_29") (Cl ./play.lat:8:20 (SymIdent "Plus")),ICall ./play.lat:8:5 (ValIdent "%v_t_30") (Call ./play.lat:8:5 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (QIdent ./play.lat:8:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:8:5 (Ref ./play.lat:8:24 (Cl ./play.lat:8:24 (SymIdent "Plus"))) (ValIdent "%v_t_29")] [LabIdent "_class_Operator"]),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Node"))) (ValIdent "%v_t_27")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Ref ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator"))) (ValIdent "%v_t_30")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "left"))),IStore ./play.lat:10:5 (VVal ./play.lat:10:5 (Ref ./play.lat:10:5 (Cl ./play.lat:10:5 (SymIdent "Node"))) (ValIdent "%v_t_28")) (PFld ./play.lat:10:5 (Ref ./play.lat:10:5 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:10:5 (Ref ./play.lat:10:5 (Cl ./play.lat:10:5 (SymIdent "Operator"))) (ValIdent "%v_t_30")) (QIdent ./play.lat:10:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:7:1 (ValIdent "%v_t_32") (Call ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (QIdent ./play.lat:7:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Operator"))) (ValIdent "%v_t_30")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:7:1,IRet ./play.lat:7:1 (VVal ./play.lat:7:1 (Ref ./play.lat:7:1 (Cl ./play.lat:7:1 (SymIdent "Node"))) (ValIdent "%v_t_32"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_27",RDI),(ValIdent "%a_t_28",RSI),(ValIdent "%v_t_27",R12),(ValIdent "%v_t_28",RBX),(ValIdent "%v_t_29",RAX),(ValIdent "%v_t_30",RAX),(ValIdent "%v_t_32",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:13:1 (Int ./play.lat:13:13) (ValIdent "%a_t_33")] [ILabel ./play.lat:13:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:13:1,ILoad ./play.lat:13:1 (ValIdent "%v_t_33") (PParam ./play.lat:13:1 (Ref ./play.lat:13:1 (Int ./play.lat:13:13)) 0 (ValIdent "%a_t_33")),INew ./play.lat:14:18 (ValIdent "%v_t_34") (Cl ./play.lat:14:18 (SymIdent "Liczba")),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Int ./play.lat:15:5) (ValIdent "%v_t_33")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Int ./play.lat:27:5)) (VVal ./play.lat:15:5 (Ref ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Liczba"))) (ValIdent "%v_t_34")) (QIdent ./play.lat:15:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:13:1 (ValIdent "%v_t_36") (Call ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (QIdent ./play.lat:13:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Liczba"))) (ValIdent "%v_t_34")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:13:1,IRet ./play.lat:13:1 (VVal ./play.lat:13:1 (Ref ./play.lat:13:1 (Cl ./play.lat:13:1 (SymIdent "Node"))) (ValIdent "%v_t_36"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_33",RDI),(ValIdent "%v_t_33",RCX),(ValIdent "%v_t_34",RAX),(ValIdent "%v_t_36",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:19:5 (Int ./play.lat:19:5) (QIdent ./play.lat:19:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:19:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_37")] [ILabel ./play.lat:19:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:19:5,IEndPhi ./play.lat:19:5,IRet ./play.lat:19:5 (VInt ./play.lat:19:5 0)],RegAlloc {regAlloc = fromList [], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:22:12 (SymIdent "Node") (SymIdent "toString")) [Param ./play.lat:22:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_39")] [ILabel ./play.lat:22:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:22:5,INewStr ./play.lat:23:16 (ValIdent "%v_t_41") "Node{}",IEndPhi ./play.lat:22:5,IRet ./play.lat:22:5 (VVal ./play.lat:22:5 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (ValIdent "%v_t_41"))],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_41",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:28:5 (Int ./play.lat:28:5) (QIdent ./play.lat:28:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:28:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_42")] [ILabel ./play.lat:28:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:28:5,IEndPhi ./play.lat:28:5,IRet ./play.lat:28:5 (VInt ./play.lat:28:5 42)],RegAlloc {regAlloc = fromList [], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (QIdent ./play.lat:31:12 (SymIdent "Liczba") (SymIdent "toString")) [Param ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_44")] [ILabel ./play.lat:31:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:31:5,ILoad ./play.lat:31:5 (ValIdent "%v_t_44") (PParam ./play.lat:31:5 (Ref ./play.lat:31:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_44")),INewStr ./play.lat:32:33 (ValIdent "%v_t_51") "}",ILoad ./play.lat:32:26 (ValIdent "%v_t_47") (PFld ./play.lat:32:26 (Ref ./play.lat:32:26 (Int ./play.lat:27:5)) (VVal ./play.lat:32:26 (Cl ./play.lat:32:26 (SymIdent "Liczba")) (ValIdent "%v_t_44")) (QIdent ./play.lat:32:26 (SymIdent "Liczba") (SymIdent "v"))),ICall inside standard library (ValIdent "%v_t_48") (Call inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent inside standard library (SymIdent "~cl_TopLevel") (SymIdent "intToString")) [VVal inside standard library (Int inside standard library) (ValIdent "%v_t_47")] []),INewStr ./play.lat:32:16 (ValIdent "%v_t_46") "Liczba{",ICall ./play.lat:32:16 (ValIdent "%v_t_49") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref ./play.lat:32:16 (Cl ./play.lat:32:16 (SymIdent "String"))) (ValIdent "%v_t_46"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_48")]),ICall ./play.lat:32:16 (ValIdent "%v_t_52") (CallVirt ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:32:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_49"),VVal ./play.lat:32:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_51")]),IEndPhi ./play.lat:31:5,IRet ./play.lat:31:5 (VVal ./play.lat:31:5 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "String"))) (ValIdent "%v_t_52"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_44",RDI),(ValIdent "%v_t_44",RAX),(ValIdent "%v_t_46",RCX),(ValIdent "%v_t_47",RAX),(ValIdent "%v_t_48",RAX),(ValIdent "%v_t_49",RAX),(ValIdent "%v_t_51",RBX),(ValIdent "%v_t_52",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RSI",RSI),(ValIdent "~arg_3_RDI",RDI),(ValIdent "~arg_4_RSI",RSI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:38:5 (Int ./play.lat:38:5) (QIdent ./play.lat:38:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:38:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_53"),Param ./play.lat:38:5 (Int ./play.lat:38:18) (ValIdent "%a_t_54"),Param ./play.lat:38:5 (Int ./play.lat:38:26) (ValIdent "%a_t_55")] [ILabel ./play.lat:38:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:38:5,INewStr ./play.lat:39:21 (ValIdent "%v_t_57") "Node.operator()",IVCall ./play.lat:39:9 (Call ./play.lat:39:9 (Bool inside standard library) (QIdent ./play.lat:39:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:39:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_57")] []),IEndPhi ./play.lat:38:5,IRet ./play.lat:38:5 (VInt ./play.lat:38:5 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_57",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:42:5 (Int ./play.lat:42:5) (QIdent ./play.lat:42:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:42:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_60")] [ILabel ./play.lat:42:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:42:5,INewStr ./play.lat:43:21 (ValIdent "%v_t_62") "Node.value()",IVCall ./play.lat:43:9 (Call ./play.lat:43:9 (Bool inside standard library) (QIdent ./play.lat:43:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:43:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_62")] []),IEndPhi ./play.lat:42:5,IRet ./play.lat:42:5 (VInt ./play.lat:42:5 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_62",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (QIdent ./play.lat:50:12 (SymIdent "Operator") (SymIdent "toString")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_65")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:50:5,ILoad ./play.lat:50:5 (ValIdent "%v_t_65") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_65")),INewStr ./play.lat:51:33 (ValIdent "%v_t_67") "?",ICall ./play.lat:51:16 (ValIdent "%v_t_68") (CallVirt ./play.lat:51:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:51:16 (SymIdent "Operator") (SymIdent "toStringFor")) [VVal ./play.lat:51:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_65"),VVal ./play.lat:51:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_67")]),IEndPhi ./play.lat:50:5,IRet ./play.lat:50:5 (VVal ./play.lat:50:5 (Ref ./play.lat:50:5 (Cl ./play.lat:50:5 (SymIdent "String"))) (ValIdent "%v_t_68"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_65",RDI),(ValIdent "%v_t_65",RCX),(ValIdent "%v_t_67",RAX),(ValIdent "%v_t_68",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RSI",RSI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:53:12 (SymIdent "Operator") (SymIdent "toStringFor")) [Param ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_69"),Param ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%a_t_70")] [ILabel ./play.lat:53:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:53:5,ILoad ./play.lat:53:5 (ValIdent "%v_t_69") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_69")),ILoad ./play.lat:53:5 (ValIdent "%v_t_70") (PParam ./play.lat:53:5 (Ref ./play.lat:53:5 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String")))) 1 (ValIdent "%a_t_70")),INewStr ./play.lat:54:90 (ValIdent "%v_t_85") "}",ILoad ./play.lat:54:67 (ValIdent "%v_t_82") (PFld ./play.lat:54:67 (Ref ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node")))) (VVal ./play.lat:54:67 (Cl ./play.lat:54:67 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:67 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:54:67 (ValIdent "%v_t_83") (CallVirt ./play.lat:54:67 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:67 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:67 (Ref ./play.lat:37:5 (Cl ./play.lat:37:5 (SymIdent "Node"))) (ValIdent "%v_t_82")]),INewStr ./play.lat:54:62 (ValIdent "%v_t_80") " ",ILoad ./play.lat:54:29 (ValIdent "%v_t_73") (PFld ./play.lat:54:29 (Ref ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node")))) (VVal ./play.lat:54:29 (Cl ./play.lat:54:29 (SymIdent "Operator")) (ValIdent "%v_t_69")) (QIdent ./play.lat:54:29 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:54:29 (ValIdent "%v_t_74") (CallVirt ./play.lat:54:29 (Ref ./play.lat:22:5 (Cl ./play.lat:22:5 (SymIdent "String"))) (QIdent ./play.lat:54:29 (SymIdent "Node") (SymIdent "toString")) [VVal ./play.lat:54:29 (Ref ./play.lat:36:5 (Cl ./play.lat:36:5 (SymIdent "Node"))) (ValIdent "%v_t_73")]),INewStr ./play.lat:54:16 (ValIdent "%v_t_72") "Operator{",ICall ./play.lat:54:16 (ValIdent "%v_t_75") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref ./play.lat:54:16 (Cl ./play.lat:54:16 (SymIdent "String"))) (ValIdent "%v_t_72"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_74")]),ICall ./play.lat:54:16 (ValIdent "%v_t_78") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_80")]),ICall ./play.lat:54:16 (ValIdent "%v_t_79") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_78"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_70")]),ICall ./play.lat:54:16 (ValIdent "%v_t_81") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_79"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_80")]),ICall ./play.lat:54:16 (ValIdent "%v_t_84") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_81"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_83")]),ICall ./play.lat:54:16 (ValIdent "%v_t_86") (CallVirt ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (QIdent ./play.lat:54:16 (SymIdent "String") (SymIdent "concat")) [VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84"),VVal ./play.lat:54:16 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_85")]),IEndPhi ./play.lat:53:5,IRet ./play.lat:53:5 (VVal ./play.lat:53:5 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (ValIdent "%v_t_86"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_69",RDI),(ValIdent "%a_t_70",RSI),(ValIdent "%v_t_69",R15),(ValIdent "%v_t_70",RBX),(ValIdent "%v_t_72",RCX),(ValIdent "%v_t_73",RAX),(ValIdent "%v_t_74",RAX),(ValIdent "%v_t_75",RAX),(ValIdent "%v_t_78",RAX),(ValIdent "%v_t_79",RAX),(ValIdent "%v_t_80",R12),(ValIdent "%v_t_81",RAX),(ValIdent "%v_t_82",RAX),(ValIdent "%v_t_83",R13),(ValIdent "%v_t_84",RAX),(ValIdent "%v_t_85",R14),(ValIdent "%v_t_86",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_10_RDI",RDI),(ValIdent "~arg_11_RSI",RSI),(ValIdent "~arg_12_RDI",RDI),(ValIdent "~arg_13_RSI",RSI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI),(ValIdent "~arg_3_RSI",RSI),(ValIdent "~arg_4_RDI",RDI),(ValIdent "~arg_5_RSI",RSI),(ValIdent "~arg_6_RDI",RDI),(ValIdent "~arg_7_RSI",RSI),(ValIdent "~arg_8_RDI",RDI),(ValIdent "~arg_9_RSI",RSI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:58:5 (Int ./play.lat:58:5) (QIdent ./play.lat:58:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:58:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_87"),Param ./play.lat:58:5 (Int ./play.lat:58:18) (ValIdent "%a_t_88"),Param ./play.lat:58:5 (Int ./play.lat:58:25) (ValIdent "%a_t_89")] [ILabel ./play.lat:58:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:58:5,ILoad ./play.lat:58:5 (ValIdent "%v_t_88") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:18)) 1 (ValIdent "%a_t_88")),ILoad ./play.lat:58:5 (ValIdent "%v_t_89") (PParam ./play.lat:58:5 (Ref ./play.lat:58:5 (Int ./play.lat:58:25)) 2 (ValIdent "%a_t_89")),INewStr ./play.lat:59:21 (ValIdent "%v_t_91") "Plus.operator()",IVCall ./play.lat:59:9 (Call ./play.lat:59:9 (Bool inside standard library) (QIdent ./play.lat:59:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:59:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_91")] []),IOp ./play.lat:60:18 (ValIdent "%v_t_93") (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_88")) (OpAdd ./play.lat:60:18) (VVal ./play.lat:60:18 (Int ./play.lat:58:18) (ValIdent "%v_t_89")),IEndPhi ./play.lat:58:5,IRet ./play.lat:58:5 (VVal ./play.lat:58:5 (Int ./play.lat:58:5) (ValIdent "%v_t_93"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_88",RSI),(ValIdent "%a_t_89",RDX),(ValIdent "%v_t_88",R12),(ValIdent "%v_t_89",RBX),(ValIdent "%v_t_91",RAX),(ValIdent "%v_t_93",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (QIdent ./play.lat:62:12 (SymIdent "Plus") (SymIdent "toString")) [Param ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_94")] [ILabel ./play.lat:62:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:62:5,ILoad ./play.lat:62:5 (ValIdent "%v_t_94") (PParam ./play.lat:62:5 (Ref ./play.lat:62:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_94")),INewStr ./play.lat:63:33 (ValIdent "%v_t_96") "+",ICall ./play.lat:63:16 (ValIdent "%v_t_97") (CallVirt ./play.lat:63:16 (Ref ./play.lat:53:5 (Cl ./play.lat:53:5 (SymIdent "String"))) (QIdent ./play.lat:63:16 (SymIdent "Plus") (SymIdent "toStringFor")) [VVal ./play.lat:63:16 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%v_t_94"),VVal ./play.lat:63:16 (Ref ./play.lat:53:24 (Cl ./play.lat:53:24 (SymIdent "String"))) (ValIdent "%v_t_96")]),IEndPhi ./play.lat:62:5,IRet ./play.lat:62:5 (VVal ./play.lat:62:5 (Ref ./play.lat:62:5 (Cl ./play.lat:62:5 (SymIdent "String"))) (ValIdent "%v_t_97"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_94",RDI),(ValIdent "%v_t_94",RCX),(ValIdent "%v_t_96",RAX),(ValIdent "%v_t_97",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RSI",RSI)], numLocals = 0})]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running correct compiler backend: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Array","toString")] 
 START for chain: 
[SymIdent "Array",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "toString",(1,"_Array_toString",2))] for chain: [SymIdent "Array",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Node","Liczba","value"),("Object","Liczba","toString")] 
 START for chain: 
[SymIdent "Liczba",SymIdent "Node",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "value",(101,"Liczba.value",2)),(SymIdent "toString",(1,"Liczba.toString",3))] for chain: [SymIdent "Liczba",SymIdent "Node",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Node","Node","value"),("Object","Node","toString")] 
 START for chain: 
[SymIdent "Node",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "value",(101,"Node.value",2)),(SymIdent "toString",(1,"Node.toString",3))] for chain: [SymIdent "Node",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Object","Object","toString")] 
 START for chain: 
[SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "toString",(1,"_Object_toString",2))] for chain: [SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Operator","Operator","operator"),("Node","Operator","value"),("Object","Operator","toString"),("Operator","Operator","toStringFor")] 
 START for chain: 
[SymIdent "Operator",SymIdent "Node",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "operator",(102,"Operator.operator",2)),(SymIdent "value",(101,"Operator.value",3)),(SymIdent "toString",(1,"Operator.toString",4)),(SymIdent "toStringFor",(102,"Operator.toStringFor",5))] for chain: [SymIdent "Operator",SymIdent "Node",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("Object","Object","equals"),("Object","Object","getHashCode"),("Node","Operator","value"),("Operator","Operator","toStringFor"),("Operator","Plus","operator"),("Object","Plus","toString")] 
 START for chain: 
[SymIdent "Plus",SymIdent "Operator",SymIdent "Node",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "equals",(3,"_Object_equals",0)),(SymIdent "getHashCode",(2,"_Object_getHashCode",1)),(SymIdent "value",(101,"Operator.value",2)),(SymIdent "toStringFor",(102,"Operator.toStringFor",3)),(SymIdent "operator",(102,"Plus.operator",4)),(SymIdent "toString",(1,"Plus.toString",5))] for chain: [SymIdent "Plus",SymIdent "Operator",SymIdent "Node",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("String","String","charAt"),("Object","String","equals"),("String","String","concat"),("String","String","startsWith"),("String","String","endsWith"),("String","String","getBytes"),("String","String","indexOf"),("String","String","length"),("String","String","substring"),("Object","String","toString"),("Object","String","getHashCode")] 
 START for chain: 
[SymIdent "String",SymIdent "Object"]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "charAt",(101,"_String_charAt",0)),(SymIdent "equals",(3,"_String_equals",1)),(SymIdent "concat",(101,"_String_concat",2)),(SymIdent "startsWith",(101,"_String_startsWith",3)),(SymIdent "endsWith",(101,"_String_endsWith",4)),(SymIdent "getBytes",(101,"_String_getBytes",5)),(SymIdent "indexOf",(101,"_String_indexOf",6)),(SymIdent "length",(101,"_String_length",7)),(SymIdent "substring",(101,"_String_substring",8)),(SymIdent "toString",(1,"_String_toString",9)),(SymIdent "getHashCode",(2,"_String_getHashCode",10))] for chain: [SymIdent "String",SymIdent "Object"]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable START
 [("","Array","toString"),("","Object","toString"),("","Object","getHashCode"),("","Object","equals"),("","String","equals"),("","String","getHashCode"),("","String","toString"),("","String","substring"),("","String","length"),("","String","indexOf"),("","String","getBytes"),("","String","endsWith"),("","String","startsWith"),("","String","concat"),("","String","charAt"),("","~cl_TopLevel","printString"),("","~cl_TopLevel","printInt"),("","~cl_TopLevel","printByte"),("","~cl_TopLevel","printBoolean"),("","~cl_TopLevel","printBinArray"),("","~cl_TopLevel","byteToString"),("","~cl_TopLevel","boolToString"),("","~cl_TopLevel","intToString"),("","~cl_TopLevel","print"),("","~cl_TopLevel","error"),("","~cl_TopLevel","readInt"),("","~cl_TopLevel","readString"),("","~cl_TopLevel","__cast"),("","~cl_TopLevel","main"),("","~cl_TopLevel","plus"),("","~cl_TopLevel","liczba"),("","Node","value"),("","Node","toString"),("","Liczba","value"),("","Liczba","toString"),("","Operator","operator"),("","Operator","value"),("","Operator","toString"),("","Operator","toStringFor"),("","Plus","operator"),("","Plus","toString")] 
 START for chain: 
[]
====

[94m[Info]    [0m[Reporting.Logs.logInfo#75] generateVTable fields: [(SymIdent "toString",(1,"_Array_toString",0)),(SymIdent "toString",(1,"_Object_toString",1)),(SymIdent "getHashCode",(2,"_Object_getHashCode",2)),(SymIdent "equals",(3,"_Object_equals",3)),(SymIdent "equals",(3,"_String_equals",4)),(SymIdent "getHashCode",(2,"_String_getHashCode",5)),(SymIdent "toString",(1,"_String_toString",6)),(SymIdent "substring",(1000,"_String_substring",7)),(SymIdent "length",(1000,"_String_length",8)),(SymIdent "indexOf",(1000,"_String_indexOf",9)),(SymIdent "getBytes",(1000,"_String_getBytes",10)),(SymIdent "endsWith",(1000,"_String_endsWith",11)),(SymIdent "startsWith",(1000,"_String_startsWith",12)),(SymIdent "concat",(1000,"_String_concat",13)),(SymIdent "charAt",(1000,"_String_charAt",14)),(SymIdent "printString",(1000,"printString",15)),(SymIdent "printInt",(1000,"printInt",16)),(SymIdent "printByte",(1000,"printByte",17)),(SymIdent "printBoolean",(1000,"printBoolean",18)),(SymIdent "printBinArray",(1000,"printBinArray",19)),(SymIdent "byteToString",(1000,"byteToString",20)),(SymIdent "boolToString",(1000,"boolToString",21)),(SymIdent "intToString",(1000,"intToString",22)),(SymIdent "print",(10/usr/bin/ld: /tmp/ccw513DS.o: warning: relocation in read-only section `.rodata'
/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
00,"print",23)),(SymIdent "error",(1000,"error",24)),(SymIdent "readInt",(1000,"readInt",25)),(SymIdent "readString",(1000,"readString",26)),(SymIdent "__cast",(1000,"__cast",27)),(SymIdent "main",(1000,"~cl_TopLevel.main",28)),(SymIdent "plus",(1000,"~cl_TopLevel.plus",29)),(SymIdent "liczba",(1000,"~cl_TopLevel.liczba",30)),(SymIdent "value",(1000,"Node.value",31)),(SymIdent "toString",(1,"Node.toString",32)),(SymIdent "value",(1000,"Liczba.value",33)),(SymIdent "toString",(1,"Liczba.toString",34)),(SymIdent "operator",(1000,"Operator.operator",35)),(SymIdent "value",(1000,"Operator.value",36)),(SymIdent "toString",(1,"Operator.toString",37)),(SymIdent "toStringFor",(1000,"Operator.toStringFor",38)),(SymIdent "operator",(1000,"Plus.operator",39)),(SymIdent "toString",(1,"Plus.toString",40))] for chain: []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 56
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Created file: ./play.s
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Calling backend compile step: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Run GCC for X64 backend to generate './play' executable from object file './play.o'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Executing command 'gcc -fPIE -Lsrc/Runtime/dependencies/_built_/lib lib/runtime -l:libunistring.a ./play.s -o ./play -z noexecstack'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Command executed successfully.
[94m[Info]    [0m[Reporting.Logs.logInfo#75] X64 compilation of './play.s' seems to be successfull
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Backend code generation completed successfully ./play.lat -> ./play
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DONE
