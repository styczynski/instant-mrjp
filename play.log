[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsing: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Transformed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> string repStr(string s, int n)
{
	string r = "";
	int i = 0;
	while ((i < n))
		{
			r = (r + s);
			i = <implicit>(i + 1);
		}
	return r;
}

int main()
{
	printInt(fac(10));
	printInt(rfac(10));
	printInt(mfac(10));
	printInt(ifac(10));
	string r;
	{
		int n = 10;
		int r = 1;
		while ((n > 0))
			{
				r = (r * n);
				n = <implicit>(n - 1);
			}
		printInt(r);
	}
	string xx = repStr("=", 60);
	printString(xx);
	printString("hello */");
	printString("/* world");
	return 0;
}

int fac(int a)
{
	int r;
	int n;
	r = 1;
	n = a;
	while ((n > 0))
		{
			r = (r * n);
			n = (n + -1);
		}
	return r;
}

int rfac(int n)
{
	if ((n == 0))
		return 1;
	else
		return (n * rfac((n + -1)));
}

int mfac(int n)
{
	if ((n == 0))
		return 1;
	else
		return (n * nfac((n + -1)));
}

int nfac(int n)
{
	if ((n != 0))
		return (mfac((n + -1)) * n);
	else
		return 1;
}

int ifac(int n)
{
	return ifac2f(1, n);
}

int ifac2f(int l, int h)
{
	if ((l == h))
		return l;
	else
		;
	if ((l > h))
		return 1;
	else
		;
	int m;
	m = ((l + h) / 2);
	return (ifac2f(l, m) * ifac2f((m + 1), h));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> string repStr(string s, int n)
{
	string r = "";
	int i = 0;
	while ((i < n))
		{
			r = (r + s);
			i = <implicit>(i + 1);
		}
	return r;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> string r = "";
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- string r = "";
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int i = 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int i = (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> while ((i < n))
	{
		r = (r + s);
		i = <implicit>(i + 1);
	}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
	r = (r + s);
	i = <implicit>(i + 1);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
r = (r + s);
i = <implicit>(i + 1);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> r = (r + s);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> r
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- r = r.concat<"String">(s);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> i = <implicit>(i + 1);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> i
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- i = <implicit>(i + (int)(1));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
r = r.concat<"String">(s);
i = <implicit>(i + (int)(1));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
	r = r.concat<"String">(s);
	i = <implicit>(i + (int)(1));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- while ((i < n))
	{
		r = r.concat<"String">(s);
		i = <implicit>(i + (int)(1));
	}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return r;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return r;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- string repStr(string s, int n)
{
	string r = "";
	int i = (int)(0);
	while ((i < n))
		{
			r = r.concat<"String">(s);
			i = <implicit>(i + (int)(1));
		}
	return r;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	printInt(fac(10));
	printInt(rfac(10));
	printInt(mfac(10));
	printInt(ifac(10));
	string r;
	{
		int n = 10;
		int r = 1;
		while ((n > 0))
			{
				r = (r * n);
				n = <implicit>(n - 1);
			}
		printInt(r);
	}
	string xx = repStr("=", 60);
	printString(xx);
	printString("hello */");
	printString("/* world");
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(fac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(fac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(rfac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(rfac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(mfac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(mfac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(ifac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(ifac(10));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> string r;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- string r;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
	int n = 10;
	int r = 1;
	while ((n > 0))
		{
			r = (r * n);
			n = <implicit>(n - 1);
		}
	printInt(r);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
int n = 10;
int r = 1;
while ((n > 0))
	{
		r = (r * n);
		n = <implicit>(n - 1);
	}
printInt(r);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int n = 10;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int n = (int)(10);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int r = 1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int r = (int)(1);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> while ((n > 0))
	{
		r = (r * n);
		n = <implicit>(n - 1);
	}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
	r = (r * n);
	n = <implicit>(n - 1);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> {
r = (r * n);
n = <implicit>(n - 1);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> r = (r * n);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> r
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- r = (r * n);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> n = <implicit>(n - 1);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> n
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- n = <implicit>(n - (int)(1));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
r = (r * n);
n = <implicit>(n - (int)(1));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
	r = (r * n);
	n = <implicit>(n - (int)(1));
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- while ((n > (int)(0)))
	{
		r = (r * n);
		n = <implicit>(n - (int)(1));
	}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(r);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(r);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
int n = (int)(10);
int r = (int)(1);
while ((n > (int)(0)))
	{
		r = (r * n);
		n = <implicit>(n - (int)(1));
	}
printInt(r);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- {
	int n = (int)(10);
	int r = (int)(1);
	while ((n > (int)(0)))
		{
			r = (r * n);
			n = <implicit>(n - (int)(1));
		}
	printInt(r);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> string xx = repStr("=", 60);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Typecheck failed
[0;91;1m[error][0m: Problem: Invalid call
     [0;90;1mâ•­â”€â”€â–¶[0m [0;32;1m./play.lat@27:15-27:21[0m
     [0;90;1mâ”‚[0m
[0;90;1m  27 â”‚[0m [0;97m [0m[0;97m [0m[0;97ms[0m[0;97mt[0m[0;97mr[0m[0;97mi[0m[0;97mn[0m[0;97mg[0m[0;97m [0m[0;97mx[0m[0;97mx[0m[0;97m [0m[0;97m=[0m[0;97m [0m[0;91;1mr[0m[0;91;1me[0m[0;91;1mp[0m[0;91;1mS[0m[0;91;1mt[0m[0;91;1mr[0m[0;97m([0m[0;97m"[0m[0;97m=[0m[0;97m"[0m[0;97m,[0m[0;97m6[0m[0;97m0[0m[0;97m)[0m[0;97m;[0m
     [0;90;1mâ€¢[0m               [0;91mâ”¬[0m[0;91mâ”€[0m[0;91mâ”€[0m[0;91mâ”€[0m[0;91mâ”€[0m[0;91mâ”€[0m 
     [0;90;1mâ€¢[0m               [0;91mâ”œâ•¸[0m [0;91mCalling value that expects parameter of type string at position 1, but got int[0m
     [0;90;1mâ€¢[0m               [0;34mâ•°â•¸[0m [0;34mCorrect the type of 1-th parameter[0m
[0;90;1mâ”€â”€â”€â”€â”€â•¯[0m
[0;90;1m            â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
[0;90m        â”‚[0m 
      [0;90m  â”‚ [0m 
      [0;90mT â”‚ [0m [0;90;1m    Infer types: [0m
      [0;90my â”‚ [0m  [0;97m [0m[0;97m [0m[0;97ms[0m[0;97mt[0m[0;97mr[0m[0;97mi[0m[0;97mn[0m[0;97mg[0m[0;97m [0m[0;97mx[0m[0;97mx[0m[0;97m [0m[0;97m=[0m[0;97m [0m[0;34;1mr[0m[0;34;1me[0m[0;34;1mp[0m[0;34;1mS[0m[0;34;1mt[0m[0;34;1mr[0m[0;97m([0m[0;34;1m"[0m[0;34;1m=[0m[0;34;1m"[0m[0;97m,[0m[0;34;1m6[0m[0;34;1m0[0m[0;97m)[0m[0;97m;[0m
      [0;90mp â”‚ [0m                [0;34mâ”¬[0m[0;34mâ”€[0m[0;34mâ”€[0m[0;34mâ”€[0m[0;34mâ”€[0m[0;34mâ”€[0m [0;34mâ”¬[0m[0;34mâ”€[0m[0;34mâ”€[0m [0;34mâ”¬[0m[0;34mâ”€[0m 
      [0;90me â”‚ [0m                [0;34mâ”‚[0m      [0;34mâ”‚[0m   [0;34mâ•°â•¸[0m [0;34mType: byte[0m
      [0;90m  â”‚ [0m                [0;34mâ”‚[0m      [0;34mâ•°â•¸[0m [0;34mType: string[0m
      [0;90mc â”‚ [0m                [0;34mâ•°â•¸[0m [0;34mType: (string (int, string))[0m
      [0;90mo â”‚ [0m  
      [0;90mn â”‚ [0m 
      [0;90mt â”‚ [0m 
      [0;90me â”‚ [0m 
      [0;90mx â”‚ [0m 
      [0;90mt â”‚ [0m 

      [0;90m        â”‚[0m 
      [0;90m  â”‚ [0m 
      [0;90mF â”‚ [0m [0;90;1m    The error occurred in function 'main'[0m
      [0;90mu â”‚ [0m  [0;34;1mi[0m[0;34;1mn[0m[0;34;1mt[0m[0;34;1m [0m[0;97mm[0m[0;97ma[0m[0;97mi[0m[0;97mn[0m[0;97m([0m[0;97m)[0m[0;97m [0m[0;97m{[0m
      [0;90mn â”‚ [0m  [0;34mâ”¬[0m[0;34mâ”€[0m[0;34mâ”€[0m[0;34mâ”€[0m 
      [0;90mc â”‚ [0m  [0;34mâ•°â•¸[0m [0;34mLocation of function 'main'[0m
      [0;90mt â”‚ [0m  
      [0;90mi â”‚ [0m 
      [0;90mo â”‚ [0m 
      [0;90mn â”‚ [0m 
      [0;90m  â”‚ [0m 
      [0;90mc â”‚ [0m 
      [0;90mo â”‚ [0m 
      [0;90mn â”‚ [0m 
      [0;90mt â”‚ [0m 
      [0;90me â”‚ [0m 
      [0;90mx â”‚ [0m 
      [0;90mt â”‚ [0m 



[91m[Error]   [0m[Reporting.Logs.logError#88] Typecheck failed
