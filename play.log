[94m[Info]    [0m[Reporting.Logs.logInfo#75] Reading: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsing: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Parsed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Transformed: ./play.lat
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Construct inheritance graph
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<???>());
	return 0;
}

Node plus(Node n1, Node n2)
{
	Operator res = new Plus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}

Node razy(Node n1, Node n2)
{
	Operator res = new Razy;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}

Node podziel(Node n1, Node n2)
{
	Operator res = new Podziel;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}

Node minus(Node n1, Node n2)
{
	Operator res = new Minus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<???> = l;
	return res;
}

class Node
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return v;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<???>(left.value<???>(), right.value<???>());
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}

class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}

class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}

class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<???>());
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:6:6 (ClassT ./play.lat:6:1 (Ident ./play.lat:6:1 "Node")) [ClassT ./play.lat:6:11 (Ident ./play.lat:6:11 "Node"),ClassT ./play.lat:6:20 (Ident ./play.lat:6:20 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:24:6 (ClassT ./play.lat:24:1 (Ident ./play.lat:24:1 "Node")) [ClassT ./play.lat:24:12 (Ident ./play.lat:24:12 "Node"),ClassT ./play.lat:24:21 (Ident ./play.lat:24:21 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:30:6 (ClassT ./play.lat:30:1 (Ident ./play.lat:30:1 "Node")) [IntT ./play.lat:30:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:30:6 (ClassT ./play.lat:30:1 (Ident ./play.lat:30:1 "Node")) [IntT ./play.lat:30:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:12:6 (ClassT ./play.lat:12:1 (Ident ./play.lat:12:1 "Node")) [ClassT ./play.lat:12:11 (Ident ./play.lat:12:11 "Node"),ClassT ./play.lat:12:20 (Ident ./play.lat:12:20 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:30:6 (ClassT ./play.lat:30:1 (Ident ./play.lat:30:1 "Node")) [IntT ./play.lat:30:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:18:6 (ClassT ./play.lat:18:1 (Ident ./play.lat:18:1 "Node")) [ClassT ./play.lat:18:14 (Ident ./play.lat:18:14 "Node"),ClassT ./play.lat:18:23 (Ident ./play.lat:18:23 "Node")]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:30:6 (ClassT ./play.lat:30:1 (Ident ./play.lat:30:1 "Node")) [IntT ./play.lat:30:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:30:6 (ClassT ./play.lat:30:1 (Ident ./play.lat:30:1 "Node")) [IntT ./play.lat:30:13]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(w.value<???>());
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:36:9 (IntT ./play.lat:36:5) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(w.value<"Node">());
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<"Node">());
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node plus(Node n1, Node n2)
{
	Operator res = new Plus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Operator res = new Plus;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Operator res = (Operator)(new Plus);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.left<???> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.left<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.left<"Operator"> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.right<???> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.right<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.right<"Operator"> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node razy(Node n1, Node n2)
{
	Operator res = new Razy;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Operator res = new Razy;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Operator res = (Operator)(new Razy);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.left<???> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.left<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.left<"Operator"> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.right<???> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.right<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.right<"Operator"> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node podziel(Node n1, Node n2)
{
	Operator res = new Podziel;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Operator res = new Podziel;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Operator res = (Operator)(new Podziel);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.left<???> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.left<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.left<"Operator"> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.right<???> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.right<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.right<"Operator"> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node minus(Node n1, Node n2)
{
	Operator res = new Minus;
	res.left<???> = n1;
	res.right<???> = n2;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Operator res = new Minus;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Operator res = (Operator)(new Minus);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.left<???> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.left<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.left<"Operator"> = n1;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.right<???> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.right<"Operator">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.right<"Operator"> = n2;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<???> = l;
	return res;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Liczba res = new Liczba;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Liczba res = new Liczba;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> res.v<???> = l;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assignemnt mapped LEFT ?=> res.v<"Liczba">
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- res.v<"Liczba"> = l;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return res;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (Node)(res);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Node
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	printString("Node.value not implemented");
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("Node.value not implemented");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("Node.value not implemented");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	printString("Node.value not implemented");
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Liczba extends Node
{
	int v;
	int value()
	{
		return v;
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int v;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int v;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	return v;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return v;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.v<"Liczba">;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	return this.v<"Liczba">;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<???>(left.value<???>(), right.value<???>());
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node left;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node left;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> Node right;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- Node right;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int n1, int n2)
{
	printString("Operator.operator not implemented");
	return 0;
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("Operator.operator not implemented");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("Operator.operator not implemented");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return 0;
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (int)(0);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int n1, int n2)
{
	printString("Operator.operator not implemented");
	return (int)(0);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int value()
{
	return this.operator<???>(left.value<???>(), right.value<???>());
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return this.operator<???>(left.value<???>(), right.value<???>());
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:50:9 (IntT ./play.lat:50:5) [IntT ./play.lat:50:18,IntT ./play.lat:50:26]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:36:9 (IntT ./play.lat:36:5) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT ./play.lat:36:9 (IntT ./play.lat:36:5) []
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int value()
{
	return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int a, int b)
{
	printInt(a);
	printString("+");
	printInt(b);
	return (a + b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("+");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("+");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (a + b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (a + b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int a, int b)
{
	printInt(a);
	printString("+");
	printInt(b);
	return (a + b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int a, int b)
{
	printInt(a);
	printString("-");
	printInt(b);
	return (a + -b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("-");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("-");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (a + -b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (a + -b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int a, int b)
{
	printInt(a);
	printString("-");
	printInt(b);
	return (a + -b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int a, int b)
{
	printInt(a);
	printString("*");
	printInt(b);
	return (a * b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("*");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("*");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (a * b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (a * b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int a, int b)
{
	printInt(a);
	printString("*");
	printInt(b);
	return (a * b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> int operator(int a, int b)
{
	printInt(a);
	printString("/");
	printInt(b);
	return (a / b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(a);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printString("/");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [StringT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printString("/");
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGELO App ===> FunT inside standard library (VoidT inside standard library) [IntT inside standard library]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- printInt(b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] before -> return (a / b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- return (a / b);
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int operator(int a, int b)
{
	printInt(a);
	printString("/");
	printInt(b);
	return (a / b);
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] after  <- int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<"Node">());
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}

class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}

class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}

class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Typecheck done./play.lat

int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<"Node">());
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}

class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}

class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}

class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<"Node">());
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}

class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}

class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}

class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) int main()
{
	Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(w.value<"Node">());
	return (int)(0);
}

Node plus(Node n1, Node n2)
{
	Operator res = (Operator)(new Plus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node razy(Node n1, Node n2)
{
	Operator res = (Operator)(new Razy);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node podziel(Node n1, Node n2)
{
	Operator res = (Operator)(new Podziel);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node minus(Node n1, Node n2)
{
	Operator res = (Operator)(new Minus);
	res.left<"Operator"> = n1;
	res.right<"Operator"> = n2;
	return (Node)(res);
}

Node liczba(int l)
{
	Liczba res = new Liczba;
	res.v<"Liczba"> = l;
	return (Node)(res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int n1, int n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("+");
		printInt(b);
		return (a + b);
	}
}

class Minus extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("-");
		printInt(b);
		return (a + -b);
	}
}

class Razy extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("*");
		printInt(b);
		return (a * b);
	}
}

class Podziel extends Operator
{
	int operator(int a, int b)
	{
		printInt(a);
		printString("/");
		printInt(b);
		return (a / b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return (int)(0);
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return (int)(0);
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return (int)(0);
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 1 (took 12 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run before:int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP Before doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DBGNSCP After doNormalizeScope(Syntax.Program) int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] ConstPropagation.run after:int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing AST round 2 (took 17 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimization done./play.lat

int main()
{
	Node _var_1000002#w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));
	printInt(_var_1000002#w.value<"Node">());
	return 0;
}

Node plus(Node _var_1000006#n1, Node _var_1000007#n2)
{
	Operator _var_1000009#res = (Operator)(new Plus);
	_var_1000009#res.left<"Operator"> = _var_1000006#n1;
	_var_1000009#res.right<"Operator"> = _var_1000007#n2;
	return (Node)(_var_1000009#res);
}

Node razy(Node _var_1000013#n1, Node _var_1000014#n2)
{
	Operator _var_1000016#res = (Operator)(new Razy);
	_var_1000016#res.left<"Operator"> = _var_1000013#n1;
	_var_1000016#res.right<"Operator"> = _var_1000014#n2;
	return (Node)(_var_1000016#res);
}

Node podziel(Node _var_1000020#n1, Node _var_1000021#n2)
{
	Operator _var_1000023#res = (Operator)(new Podziel);
	_var_1000023#res.left<"Operator"> = _var_1000020#n1;
	_var_1000023#res.right<"Operator"> = _var_1000021#n2;
	return (Node)(_var_1000023#res);
}

Node minus(Node _var_1000027#n1, Node _var_1000028#n2)
{
	Operator _var_1000030#res = (Operator)(new Minus);
	_var_1000030#res.left<"Operator"> = _var_1000027#n1;
	_var_1000030#res.right<"Operator"> = _var_1000028#n2;
	return (Node)(_var_1000030#res);
}

Node liczba(int _var_1000034#l)
{
	Liczba _var_1000036#res = new Liczba;
	_var_1000036#res.v<"Liczba"> = _var_1000034#l;
	return (Node)(_var_1000036#res);
}

class Node extends Object
{
	int value()
	{
		printString("Node.value not implemented");
		return 0;
	}
}

class Liczba extends Node
{
	int v;
	int value()
	{
		return this.v<"Liczba">;
	}
}

class Operator extends Node
{
	Node left;
	Node right;
	int operator(int _var_1000048#n1, int _var_1000049#n2)
	{
		printString("Operator.operator not implemented");
		return 0;
	}
	int value()
	{
		return this.operator<"Operator">(this.left<"Operator">.value<"Node">(), this.right<"Operator">.value<"Node">());
	}
}

class Plus extends Operator
{
	int operator(int _var_1000058#a, int _var_1000059#b)
	{
		printInt(_var_1000058#a);
		printString("+");
		printInt(_var_1000059#b);
		return (_var_1000058#a + _var_1000059#b);
	}
}

class Minus extends Operator
{
	int operator(int _var_1000064#a, int _var_1000065#b)
	{
		printInt(_var_1000064#a);
		printString("-");
		printInt(_var_1000065#b);
		return (_var_1000064#a + -_var_1000065#b);
	}
}

class Razy extends Operator
{
	int operator(int _var_1000070#a, int _var_1000071#b)
	{
		printInt(_var_1000070#a);
		printString("*");
		printInt(_var_1000071#b);
		return (_var_1000070#a * _var_1000071#b);
	}
}

class Podziel extends Operator
{
	int operator(int _var_1000076#a, int _var_1000077#b)
	{
		printInt(_var_1000076#a);
		printString("/");
		printInt(_var_1000077#b);
		return (_var_1000076#a / _var_1000077#b);
	}
}
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Node>,obj<Node>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Node>,obj<Node>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Node>,obj<Node>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<Node>,obj<Node>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:8:5 (Var ./play.lat:8:5 (Ident ./play.lat:8:5 "_var_1000009#res")) (Ident ./play.lat:8:9 "left") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:9:5 (Var ./play.lat:9:5 (Ident ./play.lat:9:5 "_var_1000009#res")) (Ident ./play.lat:9:9 "right") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:14:5 (Var ./play.lat:14:5 (Ident ./play.lat:14:5 "_var_1000016#res")) (Ident ./play.lat:14:9 "left") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:15:5 (Var ./play.lat:15:5 (Ident ./play.lat:15:5 "_var_1000016#res")) (Ident ./play.lat:15:9 "right") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:20:5 (Var ./play.lat:20:5 (Ident ./play.lat:20:5 "_var_1000023#res")) (Ident ./play.lat:20:9 "left") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:21:5 (Var ./play.lat:21:5 (Ident ./play.lat:21:5 "_var_1000023#res")) (Ident ./play.lat:21:9 "right") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:26:5 (Var ./play.lat:26:5 (Ident ./play.lat:26:5 "_var_1000030#res")) (Ident ./play.lat:26:9 "left") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:27:5 (Var ./play.lat:27:5 (Ident ./play.lat:27:5 "_var_1000030#res")) (Ident ./play.lat:27:9 "right") (Just "Operator")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Assign Member ./play.lat:32:5 (Var ./play.lat:32:5 (Ident ./play.lat:32:5 "_var_1000036#res")) (Ident ./play.lat:32:9 "v") (Just "Liczba")
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [obj<String>]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] APPDET [int]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DEBUG COLLECT_FUNCTIONS PROTOTYPES
[94m[Info]    [0m[Reporting.Logs.logInfo#75] [int main()
    int t_27 = <int>4
    obj<Node> t_28 =     call<function> liczba(<int>t_27)
    int t_29 = <int>3
    obj<Node> t_30 =     call<function> liczba(<int>t_29)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    int t_32 = <int>2
    obj<Node> t_33 =     call<function> liczba(<int>t_32)
    int t_34 = <int>4
    obj<Node> t_35 =     call<function> liczba(<int>t_34)
    int t_36 = <int>2
    obj<Node> t_37 =     call<function> liczba(<int>t_36)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    byte t_43 =     call<function> printInt(<int>t_42)
    int t_44 = <int>0
    return <int>t_44
,obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50
,obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56
,obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62
,obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68
,obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72
,int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    byte t_76 =     call<function> printString(<obj<String>>t_75)
    int t_77 = <int>0
    return <int>t_77
,int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79
,int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    byte t_85 =     call<function> printString(<obj<String>>t_84)
    int t_86 = <int>0
    return <int>t_86
,int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92
,int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    byte t_96 =     call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    byte t_99 =     call<function> printString(<obj<String>>t_98)
    byte t_100 =     call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101
,int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    byte t_105 =     call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    byte t_108 =     call<function> printString(<obj<String>>t_107)
    byte t_109 =     call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110
,int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    byte t_114 =     call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    byte t_117 =     call<function> printString(<obj<String>>t_116)
    byte t_118 =     call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119
,int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    byte t_123 =     call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    byte t_126 =     call<function> printString(<obj<String>>t_125)
    byte t_127 =     call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] END DEBUG
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Initial IR: 
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    int t_27 = <int>4
    obj<Node> t_28 =     call<function> liczba(<int>t_27)
    int t_29 = <int>3
    obj<Node> t_30 =     call<function> liczba(<int>t_29)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    int t_32 = <int>2
    obj<Node> t_33 =     call<function> liczba(<int>t_32)
    int t_34 = <int>4
    obj<Node> t_35 =     call<function> liczba(<int>t_34)
    int t_36 = <int>2
    obj<Node> t_37 =     call<function> liczba(<int>t_36)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    byte t_43 =     call<function> printInt(<int>t_42)
    int t_44 = <int>0
    return <int>t_44

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    byte t_76 =     call<function> printString(<obj<String>>t_75)
    int t_77 = <int>0
    return <int>t_77

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    byte t_85 =     call<function> printString(<obj<String>>t_84)
    int t_86 = <int>0
    return <int>t_86

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    byte t_96 =     call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    byte t_99 =     call<function> printString(<obj<String>>t_98)
    byte t_100 =     call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    byte t_105 =     call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    byte t_108 =     call<function> printString(<obj<String>>t_107)
    byte t_109 =     call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    byte t_114 =     call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    byte t_117 =     call<function> printString(<obj<String>>t_116)
    byte t_118 =     call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    byte t_123 =     call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    byte t_126 =     call<function> printString(<obj<String>>t_125)
    byte t_127 =     call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 1 (took 0 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    int t_27 = <int>4
    obj<Node> t_28 =     call<function> liczba(<int>t_27)
    int t_29 = <int>3
    obj<Node> t_30 =     call<function> liczba(<int>t_29)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    int t_32 = <int>2
    obj<Node> t_33 =     call<function> liczba(<int>t_32)
    int t_34 = <int>4
    obj<Node> t_35 =     call<function> liczba(<int>t_34)
    int t_36 = <int>2
    obj<Node> t_37 =     call<function> liczba(<int>t_36)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    byte t_43 =     call<function> printInt(<int>t_42)
    int t_44 = <int>0
    return <int>t_44

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    byte t_76 =     call<function> printString(<obj<String>>t_75)
    int t_77 = <int>0
    return <int>t_77

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    byte t_85 =     call<function> printString(<obj<String>>t_84)
    int t_86 = <int>0
    return <int>t_86

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    byte t_96 =     call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    byte t_99 =     call<function> printString(<obj<String>>t_98)
    byte t_100 =     call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    byte t_105 =     call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    byte t_108 =     call<function> printString(<obj<String>>t_107)
    byte t_109 =     call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    byte t_114 =     call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    byte t_117 =     call<function> printString(<obj<String>>t_116)
    byte t_118 =     call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    byte t_123 =     call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    byte t_126 =     call<function> printString(<obj<String>>t_125)
    byte t_127 =     call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    obj<Node> t_28 =     call<function> liczba(<int>4)
    obj<Node> t_30 =     call<function> liczba(<int>3)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    obj<Node> t_33 =     call<function> liczba(<int>2)
    obj<Node> t_35 =     call<function> liczba(<int>4)
    obj<Node> t_37 =     call<function> liczba(<int>2)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    discard<byte> call<function> printInt(<int>t_42)
    return <int>0

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    discard<byte> call<function> printString(<obj<String>>t_75)
    return <int>0

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    discard<byte> call<function> printString(<obj<String>>t_84)
    return <int>0

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    discard<byte> call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    discard<byte> call<function> printString(<obj<String>>t_98)
    discard<byte> call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    discard<byte> call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    discard<byte> call<function> printString(<obj<String>>t_107)
    discard<byte> call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    discard<byte> call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    discard<byte> call<function> printString(<obj<String>>t_116)
    discard<byte> call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    discard<byte> call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    discard<byte> call<function> printString(<obj<String>>t_125)
    discard<byte> call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Value propagator
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Expression substituter
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Optimizing IR round 2 (took 8 ms)
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > BEFORE ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    obj<Node> t_28 =     call<function> liczba(<int>4)
    obj<Node> t_30 =     call<function> liczba(<int>3)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    obj<Node> t_33 =     call<function> liczba(<int>2)
    obj<Node> t_35 =     call<function> liczba(<int>4)
    obj<Node> t_37 =     call<function> liczba(<int>2)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    discard<byte> call<function> printInt(<int>t_42)
    return <int>0

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    discard<byte> call<function> printString(<obj<String>>t_75)
    return <int>0

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    discard<byte> call<function> printString(<obj<String>>t_84)
    return <int>0

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    discard<byte> call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    discard<byte> call<function> printString(<obj<String>>t_98)
    discard<byte> call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    discard<byte> call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    discard<byte> call<function> printString(<obj<String>>t_107)
    discard<byte> call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    discard<byte> call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    discard<byte> call<function> printString(<obj<String>>t_116)
    discard<byte> call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    discard<byte> call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    discard<byte> call<function> printString(<obj<String>>t_125)
    discard<byte> call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] > AFTER ROUND
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    obj<Node> t_28 =     call<function> liczba(<int>4)
    obj<Node> t_30 =     call<function> liczba(<int>3)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    obj<Node> t_33 =     call<function> liczba(<int>2)
    obj<Node> t_35 =     call<function> liczba(<int>4)
    obj<Node> t_37 =     call<function> liczba(<int>2)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    discard<byte> call<function> printInt(<int>t_42)
    return <int>0

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    discard<byte> call<function> printString(<obj<String>>t_75)
    return <int>0

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    discard<byte> call<function> printString(<obj<String>>t_84)
    return <int>0

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    discard<byte> call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    discard<byte> call<function> printString(<obj<String>>t_98)
    discard<byte> call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    discard<byte> call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    discard<byte> call<function> printString(<obj<String>>t_107)
    discard<byte> call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    discard<byte> call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    discard<byte> call<function> printString(<obj<String>>t_116)
    discard<byte> call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    discard<byte> call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    discard<byte> call<function> printString(<obj<String>>t_125)
    discard<byte> call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running linearizer internal transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] AST to convert:
struct Array extends [Array, Object]
    field obj<Object> elements;
    field int length;
    field int elementSize;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Array.toString ()

struct Liczba extends [Liczba, Node, Object]
    field int v;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Liczba.value ()

struct Minus extends [Minus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Minus.operator (a int, b int)

struct Node extends [Node, Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Node.value ()

struct Object extends [Object]
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()

struct Operator extends [Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.operator (n1 int, n2 int)
    method int Operator.value ()

struct Plus extends [Plus, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Plus.operator (a int, b int)

struct Podziel extends [Podziel, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Podziel.operator (a int, b int)

struct Razy extends [Razy, Operator, Node, Object]
    field obj<Node> left;
    field obj<Node> right;
    method byte Object.equals (_arg_1 obj<Object>)
    method int Object.getHashCode ()
    method obj<String> Object.toString ()
    method int Operator.value ()
    method int Razy.operator (a int, b int)

struct String extends [String, Object]
    method int String.charAt (_arg_1 int)
    method byte String.equals (_arg_1 obj<Object>)
    method obj<String> String.concat (_arg_1 obj<String>)
    method byte String.startsWith (_arg_1 obj<String>)
    method byte String.endsWith (_arg_1 obj<String>)
    method array<int> String.getBytes ()
    method int String.indexOf (_arg_1 obj<String>, _arg_2 int)
    method int String.length ()
    method obj<String> String.substring (_arg_1 int, _arg_2 int)
    method obj<String> String.toString ()
    method int String.getHashCode ()

int main()
    obj<Node> t_28 =     call<function> liczba(<int>4)
    obj<Node> t_30 =     call<function> liczba(<int>3)
    obj<Node> t_31 =     call<function> minus(<obj<Node>>t_28, <obj<Node>>t_30)
    obj<Node> t_33 =     call<function> liczba(<int>2)
    obj<Node> t_35 =     call<function> liczba(<int>4)
    obj<Node> t_37 =     call<function> liczba(<int>2)
    obj<Node> t_38 =     call<function> podziel(<obj<Node>>t_35, <obj<Node>>t_37)
    obj<Node> t_39 =     call<function> razy(<obj<Node>>t_33, <obj<Node>>t_38)
    obj<Node> t_40 =     call<function> plus(<obj<Node>>t_31, <obj<Node>>t_39)
    obj<Node> t_41 = <obj<Node>>t_40
    int t_42 =     call<method:Node, class:value> t_41(<obj<Node>>t_41)
    discard<byte> call<function> printInt(<int>t_42)
    return <int>0

obj<Node> plus(obj<Node> t_45, obj<Node> t_46)
    obj<Plus> t_47 = new Plus
    obj<Operator> t_48 =     cast <obj<Plus>>t_47 to Operator
    obj<Operator> t_49 = <obj<Operator>>t_48
    t_49.field[Operator.left] = <obj<Node>>t_45
    t_49.field[Operator.right] = <obj<Node>>t_46
    obj<Node> t_50 =     cast <obj<Operator>>t_49 to Node
    return <obj<Node>>t_50

obj<Node> razy(obj<Node> t_51, obj<Node> t_52)
    obj<Razy> t_53 = new Razy
    obj<Operator> t_54 =     cast <obj<Razy>>t_53 to Operator
    obj<Operator> t_55 = <obj<Operator>>t_54
    t_55.field[Operator.left] = <obj<Node>>t_51
    t_55.field[Operator.right] = <obj<Node>>t_52
    obj<Node> t_56 =     cast <obj<Operator>>t_55 to Node
    return <obj<Node>>t_56

obj<Node> podziel(obj<Node> t_57, obj<Node> t_58)
    obj<Podziel> t_59 = new Podziel
    obj<Operator> t_60 =     cast <obj<Podziel>>t_59 to Operator
    obj<Operator> t_61 = <obj<Operator>>t_60
    t_61.field[Operator.left] = <obj<Node>>t_57
    t_61.field[Operator.right] = <obj<Node>>t_58
    obj<Node> t_62 =     cast <obj<Operator>>t_61 to Node
    return <obj<Node>>t_62

obj<Node> minus(obj<Node> t_63, obj<Node> t_64)
    obj<Minus> t_65 = new Minus
    obj<Operator> t_66 =     cast <obj<Minus>>t_65 to Operator
    obj<Operator> t_67 = <obj<Operator>>t_66
    t_67.field[Operator.left] = <obj<Node>>t_63
    t_67.field[Operator.right] = <obj<Node>>t_64
    obj<Node> t_68 =     cast <obj<Operator>>t_67 to Node
    return <obj<Node>>t_68

obj<Node> liczba(int t_69)
    obj<Liczba> t_70 = new Liczba
    obj<Liczba> t_71 = <obj<Liczba>>t_70
    t_71.field[Liczba.v] = <int>t_69
    obj<Node> t_72 =     cast <obj<Liczba>>t_71 to Node
    return <obj<Node>>t_72

int Node.value(obj<Node> t_73)
    obj<String> t_75 =     new string _S74
    discard<byte> call<function> printString(<obj<String>>t_75)
    return <int>0

int Liczba.value(obj<Liczba> t_78)
    int t_79 = t_78.field<int>[Liczba.v]
    return <int>t_79

int Operator.operator(obj<Operator> t_80, int t_81, int t_82)
    obj<String> t_84 =     new string _S83
    discard<byte> call<function> printString(<obj<String>>t_84)
    return <int>0

int Operator.value(obj<Operator> t_87)
    obj<Node> t_88 = t_87.field<obj<Node>>[Operator.left]
    int t_89 =     call<method:Node, class:value> t_88(<obj<Node>>t_88)
    obj<Node> t_90 = t_87.field<obj<Node>>[Operator.right]
    int t_91 =     call<method:Node, class:value> t_90(<obj<Node>>t_90)
    int t_92 =     call<method:Operator, class:operator> t_87(<obj<Operator>>t_87, <int>t_89, <int>t_91)
    return <int>t_92

int Plus.operator(obj<Plus> t_93, int t_94, int t_95)
    discard<byte> call<function> printInt(<int>t_94)
    obj<String> t_98 =     new string _S97
    discard<byte> call<function> printString(<obj<String>>t_98)
    discard<byte> call<function> printInt(<int>t_95)
    int t_101 = <int>t_94 + <int>t_95
    return <int>t_101

int Minus.operator(obj<Minus> t_102, int t_103, int t_104)
    discard<byte> call<function> printInt(<int>t_103)
    obj<String> t_107 =     new string _S106
    discard<byte> call<function> printString(<obj<String>>t_107)
    discard<byte> call<function> printInt(<int>t_104)
    int t_110 = <int>t_103 - <int>t_104
    return <int>t_110

int Razy.operator(obj<Razy> t_111, int t_112, int t_113)
    discard<byte> call<function> printInt(<int>t_112)
    obj<String> t_116 =     new string _S115
    discard<byte> call<function> printString(<obj<String>>t_116)
    discard<byte> call<function> printInt(<int>t_113)
    int t_119 = <int>t_112 * <int>t_113
    return <int>t_119

int Podziel.operator(obj<Podziel> t_120, int t_121, int t_122)
    discard<byte> call<function> printInt(<int>t_121)
    obj<String> t_125 =     new string _S124
    discard<byte> call<function> printString(<obj<String>>t_125)
    discard<byte> call<function> printInt(<int>t_122)
    int t_128 = <int>t_121 / <int>t_122
    return <int>t_128

data string _S74 = "Node.value not implemented"
data string _S83 = "Operator.operator not implemented"
data string _S97 = "+"
data string _S106 = "-"
data string _S115 = "*"
data string _S124 = "/"
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Successfully completed internal linearizer transformation: Convert to FIR
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Linearizer terminated
[94m[Info]    [0m[Reporting.Logs.logInfo#75] IR conversion done./play.lat

.metadata: [
  .classes: [
    Array  extends [SymIdent "Array", SymIdent "Object"] : [
      .fields: [
        Object & elements;
        int length;
        int elementSize;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Array.toString;
      ]
    ]
    Liczba  extends [SymIdent "Liczba", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        int v;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Liczba.value;
      ]
    ]
    Minus  extends [SymIdent "Minus", SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Operator.value;
        int (int, int)Minus.operator;
      ]
    ]
    Node  extends [SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Node.value;
      ]
    ]
    Object  extends [SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
      ]
    ]
    Operator  extends [SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int (int, int)Operator.operator;
        int () Operator.value;
      ]
    ]
    Plus  extends [SymIdent "Plus", SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Operator.value;
        int (int, int)Plus.operator;
      ]
    ]
    Podziel  extends [SymIdent "Podziel", SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Operator.value;
        int (int, int)Podziel.operator;
      ]
    ]
    Razy  extends [SymIdent "Razy", SymIdent "Operator", SymIdent "Node", SymIdent "Object"] : [
      .fields: [
        Node & left;
        Node & right;
      ]
      .methods: [
        boolean (Object &)Object.equals;
        int () Object.getHashCode;
        String & () Object.toString;
        int () Operator.value;
        int (int, int)Razy.operator;
      ]
    ]
    String  extends [SymIdent "String", SymIdent "Object"] : [
      .fields: [
        ]
      .methods: [
        int (int)String.charAt;
        boolean (Object &)String.equals;
        String & (String &)String.concat;
        boolean (String &)String.startsWith;
        boolean (String &)String.endsWith;
        int [] & () String.getBytes;
        int (String &, int)String.indexOf;
        int () String.length;
        String & (int, int)String.substring;
        String & () String.toString;
        int () String.getHashCode;
      ]
    ]
    ~cl_TopLevel  extends [] : [
      .fields: [
        ]
      .methods: [
        Array & () Array.toString;
        Object & () Object.toString;
        int () Object.getHashCode;
        boolean (Object &)Object.equals;
        boolean (Object &)String.equals;
        int () String.getHashCode;
        String & () String.toString;
        String & () String.substring;
        int () String.length;
        int (String &, int)String.indexOf;
        String & () String.getBytes;
        boolean (String &)String.endsWith;
        boolean (String &)String.startsWith;
        String & (String &, String &)String.concat;
        int (int)String.charAt;
        boolean (String &)~cl_TopLevel.printString;
        boolean (int)~cl_TopLevel.printInt;
        boolean (boolean)~cl_TopLevel.printByte;
        boolean (boolean)~cl_TopLevel.printBoolean;
        boolean (Array &)~cl_TopLevel.printBinArray;
        String & (boolean)~cl_TopLevel.byteToString;
        String & (boolean)~cl_TopLevel.boolToString;
        String & (int)~cl_TopLevel.intToString;
        boolean (Object &)~cl_TopLevel.print;
        boolean () ~cl_TopLevel.error;
        int () ~cl_TopLevel.readInt;
        String & () ~cl_TopLevel.readString;
        Object & (Object &, Object &)~cl_TopLevel.__cast;
        int () ~cl_TopLevel.main;
        Node & (Node &, Node &)~cl_TopLevel.plus;
        Node & (Node &, Node &)~cl_TopLevel.razy;
        Node & (Node &, Node &)~cl_TopLevel.podziel;
        Node & (Node &, Node &)~cl_TopLevel.minus;
        Node & (int)~cl_TopLevel.liczba;
        int (Node &)Node.value;
        int (Liczba &)Liczba.value;
        int (Operator &, int, int)Operator.operator;
        int (Operator &)Operator.value;
        int (Plus &, int, int)Plus.operator;
        int (Minus &, int, int)Minus.operator;
        int (Razy &, int, int)Razy.operator;
        int (Podziel &, int, int)Podziel.operator;
      ]
    ]
  ]
]
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Collapse eligible edge .L_entry == to => .L_exit
[94m[Info]    [0m[Reporting.Logs.logInfo#75] collapseOnce: Try collapsing CFG nodes in CFG [
[".L_entry"]
".L_entry" -> fromList [] <- fromList []

]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED CFGS

CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Removing unreachable blocks...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_46",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_46",(1,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_52",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_52",(1,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_58",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_58",(1,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_64",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_64",(1,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_69",(1,Ref () (Int ())))], out = [("%a_t_69",(0,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(2,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_return",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_73",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_73",(0,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_78",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_78",(0,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_82",(3,Ref () (Int ()))),("%a_t_80",(1,Ref () (Ref () (Cl () (SymIdent "Operator"))))),("%a_t_81",(2,Ref () (Int ())))], out = [("%a_t_82",(2,Ref () (Int ()))),("%a_t_80",(0,Ref () (Ref () (Cl () (SymIdent "Operator"))))),("%a_t_81",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_87",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_87",(0,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Int ()))),("%a_t_93",(1,Ref () (Ref () (Cl () (SymIdent "Plus"))))),("%a_t_95",(3,Ref () (Int ())))], out = [("%a_t_94",(1,Ref () (Int ()))),("%a_t_93",(0,Ref () (Ref () (Cl () (SymIdent "Plus"))))),("%a_t_95",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_103",(2,Ref () (Int ()))),("%a_t_104",(3,Ref () (Int ()))),("%a_t_102",(1,Ref () (Ref () (Cl () (SymIdent "Minus")))))], out = [("%a_t_103",(1,Ref () (Int ()))),("%a_t_104",(2,Ref () (Int ()))),("%a_t_102",(0,Ref () (Ref () (Cl () (SymIdent "Minus")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_111",(1,Ref () (Ref () (Cl () (SymIdent "Razy"))))),("%a_t_113",(3,Ref () (Int ()))),("%a_t_112",(2,Ref () (Int ())))], out = [("%a_t_111",(0,Ref () (Ref () (Cl () (SymIdent "Razy"))))),("%a_t_113",(2,Ref () (Int ()))),("%a_t_112",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_121",(2,Ref () (Int ()))),("%a_t_122",(3,Ref () (Int ()))),("%a_t_120",(1,Ref () (Ref () (Cl () (SymIdent "Podziel")))))], out = [("%a_t_121",(1,Ref () (Int ()))),("%a_t_122",(2,Ref () (Int ()))),("%a_t_120",(0,Ref () (Ref () (Cl () (SymIdent "Podziel")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_return",(3,Int ()))], out = [("%v_return",(2,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_return",(1,Int ()))], out = [("%v_return",(0,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_return",(0,Int ()))], out = [], use = [("%v_return",Int ())], kill = []
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Analysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Transforming to SSA...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),ICall ./play.lat:2:25 (ValIdent "%v_t_28") (Call ./play.lat:2:25 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:25 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:25 4] []),ICall ./play.lat:2:36 (ValIdent "%v_t_30") (Call ./play.lat:2:36 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:36 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:36 3] []),ICall ./play.lat:2:19 (ValIdent "%v_t_31") (Call ./play.lat:2:19 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [VVal ./play.lat:2:19 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%v_t_28"),VVal ./play.lat:2:19 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%v_t_30")] []),ICall ./play.lat:2:53 (ValIdent "%v_t_33") (Call ./play.lat:2:53 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:53 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:53 2] []),ICall ./play.lat:2:72 (ValIdent "%v_t_35") (Call ./play.lat:2:72 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:72 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:72 4] []),ICall ./play.lat:2:83 (ValIdent "%v_t_37") (Call ./play.lat:2:83 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:83 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:83 2] []),ICall ./play.lat:2:64 (ValIdent "%v_t_38") (Call ./play.lat:2:64 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:2:64 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [VVal ./play.lat:2:64 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%v_t_35"),VVal ./play.lat:2:64 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%v_t_37")] []),ICall ./play.lat:2:48 (ValIdent "%v_t_39") (Call ./play.lat:2:48 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:2:48 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [VVal ./play.lat:2:48 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%v_t_33"),VVal ./play.lat:2:48 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%v_t_38")] []),ICall ./play.lat:2:14 (ValIdent "%v_t_40") (Call ./play.lat:2:14 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%v_t_31"),VVal ./play.lat:2:14 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%v_t_39")] []),ISet ./play.lat:2:10 (ValIdent "%v_t_41") (VVal ./play.lat:2:10 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_t_40")),ICall ./play.lat:3:14 (ValIdent "%v_t_42") (CallVirt ./play.lat:3:14 (Int ./play.lat:36:5) (QIdent ./play.lat:3:14 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:3:14 (Ref ./play.lat:2:5 (Cl ./play.lat:2:5 (SymIdent "Node"))) (ValIdent "%v_t_41")]),IVCall ./play.lat:3:5 (Call ./play.lat:3:5 (Bool inside standard library) (QIdent ./play.lat:3:5 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:3:5 (Int inside standard library) (ValIdent "%v_t_42")] []),ISet ./play.lat:4:5 (ValIdent "%v___temp_0") (VInt ./play.lat:4:5 0),ISet ./play.lat:4:5 (ValIdent "%v_return") (VVal ./play.lat:4:5 (Int ./play.lat:4:12) (ValIdent "%v___temp_0")),IJmp ./play.lat:4:5 (LabIdent ".L_exit"),ILabel ./play.lat:1:1 (LabIdent ".L_exit"),IRet ./play.lat:1:1 (VVal ./play.lat:1:1 (Int ./play.lat:1:1) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%a_t_45"),Param ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%a_t_46")] [ILabel ./play.lat:6:1 (LabIdent ".L_entry"),ILoad ./play.lat:6:1 (ValIdent "%v_t_45") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_45")),ILoad ./play.lat:6:1 (ValIdent "%v_t_46") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_46")),INew ./play.lat:7:20 (ValIdent "%v_t_47") (Cl ./play.lat:7:20 (SymIdent "Plus")),ICall ./play.lat:7:5 (ValIdent "%v_t_48") (Call ./play.lat:7:5 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (QIdent ./play.lat:7:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:5 (Ref ./play.lat:7:24 (Cl ./play.lat:7:24 (SymIdent "Plus"))) (ValIdent "%v_t_47")] [LabIdent "_class_Operator"]),ISet ./play.lat:7:14 (ValIdent "%v_t_49") (VVal ./play.lat:7:14 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (ValIdent "%v_t_48")),ISet ./play.lat:8:5 (ValIdent "%v___temp_1") (VVal ./play.lat:8:5 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%v_t_45")),IStore ./play.lat:8:5 (VVal ./play.lat:8:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_1")) (PFld ./play.lat:8:5 (Ref ./play.lat:8:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator")) (ValIdent "%v_t_49")) (QIdent ./play.lat:8:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:9:5 (ValIdent "%v___temp_2") (VVal ./play.lat:9:5 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%v_t_46")),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_2")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator")) (ValIdent "%v_t_49")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:6:1 (ValIdent "%v_t_50") (Call ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:6:1 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (ValIdent "%v_t_49")] [LabIdent "_class_Node"]),ISet ./play.lat:10:5 (ValIdent "%v___temp_3") (VVal ./play.lat:10:5 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_t_50")),ISet ./play.lat:10:5 (ValIdent "%v_return") (VVal ./play.lat:10:5 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v___temp_3")),IJmp ./play.lat:10:5 (LabIdent ".L_exit"),ILabel ./play.lat:6:1 (LabIdent ".L_exit"),IRet ./play.lat:6:1 (VVal ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:6 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [Param ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%a_t_51"),Param ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%a_t_52")] [ILabel ./play.lat:12:1 (LabIdent ".L_entry"),ILoad ./play.lat:12:1 (ValIdent "%v_t_51") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_51")),ILoad ./play.lat:12:1 (ValIdent "%v_t_52") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_52")),INew ./play.lat:13:20 (ValIdent "%v_t_53") (Cl ./play.lat:13:20 (SymIdent "Razy")),ICall ./play.lat:13:5 (ValIdent "%v_t_54") (Call ./play.lat:13:5 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (QIdent ./play.lat:13:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:5 (Ref ./play.lat:13:24 (Cl ./play.lat:13:24 (SymIdent "Razy"))) (ValIdent "%v_t_53")] [LabIdent "_class_Operator"]),ISet ./play.lat:13:14 (ValIdent "%v_t_55") (VVal ./play.lat:13:14 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (ValIdent "%v_t_54")),ISet ./play.lat:14:5 (ValIdent "%v___temp_4") (VVal ./play.lat:14:5 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%v_t_51")),IStore ./play.lat:14:5 (VVal ./play.lat:14:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_4")) (PFld ./play.lat:14:5 (Ref ./play.lat:14:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Operator")) (ValIdent "%v_t_55")) (QIdent ./play.lat:14:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:15:5 (ValIdent "%v___temp_5") (VVal ./play.lat:15:5 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%v_t_52")),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_5")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Operator")) (ValIdent "%v_t_55")) (QIdent ./play.lat:15:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:12:1 (ValIdent "%v_t_56") (Call ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:12:1 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (ValIdent "%v_t_55")] [LabIdent "_class_Node"]),ISet ./play.lat:16:5 (ValIdent "%v___temp_6") (VVal ./play.lat:16:5 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v_t_56")),ISet ./play.lat:16:5 (ValIdent "%v_return") (VVal ./play.lat:16:5 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v___temp_6")),IJmp ./play.lat:16:5 (LabIdent ".L_exit"),ILabel ./play.lat:12:1 (LabIdent ".L_exit"),IRet ./play.lat:12:1 (VVal ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:6 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [Param ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%a_t_57"),Param ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%a_t_58")] [ILabel ./play.lat:18:1 (LabIdent ".L_entry"),ILoad ./play.lat:18:1 (ValIdent "%v_t_57") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node")))) 0 (ValIdent "%a_t_57")),ILoad ./play.lat:18:1 (ValIdent "%v_t_58") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node")))) 1 (ValIdent "%a_t_58")),INew ./play.lat:19:20 (ValIdent "%v_t_59") (Cl ./play.lat:19:20 (SymIdent "Podziel")),ICall ./play.lat:19:5 (ValIdent "%v_t_60") (Call ./play.lat:19:5 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (QIdent ./play.lat:19:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:19:5 (Ref ./play.lat:19:24 (Cl ./play.lat:19:24 (SymIdent "Podziel"))) (ValIdent "%v_t_59")] [LabIdent "_class_Operator"]),ISet ./play.lat:19:14 (ValIdent "%v_t_61") (VVal ./play.lat:19:14 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (ValIdent "%v_t_60")),ISet ./play.lat:20:5 (ValIdent "%v___temp_7") (VVal ./play.lat:20:5 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%v_t_57")),IStore ./play.lat:20:5 (VVal ./play.lat:20:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_7")) (PFld ./play.lat:20:5 (Ref ./play.lat:20:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:20:5 (Cl ./play.lat:20:5 (SymIdent "Operator")) (ValIdent "%v_t_61")) (QIdent ./play.lat:20:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:21:5 (ValIdent "%v___temp_8") (VVal ./play.lat:21:5 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%v_t_58")),IStore ./play.lat:21:5 (VVal ./play.lat:21:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_8")) (PFld ./play.lat:21:5 (Ref ./play.lat:21:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:21:5 (Cl ./play.lat:21:5 (SymIdent "Operator")) (ValIdent "%v_t_61")) (QIdent ./play.lat:21:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:18:1 (ValIdent "%v_t_62") (Call ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:18:1 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (ValIdent "%v_t_61")] [LabIdent "_class_Node"]),ISet ./play.lat:22:5 (ValIdent "%v___temp_9") (VVal ./play.lat:22:5 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v_t_62")),ISet ./play.lat:22:5 (ValIdent "%v_return") (VVal ./play.lat:22:5 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v___temp_9")),IJmp ./play.lat:22:5 (LabIdent ".L_exit"),ILabel ./play.lat:18:1 (LabIdent ".L_exit"),IRet ./play.lat:18:1 (VVal ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:6 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [Param ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%a_t_63"),Param ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%a_t_64")] [ILabel ./play.lat:24:1 (LabIdent ".L_entry"),ILoad ./play.lat:24:1 (ValIdent "%v_t_63") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node")))) 0 (ValIdent "%a_t_63")),ILoad ./play.lat:24:1 (ValIdent "%v_t_64") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node")))) 1 (ValIdent "%a_t_64")),INew ./play.lat:25:20 (ValIdent "%v_t_65") (Cl ./play.lat:25:20 (SymIdent "Minus")),ICall ./play.lat:25:5 (ValIdent "%v_t_66") (Call ./play.lat:25:5 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (QIdent ./play.lat:25:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:25:5 (Ref ./play.lat:25:24 (Cl ./play.lat:25:24 (SymIdent "Minus"))) (ValIdent "%v_t_65")] [LabIdent "_class_Operator"]),ISet ./play.lat:25:14 (ValIdent "%v_t_67") (VVal ./play.lat:25:14 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (ValIdent "%v_t_66")),ISet ./play.lat:26:5 (ValIdent "%v___temp_10") (VVal ./play.lat:26:5 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%v_t_63")),IStore ./play.lat:26:5 (VVal ./play.lat:26:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_10")) (PFld ./play.lat:26:5 (Ref ./play.lat:26:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:26:5 (Cl ./play.lat:26:5 (SymIdent "Operator")) (ValIdent "%v_t_67")) (QIdent ./play.lat:26:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:27:5 (ValIdent "%v___temp_11") (VVal ./play.lat:27:5 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%v_t_64")),IStore ./play.lat:27:5 (VVal ./play.lat:27:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_11")) (PFld ./play.lat:27:5 (Ref ./play.lat:27:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:27:5 (Cl ./play.lat:27:5 (SymIdent "Operator")) (ValIdent "%v_t_67")) (QIdent ./play.lat:27:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:24:1 (ValIdent "%v_t_68") (Call ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:24:1 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (ValIdent "%v_t_67")] [LabIdent "_class_Node"]),ISet ./play.lat:28:5 (ValIdent "%v___temp_12") (VVal ./play.lat:28:5 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v_t_68")),ISet ./play.lat:28:5 (ValIdent "%v_return") (VVal ./play.lat:28:5 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v___temp_12")),IJmp ./play.lat:28:5 (LabIdent ".L_exit"),ILabel ./play.lat:24:1 (LabIdent ".L_exit"),IRet ./play.lat:24:1 (VVal ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:30:1 (Int ./play.lat:30:13) (ValIdent "%a_t_69")] [ILabel ./play.lat:30:1 (LabIdent ".L_entry"),ILoad ./play.lat:30:1 (ValIdent "%v_t_69") (PParam ./play.lat:30:1 (Ref ./play.lat:30:1 (Int ./play.lat:30:13)) 0 (ValIdent "%a_t_69")),INew ./play.lat:31:18 (ValIdent "%v_t_70") (Cl ./play.lat:31:18 (SymIdent "Liczba")),ISet ./play.lat:31:12 (ValIdent "%v_t_71") (VVal ./play.lat:31:12 (Ref ./play.lat:31:22 (Cl ./play.lat:31:22 (SymIdent "Liczba"))) (ValIdent "%v_t_70")),ISet ./play.lat:32:5 (ValIdent "%v___temp_13") (VVal ./play.lat:32:5 (Int ./play.lat:30:13) (ValIdent "%v_t_69")),IStore ./play.lat:32:5 (VVal ./play.lat:32:5 (Int ./play.lat:42:5) (ValIdent "%v___temp_13")) (PFld ./play.lat:32:5 (Ref ./play.lat:32:5 (Int ./play.lat:42:5)) (VVal ./play.lat:32:5 (Cl ./play.lat:32:5 (SymIdent "Liczba")) (ValIdent "%v_t_71")) (QIdent ./play.lat:32:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:30:1 (ValIdent "%v_t_72") (Call ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:30:1 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "Liczba"))) (ValIdent "%v_t_71")] [LabIdent "_class_Node"]),ISet ./play.lat:33:5 (ValIdent "%v___temp_14") (VVal ./play.lat:33:5 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v_t_72")),ISet ./play.lat:33:5 (ValIdent "%v_return") (VVal ./play.lat:33:5 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v___temp_14")),IJmp ./play.lat:33:5 (LabIdent ".L_exit"),ILabel ./play.lat:30:1 (LabIdent ".L_exit"),IRet ./play.lat:30:1 (VVal ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:36:5 (Int ./play.lat:36:5) (QIdent ./play.lat:36:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:36:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_73")] [ILabel ./play.lat:36:5 (LabIdent ".L_entry"),ILoad ./play.lat:36:5 (ValIdent "%v_t_73") (PParam ./play.lat:36:5 (Ref ./play.lat:36:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_73")),INewStr ./play.lat:37:21 (ValIdent "%v_t_75") "Node.value not implemented",IVCall ./play.lat:37:9 (Call ./play.lat:37:9 (Bool inside standard library) (QIdent ./play.lat:37:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:37:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75")] []),ISet ./play.lat:38:9 (ValIdent "%v___temp_15") (VInt ./play.lat:38:9 0),ISet ./play.lat:38:9 (ValIdent "%v_return") (VVal ./play.lat:38:9 (Int ./play.lat:38:16) (ValIdent "%v___temp_15")),IJmp ./play.lat:38:9 (LabIdent ".L_exit"),ILabel ./play.lat:36:5 (LabIdent ".L_exit"),IRet ./play.lat:36:5 (VVal ./play.lat:36:5 (Int ./play.lat:36:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:43:5 (Int ./play.lat:43:5) (QIdent ./play.lat:43:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_78")] [ILabel ./play.lat:43:5 (LabIdent ".L_entry"),ILoad ./play.lat:43:5 (ValIdent "%v_t_78") (PParam ./play.lat:43:5 (Ref ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_78")),ILoad ./play.lat:44:16 (ValIdent "%v_t_79") (PFld ./play.lat:44:16 (Ref ./play.lat:44:16 (Int ./play.lat:42:5)) (VVal ./play.lat:44:16 (Cl ./play.lat:44:16 (SymIdent "Liczba")) (ValIdent "%v_t_78")) (QIdent ./play.lat:44:16 (SymIdent "Liczba") (SymIdent "v"))),ISet ./play.lat:44:9 (ValIdent "%v___temp_16") (VVal ./play.lat:44:9 (Int ./play.lat:42:5) (ValIdent "%v_t_79")),ISet ./play.lat:44:9 (ValIdent "%v_return") (VVal ./play.lat:44:9 (Int ./play.lat:42:5) (ValIdent "%v___temp_16")),IJmp ./play.lat:44:9 (LabIdent ".L_exit"),ILabel ./play.lat:43:5 (LabIdent ".L_exit"),IRet ./play.lat:43:5 (VVal ./play.lat:43:5 (Int ./play.lat:43:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:50:5 (Int ./play.lat:50:5) (QIdent ./play.lat:50:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_80"),Param ./play.lat:50:5 (Int ./play.lat:50:18) (ValIdent "%a_t_81"),Param ./play.lat:50:5 (Int ./play.lat:50:26) (ValIdent "%a_t_82")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),ILoad ./play.lat:50:5 (ValIdent "%v_t_80") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_80")),ILoad ./play.lat:50:5 (ValIdent "%v_t_81") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Int ./play.lat:50:18)) 1 (ValIdent "%a_t_81")),ILoad ./play.lat:50:5 (ValIdent "%v_t_82") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Int ./play.lat:50:26)) 2 (ValIdent "%a_t_82")),INewStr ./play.lat:51:21 (ValIdent "%v_t_84") "Operator.operator not implemented",IVCall ./play.lat:51:9 (Call ./play.lat:51:9 (Bool inside standard library) (QIdent ./play.lat:51:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:51:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84")] []),ISet ./play.lat:52:9 (ValIdent "%v___temp_17") (VInt ./play.lat:52:9 0),ISet ./play.lat:52:9 (ValIdent "%v_return") (VVal ./play.lat:52:9 (Int ./play.lat:52:16) (ValIdent "%v___temp_17")),IJmp ./play.lat:52:9 (LabIdent ".L_exit"),ILabel ./play.lat:50:5 (LabIdent ".L_exit"),IRet ./play.lat:50:5 (VVal ./play.lat:50:5 (Int ./play.lat:50:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:54:5 (Int ./play.lat:54:5) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_87")] [ILabel ./play.lat:54:5 (LabIdent ".L_entry"),ILoad ./play.lat:54:5 (ValIdent "%v_t_87") (PParam ./play.lat:54:5 (Ref ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_87")),ILoad ./play.lat:55:30 (ValIdent "%v_t_88") (PFld ./play.lat:55:30 (Ref ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:55:30 (Cl ./play.lat:55:30 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:30 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:55:30 (ValIdent "%v_t_89") (CallVirt ./play.lat:55:30 (Int ./play.lat:36:5) (QIdent ./play.lat:55:30 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v_t_88")]),ILoad ./play.lat:55:44 (ValIdent "%v_t_90") (PFld ./play.lat:55:44 (Ref ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:55:44 (Cl ./play.lat:55:44 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:44 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:55:44 (ValIdent "%v_t_91") (CallVirt ./play.lat:55:44 (Int ./play.lat:36:5) (QIdent ./play.lat:55:44 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v_t_90")]),ICall ./play.lat:55:16 (ValIdent "%v_t_92") (CallVirt ./play.lat:55:16 (Int ./play.lat:50:5) (QIdent ./play.lat:55:16 (SymIdent "Operator") (SymIdent "operator")) [VVal ./play.lat:55:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_87"),VVal ./play.lat:55:16 (Int ./play.lat:50:18) (ValIdent "%v_t_89"),VVal ./play.lat:55:16 (Int ./play.lat:50:26) (ValIdent "%v_t_91")]),ISet ./play.lat:55:9 (ValIdent "%v___temp_18") (VVal ./play.lat:55:9 (Int ./play.lat:50:5) (ValIdent "%v_t_92")),ISet ./play.lat:55:9 (ValIdent "%v_return") (VVal ./play.lat:55:9 (Int ./play.lat:50:5) (ValIdent "%v___temp_18")),IJmp ./play.lat:55:9 (LabIdent ".L_exit"),ILabel ./play.lat:54:5 (LabIdent ".L_exit"),IRet ./play.lat:54:5 (VVal ./play.lat:54:5 (Int ./play.lat:54:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:59:5 (Int ./play.lat:59:5) (QIdent ./play.lat:59:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:59:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_93"),Param ./play.lat:59:5 (Int ./play.lat:59:18) (ValIdent "%a_t_94"),Param ./play.lat:59:5 (Int ./play.lat:59:25) (ValIdent "%a_t_95")] [ILabel ./play.lat:59:5 (LabIdent ".L_entry"),ILoad ./play.lat:59:5 (ValIdent "%v_t_93") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_93")),ILoad ./play.lat:59:5 (ValIdent "%v_t_94") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:18)) 1 (ValIdent "%a_t_94")),ILoad ./play.lat:59:5 (ValIdent "%v_t_95") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:25)) 2 (ValIdent "%a_t_95")),IVCall ./play.lat:60:9 (Call ./play.lat:60:9 (Bool inside standard library) (QIdent ./play.lat:60:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:60:9 (Int inside standard library) (ValIdent "%v_t_94")] []),INewStr ./play.lat:61:21 (ValIdent "%v_t_98") "+",IVCall ./play.lat:61:9 (Call ./play.lat:61:9 (Bool inside standard library) (QIdent ./play.lat:61:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:61:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_98")] []),IVCall ./play.lat:62:9 (Call ./play.lat:62:9 (Bool inside standard library) (QIdent ./play.lat:62:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:62:9 (Int inside standard library) (ValIdent "%v_t_95")] []),IOp ./play.lat:63:18 (ValIdent "%v_t_101") (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_94")) (OpAdd ./play.lat:63:18) (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_95")),ISet ./play.lat:63:9 (ValIdent "%v___temp_19") (VVal ./play.lat:63:9 (Int ./play.lat:59:18) (ValIdent "%v_t_101")),ISet ./play.lat:63:9 (ValIdent "%v_return") (VVal ./play.lat:63:9 (Int ./play.lat:59:18) (ValIdent "%v___temp_19")),IJmp ./play.lat:63:9 (LabIdent ".L_exit"),ILabel ./play.lat:59:5 (LabIdent ".L_exit"),IRet ./play.lat:59:5 (VVal ./play.lat:59:5 (Int ./play.lat:59:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:67:5 (Int ./play.lat:67:5) (QIdent ./play.lat:67:9 (SymIdent "Minus") (SymIdent "operator")) [Param ./play.lat:67:5 (Ref  (Cl  (SymIdent "Minus"))) (ValIdent "%a_t_102"),Param ./play.lat:67:5 (Int ./play.lat:67:18) (ValIdent "%a_t_103"),Param ./play.lat:67:5 (Int ./play.lat:67:25) (ValIdent "%a_t_104")] [ILabel ./play.lat:67:5 (LabIdent ".L_entry"),ILoad ./play.lat:67:5 (ValIdent "%v_t_102") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Ref  (Cl  (SymIdent "Minus")))) 0 (ValIdent "%a_t_102")),ILoad ./play.lat:67:5 (ValIdent "%v_t_103") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:18)) 1 (ValIdent "%a_t_103")),ILoad ./play.lat:67:5 (ValIdent "%v_t_104") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:25)) 2 (ValIdent "%a_t_104")),IVCall ./play.lat:68:9 (Call ./play.lat:68:9 (Bool inside standard library) (QIdent ./play.lat:68:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:68:9 (Int inside standard library) (ValIdent "%v_t_103")] []),INewStr ./play.lat:69:21 (ValIdent "%v_t_107") "-",IVCall ./play.lat:69:9 (Call ./play.lat:69:9 (Bool inside standard library) (QIdent ./play.lat:69:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:69:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_107")] []),IVCall ./play.lat:70:9 (Call ./play.lat:70:9 (Bool inside standard library) (QIdent ./play.lat:70:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:70:9 (Int inside standard library) (ValIdent "%v_t_104")] []),IOp ./play.lat:71:18 (ValIdent "%v_t_110") (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_103")) (OpSub ./play.lat:71:18) (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_104")),ISet ./play.lat:71:9 (ValIdent "%v___temp_20") (VVal ./play.lat:71:9 (Int ./play.lat:67:18) (ValIdent "%v_t_110")),ISet ./play.lat:71:9 (ValIdent "%v_return") (VVal ./play.lat:71:9 (Int ./play.lat:67:18) (ValIdent "%v___temp_20")),IJmp ./play.lat:71:9 (LabIdent ".L_exit"),ILabel ./play.lat:67:5 (LabIdent ".L_exit"),IRet ./play.lat:67:5 (VVal ./play.lat:67:5 (Int ./play.lat:67:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:75:5 (Int ./play.lat:75:5) (QIdent ./play.lat:75:9 (SymIdent "Razy") (SymIdent "operator")) [Param ./play.lat:75:5 (Ref  (Cl  (SymIdent "Razy"))) (ValIdent "%a_t_111"),Param ./play.lat:75:5 (Int ./play.lat:75:18) (ValIdent "%a_t_112"),Param ./play.lat:75:5 (Int ./play.lat:75:25) (ValIdent "%a_t_113")] [ILabel ./play.lat:75:5 (LabIdent ".L_entry"),ILoad ./play.lat:75:5 (ValIdent "%v_t_111") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Ref  (Cl  (SymIdent "Razy")))) 0 (ValIdent "%a_t_111")),ILoad ./play.lat:75:5 (ValIdent "%v_t_112") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:18)) 1 (ValIdent "%a_t_112")),ILoad ./play.lat:75:5 (ValIdent "%v_t_113") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:25)) 2 (ValIdent "%a_t_113")),IVCall ./play.lat:76:9 (Call ./play.lat:76:9 (Bool inside standard library) (QIdent ./play.lat:76:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:76:9 (Int inside standard library) (ValIdent "%v_t_112")] []),INewStr ./play.lat:77:21 (ValIdent "%v_t_116") "*",IVCall ./play.lat:77:9 (Call ./play.lat:77:9 (Bool inside standard library) (QIdent ./play.lat:77:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:77:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_116")] []),IVCall ./play.lat:78:9 (Call ./play.lat:78:9 (Bool inside standard library) (QIdent ./play.lat:78:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:78:9 (Int inside standard library) (ValIdent "%v_t_113")] []),IOp ./play.lat:79:18 (ValIdent "%v_t_119") (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_112")) (OpMul ./play.lat:79:18) (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_113")),ISet ./play.lat:79:9 (ValIdent "%v___temp_21") (VVal ./play.lat:79:9 (Int ./play.lat:75:18) (ValIdent "%v_t_119")),ISet ./play.lat:79:9 (ValIdent "%v_return") (VVal ./play.lat:79:9 (Int ./play.lat:75:18) (ValIdent "%v___temp_21")),IJmp ./play.lat:79:9 (LabIdent ".L_exit"),ILabel ./play.lat:75:5 (LabIdent ".L_exit"),IRet ./play.lat:75:5 (VVal ./play.lat:75:5 (Int ./play.lat:75:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:83:5 (Int ./play.lat:83:5) (QIdent ./play.lat:83:9 (SymIdent "Podziel") (SymIdent "operator")) [Param ./play.lat:83:5 (Ref  (Cl  (SymIdent "Podziel"))) (ValIdent "%a_t_120"),Param ./play.lat:83:5 (Int ./play.lat:83:18) (ValIdent "%a_t_121"),Param ./play.lat:83:5 (Int ./play.lat:83:25) (ValIdent "%a_t_122")] [ILabel ./play.lat:83:5 (LabIdent ".L_entry"),ILoad ./play.lat:83:5 (ValIdent "%v_t_120") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Ref  (Cl  (SymIdent "Podziel")))) 0 (ValIdent "%a_t_120")),ILoad ./play.lat:83:5 (ValIdent "%v_t_121") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:18)) 1 (ValIdent "%a_t_121")),ILoad ./play.lat:83:5 (ValIdent "%v_t_122") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:25)) 2 (ValIdent "%a_t_122")),IVCall ./play.lat:84:9 (Call ./play.lat:84:9 (Bool inside standard library) (QIdent ./play.lat:84:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:84:9 (Int inside standard library) (ValIdent "%v_t_121")] []),INewStr ./play.lat:85:21 (ValIdent "%v_t_125") "/",IVCall ./play.lat:85:9 (Call ./play.lat:85:9 (Bool inside standard library) (QIdent ./play.lat:85:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:85:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_125")] []),IVCall ./play.lat:86:9 (Call ./play.lat:86:9 (Bool inside standard library) (QIdent ./play.lat:86:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:86:9 (Int inside standard library) (ValIdent "%v_t_122")] []),IOp ./play.lat:87:18 (ValIdent "%v_t_128") (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_121")) (OpDiv ./play.lat:87:18) (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_122")),ISet ./play.lat:87:9 (ValIdent "%v___temp_22") (VVal ./play.lat:87:9 (Int ./play.lat:83:18) (ValIdent "%v_t_128")),ISet ./play.lat:87:9 (ValIdent "%v_return") (VVal ./play.lat:87:9 (Int ./play.lat:83:18) (ValIdent "%v___temp_22")),IJmp ./play.lat:87:9 (LabIdent ".L_exit"),ILabel ./play.lat:83:5 (LabIdent ".L_exit"),IRet ./play.lat:83:5 (VVal ./play.lat:83:5 (Int ./play.lat:83:5) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END SSA CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Optimising Espresso...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> ENTIRE OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),ICall ./play.lat:2:25 (ValIdent "%v_t_28") (Call ./play.lat:2:25 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:25 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:25 4] []),ICall ./play.lat:2:36 (ValIdent "%v_t_30") (Call ./play.lat:2:36 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:36 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:36 3] []),ICall ./play.lat:2:19 (ValIdent "%v_t_31") (Call ./play.lat:2:19 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [VVal ./play.lat:2:19 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%v_t_28"),VVal ./play.lat:2:19 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%v_t_30")] []),ICall ./play.lat:2:53 (ValIdent "%v_t_33") (Call ./play.lat:2:53 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:53 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:53 2] []),ICall ./play.lat:2:72 (ValIdent "%v_t_35") (Call ./play.lat:2:72 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:72 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:72 4] []),ICall ./play.lat:2:83 (ValIdent "%v_t_37") (Call ./play.lat:2:83 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:83 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:83 2] []),ICall ./play.lat:2:64 (ValIdent "%v_t_38") (Call ./play.lat:2:64 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:2:64 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [VVal ./play.lat:2:64 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%v_t_35"),VVal ./play.lat:2:64 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%v_t_37")] []),ICall ./play.lat:2:48 (ValIdent "%v_t_39") (Call ./play.lat:2:48 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:2:48 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [VVal ./play.lat:2:48 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%v_t_33"),VVal ./play.lat:2:48 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%v_t_38")] []),ICall ./play.lat:2:14 (ValIdent "%v_t_40") (Call ./play.lat:2:14 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%v_t_31"),VVal ./play.lat:2:14 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%v_t_39")] []),ISet ./play.lat:2:10 (ValIdent "%v_t_41") (VVal ./play.lat:2:10 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_t_40")),ICall ./play.lat:3:14 (ValIdent "%v_t_42") (CallVirt ./play.lat:3:14 (Int ./play.lat:36:5) (QIdent ./play.lat:3:14 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:3:14 (Ref ./play.lat:2:5 (Cl ./play.lat:2:5 (SymIdent "Node"))) (ValIdent "%v_t_41")]),IVCall ./play.lat:3:5 (Call ./play.lat:3:5 (Bool inside standard library) (QIdent ./play.lat:3:5 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:3:5 (Int inside standard library) (ValIdent "%v_t_42")] []),ISet ./play.lat:4:5 (ValIdent "%v___temp_0") (VInt ./play.lat:4:5 0),ISet ./play.lat:4:5 (ValIdent "%v_return") (VVal ./play.lat:4:5 (Int ./play.lat:4:12) (ValIdent "%v___temp_0")),IJmp ./play.lat:4:5 (LabIdent ".L_exit"),ILabel ./play.lat:1:1 (LabIdent ".L_exit"),IRet ./play.lat:1:1 (VVal ./play.lat:1:1 (Int ./play.lat:1:1) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%a_t_45"),Param ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%a_t_46")] [ILabel ./play.lat:6:1 (LabIdent ".L_entry"),ILoad ./play.lat:6:1 (ValIdent "%v_t_45") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_45")),ILoad ./play.lat:6:1 (ValIdent "%v_t_46") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_46")),INew ./play.lat:7:20 (ValIdent "%v_t_47") (Cl ./play.lat:7:20 (SymIdent "Plus")),ICall ./play.lat:7:5 (ValIdent "%v_t_48") (Call ./play.lat:7:5 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (QIdent ./play.lat:7:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:5 (Ref ./play.lat:7:24 (Cl ./play.lat:7:24 (SymIdent "Plus"))) (ValIdent "%v_t_47")] [LabIdent "_class_Operator"]),ISet ./play.lat:7:14 (ValIdent "%v_t_49") (VVal ./play.lat:7:14 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (ValIdent "%v_t_48")),ISet ./play.lat:8:5 (ValIdent "%v___temp_1") (VVal ./play.lat:8:5 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%v_t_45")),IStore ./play.lat:8:5 (VVal ./play.lat:8:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_1")) (PFld ./play.lat:8:5 (Ref ./play.lat:8:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator")) (ValIdent "%v_t_49")) (QIdent ./play.lat:8:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:9:5 (ValIdent "%v___temp_2") (VVal ./play.lat:9:5 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%v_t_46")),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_2")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator")) (ValIdent "%v_t_49")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:6:1 (ValIdent "%v_t_50") (Call ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:6:1 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (ValIdent "%v_t_49")] [LabIdent "_class_Node"]),ISet ./play.lat:10:5 (ValIdent "%v___temp_3") (VVal ./play.lat:10:5 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_t_50")),ISet ./play.lat:10:5 (ValIdent "%v_return") (VVal ./play.lat:10:5 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v___temp_3")),IJmp ./play.lat:10:5 (LabIdent ".L_exit"),ILabel ./play.lat:6:1 (LabIdent ".L_exit"),IRet ./play.lat:6:1 (VVal ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:6 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [Param ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%a_t_51"),Param ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%a_t_52")] [ILabel ./play.lat:12:1 (LabIdent ".L_entry"),ILoad ./play.lat:12:1 (ValIdent "%v_t_51") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_51")),ILoad ./play.lat:12:1 (ValIdent "%v_t_52") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_52")),INew ./play.lat:13:20 (ValIdent "%v_t_53") (Cl ./play.lat:13:20 (SymIdent "Razy")),ICall ./play.lat:13:5 (ValIdent "%v_t_54") (Call ./play.lat:13:5 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (QIdent ./play.lat:13:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:5 (Ref ./play.lat:13:24 (Cl ./play.lat:13:24 (SymIdent "Razy"))) (ValIdent "%v_t_53")] [LabIdent "_class_Operator"]),ISet ./play.lat:13:14 (ValIdent "%v_t_55") (VVal ./play.lat:13:14 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (ValIdent "%v_t_54")),ISet ./play.lat:14:5 (ValIdent "%v___temp_4") (VVal ./play.lat:14:5 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%v_t_51")),IStore ./play.lat:14:5 (VVal ./play.lat:14:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_4")) (PFld ./play.lat:14:5 (Ref ./play.lat:14:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Operator")) (ValIdent "%v_t_55")) (QIdent ./play.lat:14:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:15:5 (ValIdent "%v___temp_5") (VVal ./play.lat:15:5 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%v_t_52")),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_5")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Operator")) (ValIdent "%v_t_55")) (QIdent ./play.lat:15:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:12:1 (ValIdent "%v_t_56") (Call ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:12:1 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (ValIdent "%v_t_55")] [LabIdent "_class_Node"]),ISet ./play.lat:16:5 (ValIdent "%v___temp_6") (VVal ./play.lat:16:5 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v_t_56")),ISet ./play.lat:16:5 (ValIdent "%v_return") (VVal ./play.lat:16:5 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v___temp_6")),IJmp ./play.lat:16:5 (LabIdent ".L_exit"),ILabel ./play.lat:12:1 (LabIdent ".L_exit"),IRet ./play.lat:12:1 (VVal ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:6 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [Param ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%a_t_57"),Param ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%a_t_58")] [ILabel ./play.lat:18:1 (LabIdent ".L_entry"),ILoad ./play.lat:18:1 (ValIdent "%v_t_57") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node")))) 0 (ValIdent "%a_t_57")),ILoad ./play.lat:18:1 (ValIdent "%v_t_58") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node")))) 1 (ValIdent "%a_t_58")),INew ./play.lat:19:20 (ValIdent "%v_t_59") (Cl ./play.lat:19:20 (SymIdent "Podziel")),ICall ./play.lat:19:5 (ValIdent "%v_t_60") (Call ./play.lat:19:5 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (QIdent ./play.lat:19:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:19:5 (Ref ./play.lat:19:24 (Cl ./play.lat:19:24 (SymIdent "Podziel"))) (ValIdent "%v_t_59")] [LabIdent "_class_Operator"]),ISet ./play.lat:19:14 (ValIdent "%v_t_61") (VVal ./play.lat:19:14 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (ValIdent "%v_t_60")),ISet ./play.lat:20:5 (ValIdent "%v___temp_7") (VVal ./play.lat:20:5 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%v_t_57")),IStore ./play.lat:20:5 (VVal ./play.lat:20:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_7")) (PFld ./play.lat:20:5 (Ref ./play.lat:20:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:20:5 (Cl ./play.lat:20:5 (SymIdent "Operator")) (ValIdent "%v_t_61")) (QIdent ./play.lat:20:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:21:5 (ValIdent "%v___temp_8") (VVal ./play.lat:21:5 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%v_t_58")),IStore ./play.lat:21:5 (VVal ./play.lat:21:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_8")) (PFld ./play.lat:21:5 (Ref ./play.lat:21:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:21:5 (Cl ./play.lat:21:5 (SymIdent "Operator")) (ValIdent "%v_t_61")) (QIdent ./play.lat:21:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:18:1 (ValIdent "%v_t_62") (Call ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:18:1 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (ValIdent "%v_t_61")] [LabIdent "_class_Node"]),ISet ./play.lat:22:5 (ValIdent "%v___temp_9") (VVal ./play.lat:22:5 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v_t_62")),ISet ./play.lat:22:5 (ValIdent "%v_return") (VVal ./play.lat:22:5 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v___temp_9")),IJmp ./play.lat:22:5 (LabIdent ".L_exit"),ILabel ./play.lat:18:1 (LabIdent ".L_exit"),IRet ./play.lat:18:1 (VVal ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:6 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [Param ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%a_t_63"),Param ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%a_t_64")] [ILabel ./play.lat:24:1 (LabIdent ".L_entry"),ILoad ./play.lat:24:1 (ValIdent "%v_t_63") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node")))) 0 (ValIdent "%a_t_63")),ILoad ./play.lat:24:1 (ValIdent "%v_t_64") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node")))) 1 (ValIdent "%a_t_64")),INew ./play.lat:25:20 (ValIdent "%v_t_65") (Cl ./play.lat:25:20 (SymIdent "Minus")),ICall ./play.lat:25:5 (ValIdent "%v_t_66") (Call ./play.lat:25:5 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (QIdent ./play.lat:25:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:25:5 (Ref ./play.lat:25:24 (Cl ./play.lat:25:24 (SymIdent "Minus"))) (ValIdent "%v_t_65")] [LabIdent "_class_Operator"]),ISet ./play.lat:25:14 (ValIdent "%v_t_67") (VVal ./play.lat:25:14 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (ValIdent "%v_t_66")),ISet ./play.lat:26:5 (ValIdent "%v___temp_10") (VVal ./play.lat:26:5 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%v_t_63")),IStore ./play.lat:26:5 (VVal ./play.lat:26:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v___temp_10")) (PFld ./play.lat:26:5 (Ref ./play.lat:26:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:26:5 (Cl ./play.lat:26:5 (SymIdent "Operator")) (ValIdent "%v_t_67")) (QIdent ./play.lat:26:5 (SymIdent "Operator") (SymIdent "left"))),ISet ./play.lat:27:5 (ValIdent "%v___temp_11") (VVal ./play.lat:27:5 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%v_t_64")),IStore ./play.lat:27:5 (VVal ./play.lat:27:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v___temp_11")) (PFld ./play.lat:27:5 (Ref ./play.lat:27:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:27:5 (Cl ./play.lat:27:5 (SymIdent "Operator")) (ValIdent "%v_t_67")) (QIdent ./play.lat:27:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:24:1 (ValIdent "%v_t_68") (Call ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:24:1 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (ValIdent "%v_t_67")] [LabIdent "_class_Node"]),ISet ./play.lat:28:5 (ValIdent "%v___temp_12") (VVal ./play.lat:28:5 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v_t_68")),ISet ./play.lat:28:5 (ValIdent "%v_return") (VVal ./play.lat:28:5 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v___temp_12")),IJmp ./play.lat:28:5 (LabIdent ".L_exit"),ILabel ./play.lat:24:1 (LabIdent ".L_exit"),IRet ./play.lat:24:1 (VVal ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:30:1 (Int ./play.lat:30:13) (ValIdent "%a_t_69")] [ILabel ./play.lat:30:1 (LabIdent ".L_entry"),ILoad ./play.lat:30:1 (ValIdent "%v_t_69") (PParam ./play.lat:30:1 (Ref ./play.lat:30:1 (Int ./play.lat:30:13)) 0 (ValIdent "%a_t_69")),INew ./play.lat:31:18 (ValIdent "%v_t_70") (Cl ./play.lat:31:18 (SymIdent "Liczba")),ISet ./play.lat:31:12 (ValIdent "%v_t_71") (VVal ./play.lat:31:12 (Ref ./play.lat:31:22 (Cl ./play.lat:31:22 (SymIdent "Liczba"))) (ValIdent "%v_t_70")),ISet ./play.lat:32:5 (ValIdent "%v___temp_13") (VVal ./play.lat:32:5 (Int ./play.lat:30:13) (ValIdent "%v_t_69")),IStore ./play.lat:32:5 (VVal ./play.lat:32:5 (Int ./play.lat:42:5) (ValIdent "%v___temp_13")) (PFld ./play.lat:32:5 (Ref ./play.lat:32:5 (Int ./play.lat:42:5)) (VVal ./play.lat:32:5 (Cl ./play.lat:32:5 (SymIdent "Liczba")) (ValIdent "%v_t_71")) (QIdent ./play.lat:32:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:30:1 (ValIdent "%v_t_72") (Call ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:30:1 (Ref ./play.lat:31:5 (Cl ./play.lat:31:5 (SymIdent "Liczba"))) (ValIdent "%v_t_71")] [LabIdent "_class_Node"]),ISet ./play.lat:33:5 (ValIdent "%v___temp_14") (VVal ./play.lat:33:5 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v_t_72")),ISet ./play.lat:33:5 (ValIdent "%v_return") (VVal ./play.lat:33:5 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v___temp_14")),IJmp ./play.lat:33:5 (LabIdent ".L_exit"),ILabel ./play.lat:30:1 (LabIdent ".L_exit"),IRet ./play.lat:30:1 (VVal ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:36:5 (Int ./play.lat:36:5) (QIdent ./play.lat:36:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:36:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_73")] [ILabel ./play.lat:36:5 (LabIdent ".L_entry"),ILoad ./play.lat:36:5 (ValIdent "%v_t_73") (PParam ./play.lat:36:5 (Ref ./play.lat:36:5 (Ref  (Cl  (SymIdent "Node")))) 0 (ValIdent "%a_t_73")),INewStr ./play.lat:37:21 (ValIdent "%v_t_75") "Node.value not implemented",IVCall ./play.lat:37:9 (Call ./play.lat:37:9 (Bool inside standard library) (QIdent ./play.lat:37:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:37:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75")] []),ISet ./play.lat:38:9 (ValIdent "%v___temp_15") (VInt ./play.lat:38:9 0),ISet ./play.lat:38:9 (ValIdent "%v_return") (VVal ./play.lat:38:9 (Int ./play.lat:38:16) (ValIdent "%v___temp_15")),IJmp ./play.lat:38:9 (LabIdent ".L_exit"),ILabel ./play.lat:36:5 (LabIdent ".L_exit"),IRet ./play.lat:36:5 (VVal ./play.lat:36:5 (Int ./play.lat:36:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:43:5 (Int ./play.lat:43:5) (QIdent ./play.lat:43:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_78")] [ILabel ./play.lat:43:5 (LabIdent ".L_entry"),ILoad ./play.lat:43:5 (ValIdent "%v_t_78") (PParam ./play.lat:43:5 (Ref ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_78")),ILoad ./play.lat:44:16 (ValIdent "%v_t_79") (PFld ./play.lat:44:16 (Ref ./play.lat:44:16 (Int ./play.lat:42:5)) (VVal ./play.lat:44:16 (Cl ./play.lat:44:16 (SymIdent "Liczba")) (ValIdent "%v_t_78")) (QIdent ./play.lat:44:16 (SymIdent "Liczba") (SymIdent "v"))),ISet ./play.lat:44:9 (ValIdent "%v___temp_16") (VVal ./play.lat:44:9 (Int ./play.lat:42:5) (ValIdent "%v_t_79")),ISet ./play.lat:44:9 (ValIdent "%v_return") (VVal ./play.lat:44:9 (Int ./play.lat:42:5) (ValIdent "%v___temp_16")),IJmp ./play.lat:44:9 (LabIdent ".L_exit"),ILabel ./play.lat:43:5 (LabIdent ".L_exit"),IRet ./play.lat:43:5 (VVal ./play.lat:43:5 (Int ./play.lat:43:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:50:5 (Int ./play.lat:50:5) (QIdent ./play.lat:50:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_80"),Param ./play.lat:50:5 (Int ./play.lat:50:18) (ValIdent "%a_t_81"),Param ./play.lat:50:5 (Int ./play.lat:50:26) (ValIdent "%a_t_82")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),ILoad ./play.lat:50:5 (ValIdent "%v_t_80") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_80")),ILoad ./play.lat:50:5 (ValIdent "%v_t_81") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Int ./play.lat:50:18)) 1 (ValIdent "%a_t_81")),ILoad ./play.lat:50:5 (ValIdent "%v_t_82") (PParam ./play.lat:50:5 (Ref ./play.lat:50:5 (Int ./play.lat:50:26)) 2 (ValIdent "%a_t_82")),INewStr ./play.lat:51:21 (ValIdent "%v_t_84") "Operator.operator not implemented",IVCall ./play.lat:51:9 (Call ./play.lat:51:9 (Bool inside standard library) (QIdent ./play.lat:51:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:51:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84")] []),ISet ./play.lat:52:9 (ValIdent "%v___temp_17") (VInt ./play.lat:52:9 0),ISet ./play.lat:52:9 (ValIdent "%v_return") (VVal ./play.lat:52:9 (Int ./play.lat:52:16) (ValIdent "%v___temp_17")),IJmp ./play.lat:52:9 (LabIdent ".L_exit"),ILabel ./play.lat:50:5 (LabIdent ".L_exit"),IRet ./play.lat:50:5 (VVal ./play.lat:50:5 (Int ./play.lat:50:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:54:5 (Int ./play.lat:54:5) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_87")] [ILabel ./play.lat:54:5 (LabIdent ".L_entry"),ILoad ./play.lat:54:5 (ValIdent "%v_t_87") (PParam ./play.lat:54:5 (Ref ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_87")),ILoad ./play.lat:55:30 (ValIdent "%v_t_88") (PFld ./play.lat:55:30 (Ref ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:55:30 (Cl ./play.lat:55:30 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:30 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:55:30 (ValIdent "%v_t_89") (CallVirt ./play.lat:55:30 (Int ./play.lat:36:5) (QIdent ./play.lat:55:30 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v_t_88")]),ILoad ./play.lat:55:44 (ValIdent "%v_t_90") (PFld ./play.lat:55:44 (Ref ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:55:44 (Cl ./play.lat:55:44 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:44 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:55:44 (ValIdent "%v_t_91") (CallVirt ./play.lat:55:44 (Int ./play.lat:36:5) (QIdent ./play.lat:55:44 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v_t_90")]),ICall ./play.lat:55:16 (ValIdent "%v_t_92") (CallVirt ./play.lat:55:16 (Int ./play.lat:50:5) (QIdent ./play.lat:55:16 (SymIdent "Operator") (SymIdent "operator")) [VVal ./play.lat:55:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_87"),VVal ./play.lat:55:16 (Int ./play.lat:50:18) (ValIdent "%v_t_89"),VVal ./play.lat:55:16 (Int ./play.lat:50:26) (ValIdent "%v_t_91")]),ISet ./play.lat:55:9 (ValIdent "%v___temp_18") (VVal ./play.lat:55:9 (Int ./play.lat:50:5) (ValIdent "%v_t_92")),ISet ./play.lat:55:9 (ValIdent "%v_return") (VVal ./play.lat:55:9 (Int ./play.lat:50:5) (ValIdent "%v___temp_18")),IJmp ./play.lat:55:9 (LabIdent ".L_exit"),ILabel ./play.lat:54:5 (LabIdent ".L_exit"),IRet ./play.lat:54:5 (VVal ./play.lat:54:5 (Int ./play.lat:54:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:59:5 (Int ./play.lat:59:5) (QIdent ./play.lat:59:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:59:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_93"),Param ./play.lat:59:5 (Int ./play.lat:59:18) (ValIdent "%a_t_94"),Param ./play.lat:59:5 (Int ./play.lat:59:25) (ValIdent "%a_t_95")] [ILabel ./play.lat:59:5 (LabIdent ".L_entry"),ILoad ./play.lat:59:5 (ValIdent "%v_t_93") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Ref  (Cl  (SymIdent "Plus")))) 0 (ValIdent "%a_t_93")),ILoad ./play.lat:59:5 (ValIdent "%v_t_94") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:18)) 1 (ValIdent "%a_t_94")),ILoad ./play.lat:59:5 (ValIdent "%v_t_95") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:25)) 2 (ValIdent "%a_t_95")),IVCall ./play.lat:60:9 (Call ./play.lat:60:9 (Bool inside standard library) (QIdent ./play.lat:60:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:60:9 (Int inside standard library) (ValIdent "%v_t_94")] []),INewStr ./play.lat:61:21 (ValIdent "%v_t_98") "+",IVCall ./play.lat:61:9 (Call ./play.lat:61:9 (Bool inside standard library) (QIdent ./play.lat:61:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:61:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_98")] []),IVCall ./play.lat:62:9 (Call ./play.lat:62:9 (Bool inside standard library) (QIdent ./play.lat:62:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:62:9 (Int inside standard library) (ValIdent "%v_t_95")] []),IOp ./play.lat:63:18 (ValIdent "%v_t_101") (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_94")) (OpAdd ./play.lat:63:18) (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_95")),ISet ./play.lat:63:9 (ValIdent "%v___temp_19") (VVal ./play.lat:63:9 (Int ./play.lat:59:18) (ValIdent "%v_t_101")),ISet ./play.lat:63:9 (ValIdent "%v_return") (VVal ./play.lat:63:9 (Int ./play.lat:59:18) (ValIdent "%v___temp_19")),IJmp ./play.lat:63:9 (LabIdent ".L_exit"),ILabel ./play.lat:59:5 (LabIdent ".L_exit"),IRet ./play.lat:59:5 (VVal ./play.lat:59:5 (Int ./play.lat:59:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:67:5 (Int ./play.lat:67:5) (QIdent ./play.lat:67:9 (SymIdent "Minus") (SymIdent "operator")) [Param ./play.lat:67:5 (Ref  (Cl  (SymIdent "Minus"))) (ValIdent "%a_t_102"),Param ./play.lat:67:5 (Int ./play.lat:67:18) (ValIdent "%a_t_103"),Param ./play.lat:67:5 (Int ./play.lat:67:25) (ValIdent "%a_t_104")] [ILabel ./play.lat:67:5 (LabIdent ".L_entry"),ILoad ./play.lat:67:5 (ValIdent "%v_t_102") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Ref  (Cl  (SymIdent "Minus")))) 0 (ValIdent "%a_t_102")),ILoad ./play.lat:67:5 (ValIdent "%v_t_103") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:18)) 1 (ValIdent "%a_t_103")),ILoad ./play.lat:67:5 (ValIdent "%v_t_104") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:25)) 2 (ValIdent "%a_t_104")),IVCall ./play.lat:68:9 (Call ./play.lat:68:9 (Bool inside standard library) (QIdent ./play.lat:68:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:68:9 (Int inside standard library) (ValIdent "%v_t_103")] []),INewStr ./play.lat:69:21 (ValIdent "%v_t_107") "-",IVCall ./play.lat:69:9 (Call ./play.lat:69:9 (Bool inside standard library) (QIdent ./play.lat:69:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:69:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_107")] []),IVCall ./play.lat:70:9 (Call ./play.lat:70:9 (Bool inside standard library) (QIdent ./play.lat:70:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:70:9 (Int inside standard library) (ValIdent "%v_t_104")] []),IOp ./play.lat:71:18 (ValIdent "%v_t_110") (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_103")) (OpSub ./play.lat:71:18) (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_104")),ISet ./play.lat:71:9 (ValIdent "%v___temp_20") (VVal ./play.lat:71:9 (Int ./play.lat:67:18) (ValIdent "%v_t_110")),ISet ./play.lat:71:9 (ValIdent "%v_return") (VVal ./play.lat:71:9 (Int ./play.lat:67:18) (ValIdent "%v___temp_20")),IJmp ./play.lat:71:9 (LabIdent ".L_exit"),ILabel ./play.lat:67:5 (LabIdent ".L_exit"),IRet ./play.lat:67:5 (VVal ./play.lat:67:5 (Int ./play.lat:67:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:75:5 (Int ./play.lat:75:5) (QIdent ./play.lat:75:9 (SymIdent "Razy") (SymIdent "operator")) [Param ./play.lat:75:5 (Ref  (Cl  (SymIdent "Razy"))) (ValIdent "%a_t_111"),Param ./play.lat:75:5 (Int ./play.lat:75:18) (ValIdent "%a_t_112"),Param ./play.lat:75:5 (Int ./play.lat:75:25) (ValIdent "%a_t_113")] [ILabel ./play.lat:75:5 (LabIdent ".L_entry"),ILoad ./play.lat:75:5 (ValIdent "%v_t_111") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Ref  (Cl  (SymIdent "Razy")))) 0 (ValIdent "%a_t_111")),ILoad ./play.lat:75:5 (ValIdent "%v_t_112") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:18)) 1 (ValIdent "%a_t_112")),ILoad ./play.lat:75:5 (ValIdent "%v_t_113") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:25)) 2 (ValIdent "%a_t_113")),IVCall ./play.lat:76:9 (Call ./play.lat:76:9 (Bool inside standard library) (QIdent ./play.lat:76:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:76:9 (Int inside standard library) (ValIdent "%v_t_112")] []),INewStr ./play.lat:77:21 (ValIdent "%v_t_116") "*",IVCall ./play.lat:77:9 (Call ./play.lat:77:9 (Bool inside standard library) (QIdent ./play.lat:77:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:77:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_116")] []),IVCall ./play.lat:78:9 (Call ./play.lat:78:9 (Bool inside standard library) (QIdent ./play.lat:78:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:78:9 (Int inside standard library) (ValIdent "%v_t_113")] []),IOp ./play.lat:79:18 (ValIdent "%v_t_119") (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_112")) (OpMul ./play.lat:79:18) (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_113")),ISet ./play.lat:79:9 (ValIdent "%v___temp_21") (VVal ./play.lat:79:9 (Int ./play.lat:75:18) (ValIdent "%v_t_119")),ISet ./play.lat:79:9 (ValIdent "%v_return") (VVal ./play.lat:79:9 (Int ./play.lat:75:18) (ValIdent "%v___temp_21")),IJmp ./play.lat:79:9 (LabIdent ".L_exit"),ILabel ./play.lat:75:5 (LabIdent ".L_exit"),IRet ./play.lat:75:5 (VVal ./play.lat:75:5 (Int ./play.lat:75:5) (ValIdent "%v_return"))]),(SSA [".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
,Mthd ./play.lat:83:5 (Int ./play.lat:83:5) (QIdent ./play.lat:83:9 (SymIdent "Podziel") (SymIdent "operator")) [Param ./play.lat:83:5 (Ref  (Cl  (SymIdent "Podziel"))) (ValIdent "%a_t_120"),Param ./play.lat:83:5 (Int ./play.lat:83:18) (ValIdent "%a_t_121"),Param ./play.lat:83:5 (Int ./play.lat:83:25) (ValIdent "%a_t_122")] [ILabel ./play.lat:83:5 (LabIdent ".L_entry"),ILoad ./play.lat:83:5 (ValIdent "%v_t_120") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Ref  (Cl  (SymIdent "Podziel")))) 0 (ValIdent "%a_t_120")),ILoad ./play.lat:83:5 (ValIdent "%v_t_121") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:18)) 1 (ValIdent "%a_t_121")),ILoad ./play.lat:83:5 (ValIdent "%v_t_122") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:25)) 2 (ValIdent "%a_t_122")),IVCall ./play.lat:84:9 (Call ./play.lat:84:9 (Bool inside standard library) (QIdent ./play.lat:84:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:84:9 (Int inside standard library) (ValIdent "%v_t_121")] []),INewStr ./play.lat:85:21 (ValIdent "%v_t_125") "/",IVCall ./play.lat:85:9 (Call ./play.lat:85:9 (Bool inside standard library) (QIdent ./play.lat:85:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:85:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_125")] []),IVCall ./play.lat:86:9 (Call ./play.lat:86:9 (Bool inside standard library) (QIdent ./play.lat:86:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:86:9 (Int inside standard library) (ValIdent "%v_t_122")] []),IOp ./play.lat:87:18 (ValIdent "%v_t_128") (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_121")) (OpDiv ./play.lat:87:18) (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_122")),ISet ./play.lat:87:9 (ValIdent "%v___temp_22") (VVal ./play.lat:87:9 (Int ./play.lat:83:18) (ValIdent "%v_t_128")),ISet ./play.lat:87:9 (ValIdent "%v_return") (VVal ./play.lat:87:9 (Int ./play.lat:83:18) (ValIdent "%v___temp_22")),IJmp ./play.lat:87:9 (LabIdent ".L_exit"),ILabel ./play.lat:83:5 (LabIdent ".L_exit"),IRet ./play.lat:83:5 (VVal ./play.lat:83:5 (Int ./play.lat:83:5) (ValIdent "%v_return"))])]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END OPTIMIZED CODE DUMP 


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_46",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_46",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_50",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_50",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_50",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_50",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_50",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_50",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_52",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_52",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_56",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_56",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_56",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_56",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_56",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_56",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_58",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_58",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_62",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_62",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_62",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_62",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_62",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_62",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_64",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_64",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_68",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_68",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_68",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_69",(2,Ref () (Int ())))], out = [("%a_t_69",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_72",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_72",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_72",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_72",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_72",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_72",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_78",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_78",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_79",(4,Int ()))], out = [("%v_t_79",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_79",(2,Int ()))], out = [("%v_t_79",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_79",(0,Int ()))], out = [], use = [("%v_t_79",Int ())], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_87",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_87",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_92",(4,Int ()))], out = [("%v_t_92",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_92",(2,Int ()))], out = [("%v_t_92",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_92",(0,Int ()))], out = [], use = [("%v_t_92",Int ())], kill = []
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Int ()))),("%a_t_95",(3,Ref () (Int ())))], out = [("%a_t_94",(1,Ref () (Int ()))),("%a_t_95",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_101",(4,Int ()))], out = [("%v_t_101",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_101",(2,Int ()))], out = [("%v_t_101",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_101",(0,Int ()))], out = [], use = [("%v_t_101",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_103",(2,Ref () (Int ()))),("%a_t_104",(3,Ref () (Int ())))], out = [("%a_t_103",(1,Ref () (Int ()))),("%a_t_104",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_110",(4,Int ()))], out = [("%v_t_110",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_110",(2,Int ()))], out = [("%v_t_110",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_110",(0,Int ()))], out = [], use = [("%v_t_110",Int ())], kill = []
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_113",(3,Ref () (Int ()))),("%a_t_112",(2,Ref () (Int ())))], out = [("%a_t_113",(2,Ref () (Int ()))),("%a_t_112",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_119",(4,Int ()))], out = [("%v_t_119",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_119",(2,Int ()))], out = [("%v_t_119",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_119",(0,Int ()))], out = [], use = [("%v_t_119",Int ())], kill = []
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_121",(2,Ref () (Int ()))),("%a_t_122",(3,Ref () (Int ())))], out = [("%a_t_121",(1,Ref () (Int ()))),("%a_t_122",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_128",(4,Int ()))], out = [("%v_t_128",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_128",(2,Int ()))], out = [("%v_t_128",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_128",(0,Int ()))], out = [], use = [("%v_t_128",Int ())], kill = []
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Reanalysing liveness...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_46",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_46",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_50",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_50",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_50",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_50",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_50",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_50",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_52",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_52",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_56",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_56",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_56",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_56",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_56",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_56",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_58",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_58",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_62",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_62",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_62",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_62",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_62",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_62",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_64",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_64",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_68",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_68",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_68",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_69",(2,Ref () (Int ())))], out = [("%a_t_69",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_72",(4,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_72",(3,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_72",(2,Ref () (Cl () (SymIdent "Node"))))], out = [("%v_t_72",(1,Ref () (Cl () (SymIdent "Node"))))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_72",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_72",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_78",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_78",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_79",(4,Int ()))], out = [("%v_t_79",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_79",(2,Int ()))], out = [("%v_t_79",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_79",(0,Int ()))], out = [], use = [("%v_t_79",Int ())], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Liveness at start of .L_exit: in = [], out = [], use = [], kill = []
Liveness at end of .L_exit: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_87",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_87",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_92",(4,Int ()))], out = [("%v_t_92",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_92",(2,Int ()))], out = [("%v_t_92",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_92",(0,Int ()))], out = [], use = [("%v_t_92",Int ())], kill = []
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Int ()))),("%a_t_95",(3,Ref () (Int ())))], out = [("%a_t_94",(1,Ref () (Int ()))),("%a_t_95",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_101",(4,Int ()))], out = [("%v_t_101",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_101",(2,Int ()))], out = [("%v_t_101",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_101",(0,Int ()))], out = [], use = [("%v_t_101",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_103",(2,Ref () (Int ()))),("%a_t_104",(3,Ref () (Int ())))], out = [("%a_t_103",(1,Ref () (Int ()))),("%a_t_104",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_110",(4,Int ()))], out = [("%v_t_110",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_110",(2,Int ()))], out = [("%v_t_110",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_110",(0,Int ()))], out = [], use = [("%v_t_110",Int ())], kill = []
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_113",(3,Ref () (Int ()))),("%a_t_112",(2,Ref () (Int ())))], out = [("%a_t_113",(2,Ref () (Int ()))),("%a_t_112",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_119",(4,Int ()))], out = [("%v_t_119",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_119",(2,Int ()))], out = [("%v_t_119",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_119",(0,Int ()))], out = [], use = [("%v_t_119",Int ())], kill = []
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Liveness at start of .L_entry: in = [("%a_t_121",(2,Ref () (Int ()))),("%a_t_122",(3,Ref () (Int ())))], out = [("%a_t_121",(1,Ref () (Int ()))),("%a_t_122",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_128",(4,Int ()))], out = [("%v_t_128",(3,Int ()))], use = [], kill = []
Liveness at start of .L_exit: in = [("%v_t_128",(2,Int ()))], out = [("%v_t_128",(1,Int ()))], use = [], kill = []
Liveness at end of .L_exit: in = [("%v_t_128",(0,Int ()))], out = [], use = [("%v_t_128",Int ())], kill = []
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] [%v_t_28 (reg preference: CalleeSaved) (RBX): ["%v_t_30","~arg_3_RSI"]
%v_t_30 (reg preference: CallerSaved) (RAX): ["%v_t_28","~arg_2_RDI"]
%v_t_31 (reg preference: CalleeSaved) (R13): ["%v_t_33","%v_t_35","%v_t_37","%v_t_38","%v_t_39","~arg_12_RSI"]
%v_t_33 (reg preference: CalleeSaved) (R12): ["%v_t_31","%v_t_35","%v_t_37","%v_t_38","~arg_10_RSI"]
%v_t_35 (reg preference: CalleeSaved) (RBX): ["%v_t_31","%v_t_33","%v_t_37","~arg_8_RSI"]
%v_t_37 (reg preference: CallerSaved) (RAX): ["%v_t_31","%v_t_33","%v_t_35","~arg_7_RDI"]
%v_t_38 (reg preference: CallerSaved) (RAX): ["%v_t_31","%v_t_33","~arg_9_RDI"]
%v_t_39 (reg preference: CallerSaved) (RAX): ["%v_t_31","~arg_11_RDI"]
%v_t_40 (reg preference: CallerSaved) (RAX): []
%v_t_42 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_10_RSI (reg preference: CallerSaved) (RSI): ["%v_t_33"]
~arg_11_RDI (reg preference: CallerSaved) (RDI): ["%v_t_39"]
~arg_12_RSI (reg preference: CallerSaved) (RSI): ["%v_t_31"]
~arg_13_RDI (reg preference: CallerSaved) (RDI): []
~arg_14_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): ["%v_t_30"]
~arg_3_RSI (reg preference: CallerSaved) (RSI): ["%v_t_28"]
~arg_4_RDI (reg preference: CallerSaved) (RDI): []
~arg_5_RDI (reg preference: CallerSaved) (RDI): []
~arg_6_RDI (reg preference: CallerSaved) (RDI): []
~arg_7_RDI (reg preference: CallerSaved) (RDI): ["%v_t_37"]
~arg_8_RSI (reg preference: CallerSaved) (RSI): ["%v_t_35"]
~arg_9_RDI (reg preference: CallerSaved) (RDI): ["%v_t_38"]
,%a_t_45 (reg preference: CallerSaved) (RDI): ["%a_t_46"]
%a_t_46 (reg preference: CallerSaved) (RSI): ["%a_t_45","%v_t_45"]
%v_t_45 (reg preference: CalleeSaved) (R12): ["%a_t_46","%v_t_46","%v_t_47","%v_t_48"]
%v_t_46 (reg preference: CalleeSaved) (RBX): ["%v_t_45","%v_t_47","%v_t_48"]
%v_t_47 (reg preference: CallerSaved) (RAX): ["%v_t_45","%v_t_46"]
%v_t_48 (reg preference: CallerSaved) (RAX): ["%v_t_45","%v_t_46"]
%v_t_50 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_51 (reg preference: CallerSaved) (RDI): ["%a_t_52"]
%a_t_52 (reg preference: CallerSaved) (RSI): ["%a_t_51","%v_t_51"]
%v_t_51 (reg preference: CalleeSaved) (R12): ["%a_t_52","%v_t_52","%v_t_53","%v_t_54"]
%v_t_52 (reg preference: CalleeSaved) (RBX): ["%v_t_51","%v_t_53","%v_t_54"]
%v_t_53 (reg preference: CallerSaved) (RAX): ["%v_t_51","%v_t_52"]
%v_t_54 (reg preference: CallerSaved) (RAX): ["%v_t_51","%v_t_52"]
%v_t_56 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_57 (reg preference: CallerSaved) (RDI): ["%a_t_58"]
%a_t_58 (reg preference: CallerSaved) (RSI): ["%a_t_57","%v_t_57"]
%v_t_57 (reg preference: CalleeSaved) (R12): ["%a_t_58","%v_t_58","%v_t_59","%v_t_60"]
%v_t_58 (reg preference: CalleeSaved) (RBX): ["%v_t_57","%v_t_59","%v_t_60"]
%v_t_59 (reg preference: CallerSaved) (RAX): ["%v_t_57","%v_t_58"]
%v_t_60 (reg preference: CallerSaved) (RAX): ["%v_t_57","%v_t_58"]
%v_t_62 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_63 (reg preference: CallerSaved) (RDI): ["%a_t_64"]
%a_t_64 (reg preference: CallerSaved) (RSI): ["%a_t_63","%v_t_63"]
%v_t_63 (reg preference: CalleeSaved) (R12): ["%a_t_64","%v_t_64","%v_t_65","%v_t_66"]
%v_t_64 (reg preference: CalleeSaved) (RBX): ["%v_t_63","%v_t_65","%v_t_66"]
%v_t_65 (reg preference: CallerSaved) (RAX): ["%v_t_63","%v_t_64"]
%v_t_66 (reg preference: CallerSaved) (RAX): ["%v_t_63","%v_t_64"]
%v_t_68 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_69 (reg preference: CallerSaved) (RDI): []
%v_t_69 (reg preference: CallerSaved) (RCX): ["%v_t_70"]
%v_t_70 (reg preference: CallerSaved) (RAX): ["%v_t_69"]
%v_t_72 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%v_t_75 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_78 (reg preference: CallerSaved) (RDI): []
%v_t_78 (reg preference: CallerSaved) (RAX): []
%v_t_79 (reg preference: CallerSaved) (RAX): []
,%v_t_84 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_87 (reg preference: CallerSaved) (RDI): []
%v_t_87 (reg preference: CalleeSaved) (R12): ["%v_t_88","%v_t_89","%v_t_90","%v_t_91","~arg_3_RSI","~arg_4_RDX"]
%v_t_88 (reg preference: CallerSaved) (RAX): ["%v_t_87"]
%v_t_89 (reg preference: CalleeSaved) (RBX): ["%v_t_87","%v_t_90","%v_t_91","~arg_2_RDI","~arg_4_RDX"]
%v_t_90 (reg preference: CallerSaved) (RAX): ["%v_t_87","%v_t_89"]
%v_t_91 (reg preference: CallerSaved) (RAX): ["%v_t_87","%v_t_89","~arg_2_RDI","~arg_3_RSI"]
%v_t_92 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): ["%v_t_89","%v_t_91"]
~arg_3_RSI (reg preference: CallerSaved) (RSI): ["%v_t_87","%v_t_91"]
~arg_4_RDX (reg preference: CallerSaved) (RDX): ["%v_t_87","%v_t_89"]
,%a_t_94 (reg preference: CallerSaved) (RSI): ["%a_t_95"]
%a_t_95 (reg preference: CallerSaved) (RDX): ["%a_t_94","%v_t_94"]
%v_t_101 (reg preference: CallerSaved) (RAX): []
%v_t_94 (reg preference: CalleeSaved) (R12): ["%a_t_95","%v_t_95","%v_t_98"]
%v_t_95 (reg preference: CalleeSaved) (RBX): ["%v_t_94","%v_t_98"]
%v_t_98 (reg preference: CallerSaved) (RAX): ["%v_t_94","%v_t_95"]
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_103 (reg preference: CallerSaved) (RSI): ["%a_t_104"]
%a_t_104 (reg preference: CallerSaved) (RDX): ["%a_t_103","%v_t_103"]
%v_t_103 (reg preference: CalleeSaved) (R12): ["%a_t_104","%v_t_104","%v_t_107"]
%v_t_104 (reg preference: CalleeSaved) (RBX): ["%v_t_103","%v_t_107"]
%v_t_107 (reg preference: CallerSaved) (RAX): ["%v_t_103","%v_t_104"]
%v_t_110 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_112 (reg preference: CallerSaved) (RSI): ["%a_t_113"]
%a_t_113 (reg preference: CallerSaved) (RDX): ["%a_t_112","%v_t_112"]
%v_t_112 (reg preference: CalleeSaved) (R12): ["%a_t_113","%v_t_113","%v_t_116"]
%v_t_113 (reg preference: CalleeSaved) (RBX): ["%v_t_112","%v_t_116"]
%v_t_116 (reg preference: CallerSaved) (RAX): ["%v_t_112","%v_t_113"]
%v_t_119 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): []
,%a_t_121 (reg preference: CallerSaved) (RSI): ["%a_t_122"]
%a_t_122 (reg preference: CallerSaved) (RDX): ["%a_t_121","%v_t_121"]
%v_t_121 (reg preference: CalleeSaved) (R12): ["%a_t_122","%v_t_122","%v_t_125","~div_0_rdx"]
%v_t_122 (reg preference: CalleeSaved) (RBX): ["%v_t_121","%v_t_125","~div_0_rax","~div_0_rdx"]
%v_t_125 (reg preference: CallerSaved) (RAX): ["%v_t_121","%v_t_122"]
%v_t_128 (reg preference: CallerSaved) (RAX): []
~arg_0_RDI (reg preference: CallerSaved) (RDI): []
~arg_1_RDI (reg preference: CallerSaved) (RDI): []
~arg_2_RDI (reg preference: CallerSaved) (RDI): []
~div_0_rax (reg preference: CallerSaved) (RAX): ["~div_0_rdx"]
~div_0_rdx (reg preference: CallerSaved) (RDX): ["~div_0_rax"]
]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Allocating registers...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_41 := Node & %v_t_40;
  %v_t_42 := callvirt int Node.value (Node & %v_t_41);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  %v___temp_0 := 0;
  %v_return := int %v___temp_0;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for ~cl_TopLevel.plus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  %v_t_49 := Operator & %v_t_48;
  %v___temp_1 := Node & %v_t_45;
  store Node & %v___temp_1 into Node & & fldptr Operator %v_t_49 Operator.left;
  %v___temp_2 := Node & %v_t_46;
  store Node & %v___temp_2 into Node & & fldptr Operator %v_t_49 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_49);
  %v___temp_3 := Node & %v_t_50;
  %v_return := Node & %v___temp_3;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.razy:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  %v_t_55 := Operator & %v_t_54;
  %v___temp_4 := Node & %v_t_51;
  store Node & %v___temp_4 into Node & & fldptr Operator %v_t_55 Operator.left;
  %v___temp_5 := Node & %v_t_52;
  store Node & %v___temp_5 into Node & & fldptr Operator %v_t_55 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_55);
  %v___temp_6 := Node & %v_t_56;
  %v_return := Node & %v___temp_6;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  %v_t_61 := Operator & %v_t_60;
  %v___temp_7 := Node & %v_t_57;
  store Node & %v___temp_7 into Node & & fldptr Operator %v_t_61 Operator.left;
  %v___temp_8 := Node & %v_t_58;
  store Node & %v___temp_8 into Node & & fldptr Operator %v_t_61 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_61);
  %v___temp_9 := Node & %v_t_62;
  %v_return := Node & %v___temp_9;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.minus:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  %v_t_67 := Operator & %v_t_66;
  %v___temp_10 := Node & %v_t_63;
  store Node & %v___temp_10 into Node & & fldptr Operator %v_t_67 Operator.left;
  %v___temp_11 := Node & %v_t_64;
  store Node & %v___temp_11 into Node & & fldptr Operator %v_t_67 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_67);
  %v___temp_12 := Node & %v_t_68;
  %v_return := Node & %v___temp_12;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  %v_t_71 := Liczba & %v_t_70;
  %v___temp_13 := int %v_t_69;
  store int %v___temp_13 into int & fldptr Liczba %v_t_71 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_71);
  %v___temp_14 := Node & %v_t_72;
  %v_return := Node & %v___temp_14;
  jump .L_exit;
.L_exit:
  return Node & %v_return;
]

CFG for Node.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  %v_t_73 := load Node & & param 0 %a_t_73;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  %v___temp_15 := 0;
  %v_return := int %v___temp_15;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Liczba.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  %v___temp_16 := int %v_t_79;
  %v_return := int %v___temp_16;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  %v_t_80 := load Operator & & param 0 %a_t_80;
  %v_t_81 := load int & param 1 %a_t_81;
  %v_t_82 := load int & param 2 %a_t_82;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  %v___temp_17 := 0;
  %v_return := int %v___temp_17;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Operator.value:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  %v___temp_18 := int %v_t_92;
  %v_return := int %v___temp_18;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Plus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  %v_t_93 := load Plus & & param 0 %a_t_93;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  %v___temp_19 := int %v_t_101;
  %v_return := int %v___temp_19;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Minus.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  %v_t_102 := load Minus & & param 0 %a_t_102;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  %v___temp_20 := int %v_t_110;
  %v_return := int %v___temp_20;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Razy.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  %v_t_111 := load Razy & & param 0 %a_t_111;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  %v___temp_21 := int %v_t_119;
  %v_return := int %v___temp_21;
  jump .L_exit;
.L_exit:
  return int %v_return;
]

CFG for Podziel.operator:
[".L_entry",".L_exit"]
".L_entry" -> fromList [LabIdent ".L_exit"] <- fromList []
".L_exit" -> fromList [] <- fromList [LabIdent ".L_entry"]
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  %v_t_120 := load Podziel & & param 0 %a_t_120;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  %v___temp_22 := int %v_t_128;
  %v_return := int %v___temp_22;
  jump .L_exit;
.L_exit:
  return int %v_return;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Unfolding phis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_42 := callvirt int Node.value (Node & %v_t_40);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  endphi;
  return 0;
]

CFG for ~cl_TopLevel.plus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  endphi;
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  store Node & %v_t_45 into Node & & fldptr Operator & %v_t_48 Operator.left;
  store Node & %v_t_46 into Node & & fldptr Operator & %v_t_48 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_48);
  endphi;
  return Node & %v_t_50;
]

CFG for ~cl_TopLevel.razy:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  endphi;
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  store Node & %v_t_51 into Node & & fldptr Operator & %v_t_54 Operator.left;
  store Node & %v_t_52 into Node & & fldptr Operator & %v_t_54 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_54);
  endphi;
  return Node & %v_t_56;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  endphi;
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  store Node & %v_t_57 into Node & & fldptr Operator & %v_t_60 Operator.left;
  store Node & %v_t_58 into Node & & fldptr Operator & %v_t_60 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_60);
  endphi;
  return Node & %v_t_62;
]

CFG for ~cl_TopLevel.minus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  endphi;
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  store Node & %v_t_63 into Node & & fldptr Operator & %v_t_66 Operator.left;
  store Node & %v_t_64 into Node & & fldptr Operator & %v_t_66 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_66);
  endphi;
  return Node & %v_t_68;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  endphi;
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  store int %v_t_69 into int & fldptr Liczba & %v_t_70 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_70);
  endphi;
  return Node & %v_t_72;
]

CFG for Node.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  endphi;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  endphi;
  return 0;
]

CFG for Liczba.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  endphi;
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  endphi;
  return int %v_t_79;
]

CFG for Operator.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  endphi;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  endphi;
  return 0;
]

CFG for Operator.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  endphi;
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  endphi;
  return int %v_t_92;
]

CFG for Plus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  endphi;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  endphi;
  return int %v_t_101;
]

CFG for Minus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  endphi;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  endphi;
  return int %v_t_110;
]

CFG for Razy.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  endphi;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  endphi;
  return int %v_t_119;
]

CFG for Podziel.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  endphi;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  endphi;
  return int %v_t_128;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Inlining trivial jumps...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> GENERATED INTERMEDIATE STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] CFG for ~cl_TopLevel.main:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int ~cl_TopLevel.main (): [
.L_entry:
  endphi;
  %v_t_28 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_30 := call Node & ~cl_TopLevel.liczba (3);
  %v_t_31 := call Node & ~cl_TopLevel.minus (Node & %v_t_28, Node & %v_t_30);
  %v_t_33 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_35 := call Node & ~cl_TopLevel.liczba (4);
  %v_t_37 := call Node & ~cl_TopLevel.liczba (2);
  %v_t_38 := call Node & ~cl_TopLevel.podziel (Node & %v_t_35, Node & %v_t_37);
  %v_t_39 := call Node & ~cl_TopLevel.razy (Node & %v_t_33, Node & %v_t_38);
  %v_t_40 := call Node & ~cl_TopLevel.plus (Node & %v_t_31, Node & %v_t_39);
  %v_t_42 := callvirt int Node.value (Node & %v_t_40);
  call boolean ~cl_TopLevel.printInt (int %v_t_42);
  endphi;
  return 0;
]

CFG for ~cl_TopLevel.plus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_46",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_46",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_45",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_50",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_50",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.plus (Node & %a_t_45, Node & %a_t_46): [
.L_entry:
  endphi;
  %v_t_45 := load Node & & param 0 %a_t_45;
  %v_t_46 := load Node & & param 1 %a_t_46;
  %v_t_47 := new Plus;
  %v_t_48 := call Operator & ~cl_TopLevel.__cast (Plus & %v_t_47);
  store Node & %v_t_45 into Node & & fldptr Operator & %v_t_48 Operator.left;
  store Node & %v_t_46 into Node & & fldptr Operator & %v_t_48 Operator.right;
  %v_t_50 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_48);
  endphi;
  return Node & %v_t_50;
]

CFG for ~cl_TopLevel.razy:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_52",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_52",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_51",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_56",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_56",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.razy (Node & %a_t_51, Node & %a_t_52): [
.L_entry:
  endphi;
  %v_t_51 := load Node & & param 0 %a_t_51;
  %v_t_52 := load Node & & param 1 %a_t_52;
  %v_t_53 := new Razy;
  %v_t_54 := call Operator & ~cl_TopLevel.__cast (Razy & %v_t_53);
  store Node & %v_t_51 into Node & & fldptr Operator & %v_t_54 Operator.left;
  store Node & %v_t_52 into Node & & fldptr Operator & %v_t_54 Operator.right;
  %v_t_56 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_54);
  endphi;
  return Node & %v_t_56;
]

CFG for ~cl_TopLevel.podziel:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_58",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_58",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_57",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_62",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_62",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.podziel (Node & %a_t_57, Node & %a_t_58): [
.L_entry:
  endphi;
  %v_t_57 := load Node & & param 0 %a_t_57;
  %v_t_58 := load Node & & param 1 %a_t_58;
  %v_t_59 := new Podziel;
  %v_t_60 := call Operator & ~cl_TopLevel.__cast (Podziel & %v_t_59);
  store Node & %v_t_57 into Node & & fldptr Operator & %v_t_60 Operator.left;
  store Node & %v_t_58 into Node & & fldptr Operator & %v_t_60 Operator.right;
  %v_t_62 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_60);
  endphi;
  return Node & %v_t_62;
]

CFG for ~cl_TopLevel.minus:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_64",(3,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(2,Ref () (Ref () (Cl () (SymIdent "Node")))))], out = [("%a_t_64",(2,Ref () (Ref () (Cl () (SymIdent "Node"))))),("%a_t_63",(1,Ref () (Ref () (Cl () (SymIdent "Node")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_68",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_68",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.minus (Node & %a_t_63, Node & %a_t_64): [
.L_entry:
  endphi;
  %v_t_63 := load Node & & param 0 %a_t_63;
  %v_t_64 := load Node & & param 1 %a_t_64;
  %v_t_65 := new Minus;
  %v_t_66 := call Operator & ~cl_TopLevel.__cast (Minus & %v_t_65);
  store Node & %v_t_63 into Node & & fldptr Operator & %v_t_66 Operator.left;
  store Node & %v_t_64 into Node & & fldptr Operator & %v_t_66 Operator.right;
  %v_t_68 := call Node & ~cl_TopLevel.__cast (Operator & %v_t_66);
  endphi;
  return Node & %v_t_68;
]

CFG for ~cl_TopLevel.liczba:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_69",(2,Ref () (Int ())))], out = [("%a_t_69",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_72",(0,Ref () (Cl () (SymIdent "Node"))))], out = [], use = [("%v_t_72",Ref () (Cl () (SymIdent "Node")))], kill = []
Code: 
.method Node & ~cl_TopLevel.liczba (int %a_t_69): [
.L_entry:
  endphi;
  %v_t_69 := load int & param 0 %a_t_69;
  %v_t_70 := new Liczba;
  store int %v_t_69 into int & fldptr Liczba & %v_t_70 Liczba.v;
  %v_t_72 := call Node & ~cl_TopLevel.__cast (Liczba & %v_t_70);
  endphi;
  return Node & %v_t_72;
]

CFG for Node.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Node.value (Node & %a_t_73): [
.L_entry:
  endphi;
  %v_t_75 := newstr "Node.value not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_75);
  endphi;
  return 0;
]

CFG for Liczba.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_78",(2,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], out = [("%a_t_78",(1,Ref () (Ref () (Cl () (SymIdent "Liczba")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_79",(0,Int ()))], out = [], use = [("%v_t_79",Int ())], kill = []
Code: 
.method int Liczba.value (Liczba & %a_t_78): [
.L_entry:
  endphi;
  %v_t_78 := load Liczba & & param 0 %a_t_78;
  %v_t_79 := load int & fldptr Liczba %v_t_78 Liczba.v;
  endphi;
  return int %v_t_79;
]

CFG for Operator.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [], out = [], use = [], kill = []
Liveness at end of .L_entry: in = [], out = [], use = [], kill = []
Code: 
.method int Operator.operator (Operator & %a_t_80, int %a_t_81, int %a_t_82): [
.L_entry:
  endphi;
  %v_t_84 := newstr "Operator.operator not implemented";
  call boolean ~cl_TopLevel.printString (String & %v_t_84);
  endphi;
  return 0;
]

CFG for Operator.value:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_87",(2,Ref () (Ref () (Cl () (SymIdent "Operator")))))], out = [("%a_t_87",(1,Ref () (Ref () (Cl () (SymIdent "Operator")))))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_92",(0,Int ()))], out = [], use = [("%v_t_92",Int ())], kill = []
Code: 
.method int Operator.value (Operator & %a_t_87): [
.L_entry:
  endphi;
  %v_t_87 := load Operator & & param 0 %a_t_87;
  %v_t_88 := load Node & & fldptr Operator %v_t_87 Operator.left;
  %v_t_89 := callvirt int Node.value (Node & %v_t_88);
  %v_t_90 := load Node & & fldptr Operator %v_t_87 Operator.right;
  %v_t_91 := callvirt int Node.value (Node & %v_t_90);
  %v_t_92 := callvirt int Operator.operator (Operator & %v_t_87, int %v_t_89, int %v_t_91);
  endphi;
  return int %v_t_92;
]

CFG for Plus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_94",(2,Ref () (Int ()))),("%a_t_95",(3,Ref () (Int ())))], out = [("%a_t_94",(1,Ref () (Int ()))),("%a_t_95",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_101",(0,Int ()))], out = [], use = [("%v_t_101",Int ())], kill = []
Code: 
.method int Plus.operator (Plus & %a_t_93, int %a_t_94, int %a_t_95): [
.L_entry:
  endphi;
  %v_t_94 := load int & param 1 %a_t_94;
  %v_t_95 := load int & param 2 %a_t_95;
  call boolean ~cl_TopLevel.printInt (int %v_t_94);
  %v_t_98 := newstr "+";
  call boolean ~cl_TopLevel.printString (String & %v_t_98);
  call boolean ~cl_TopLevel.printInt (int %v_t_95);
  %v_t_101 := int %v_t_94 + int %v_t_95;
  endphi;
  return int %v_t_101;
]

CFG for Minus.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_103",(2,Ref () (Int ()))),("%a_t_104",(3,Ref () (Int ())))], out = [("%a_t_103",(1,Ref () (Int ()))),("%a_t_104",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_110",(0,Int ()))], out = [], use = [("%v_t_110",Int ())], kill = []
Code: 
.method int Minus.operator (Minus & %a_t_102, int %a_t_103, int %a_t_104): [
.L_entry:
  endphi;
  %v_t_103 := load int & param 1 %a_t_103;
  %v_t_104 := load int & param 2 %a_t_104;
  call boolean ~cl_TopLevel.printInt (int %v_t_103);
  %v_t_107 := newstr "-";
  call boolean ~cl_TopLevel.printString (String & %v_t_107);
  call boolean ~cl_TopLevel.printInt (int %v_t_104);
  %v_t_110 := int %v_t_103 - int %v_t_104;
  endphi;
  return int %v_t_110;
]

CFG for Razy.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_113",(3,Ref () (Int ()))),("%a_t_112",(2,Ref () (Int ())))], out = [("%a_t_113",(2,Ref () (Int ()))),("%a_t_112",(1,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_119",(0,Int ()))], out = [], use = [("%v_t_119",Int ())], kill = []
Code: 
.method int Razy.operator (Razy & %a_t_111, int %a_t_112, int %a_t_113): [
.L_entry:
  endphi;
  %v_t_112 := load int & param 1 %a_t_112;
  %v_t_113 := load int & param 2 %a_t_113;
  call boolean ~cl_TopLevel.printInt (int %v_t_112);
  %v_t_116 := newstr "*";
  call boolean ~cl_TopLevel.printString (String & %v_t_116);
  call boolean ~cl_TopLevel.printInt (int %v_t_113);
  %v_t_119 := int %v_t_112 * int %v_t_113;
  endphi;
  return int %v_t_119;
]

CFG for Podziel.operator:
[".L_entry"]
".L_entry" -> fromList [] <- fromList []
Liveness at start of .L_entry: in = [("%a_t_121",(2,Ref () (Int ()))),("%a_t_122",(3,Ref () (Int ())))], out = [("%a_t_121",(1,Ref () (Int ()))),("%a_t_122",(2,Ref () (Int ())))], use = [], kill = []
Liveness at end of .L_entry: in = [("%v_t_128",(0,Int ()))], out = [], use = [("%v_t_128",Int ())], kill = []
Code: 
.method int Podziel.operator (Podziel & %a_t_120, int %a_t_121, int %a_t_122): [
.L_entry:
  endphi;
  %v_t_121 := load int & param 1 %a_t_121;
  %v_t_122 := load int & param 2 %a_t_122;
  call boolean ~cl_TopLevel.printInt (int %v_t_121);
  %v_t_125 := newstr "/";
  call boolean ~cl_TopLevel.printString (String & %v_t_125);
  call boolean ~cl_TopLevel.printInt (int %v_t_122);
  %v_t_128 := int %v_t_121 / int %v_t_122;
  endphi;
  return int %v_t_128;
]


[94m[Info]    [0m[Reporting.Logs.logInfo#75] >> END STEP Final liveness analysis...


[94m[Info]    [0m[Reporting.Logs.logInfo#75] COMPL_ DONE./play.lat

CompiledProg ./play.lat:1:1 (Meta ./play.lat:1:1 [ClDef inside standard library (SymIdent "Array") [SymIdent "Array",SymIdent "Object"] [FldDef inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "Object"))) (SymIdent "elements"),FldDef inside standard library (Int inside standard library) (SymIdent "length"),FldDef inside standard library (Int inside standard library) (SymIdent "elementSize")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Array") (SymIdent "toString"))],ClDef ./play.lat:41:7 (SymIdent "Liczba") [SymIdent "Liczba",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:42:9 (Int ./play.lat:42:5) (SymIdent "v")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:43:9 (FType ./play.lat:43:9 (Int ./play.lat:43:5) []) (QIdent ./play.lat:43:9 (SymIdent "Liczba") (SymIdent "value"))],ClDef ./play.lat:66:7 (SymIdent "Minus") [SymIdent "Minus",SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:48:10 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:49:10 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:54:9 (FType ./play.lat:54:9 (Int ./play.lat:54:5) []) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:67:9 (FType ./play.lat:67:9 (Int ./play.lat:67:5) [Int ./play.lat:67:18,Int ./play.lat:67:25]) (QIdent ./play.lat:67:9 (SymIdent "Minus") (SymIdent "operator"))],ClDef ./play.lat:35:7 (SymIdent "Node") [SymIdent "Node",SymIdent "Object"] [] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:36:9 (FType ./play.lat:36:9 (Int ./play.lat:36:5) []) (QIdent ./play.lat:36:9 (SymIdent "Node") (SymIdent "value"))],ClDef inside standard library (SymIdent "Object") [SymIdent "Object"] [] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString"))],ClDef ./play.lat:47:7 (SymIdent "Operator") [SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:48:10 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:49:10 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:50:9 (FType ./play.lat:50:9 (Int ./play.lat:50:5) [Int ./play.lat:50:18,Int ./play.lat:50:26]) (QIdent ./play.lat:50:9 (SymIdent "Operator") (SymIdent "operator")),MthdDef ./play.lat:54:9 (FType ./play.lat:54:9 (Int ./play.lat:54:5) []) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value"))],ClDef ./play.lat:58:7 (SymIdent "Plus") [SymIdent "Plus",SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:48:10 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:49:10 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:54:9 (FType ./play.lat:54:9 (Int ./play.lat:54:5) []) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:59:9 (FType ./play.lat:59:9 (Int ./play.lat:59:5) [Int ./play.lat:59:18,Int ./play.lat:59:25]) (QIdent ./play.lat:59:9 (SymIdent "Plus") (SymIdent "operator"))],ClDef ./play.lat:82:7 (SymIdent "Podziel") [SymIdent "Podziel",SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:48:10 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:49:10 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:54:9 (FType ./play.lat:54:9 (Int ./play.lat:54:5) []) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:83:9 (FType ./play.lat:83:9 (Int ./play.lat:83:5) [Int ./play.lat:83:18,Int ./play.lat:83:25]) (QIdent ./play.lat:83:9 (SymIdent "Podziel") (SymIdent "operator"))],ClDef ./play.lat:74:7 (SymIdent "Razy") [SymIdent "Razy",SymIdent "Operator",SymIdent "Node",SymIdent "Object"] [FldDef ./play.lat:48:10 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (SymIdent "left"),FldDef ./play.lat:49:10 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (SymIdent "right")] [MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "Object") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "getHashCode")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:54:9 (FType ./play.lat:54:9 (Int ./play.lat:54:5) []) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:75:9 (FType ./play.lat:75:9 (Int ./play.lat:75:5) [Int ./play.lat:75:18,Int ./play.lat:75:25]) (QIdent ./play.lat:75:9 (SymIdent "Razy") (SymIdent "operator"))],ClDef inside standard library (SymIdent "String") [SymIdent "String",SymIdent "Object"] [] [MthdDef inside standard library (FType inside standard library (Int inside standard library) [Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "charAt")),MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "Object"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "equals")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "concat")),MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "startsWith")),MthdDef inside standard library (FType inside standard library (Bool inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String"))]) (QIdent inside standard library (SymIdent "String") (SymIdent "endsWith")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Arr inside standard library (Int inside standard library))) []) (QIdent inside standard library (SymIdent "String") (SymIdent "getBytes")),MthdDef inside standard library (FType inside standard library (Int inside standard library) [Ref inside standard library (Cl inside standard library (SymIdent "String")),Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "indexOf")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "String") (SymIdent "length")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) [Int inside standard library,Int inside standard library]) (QIdent inside standard library (SymIdent "String") (SymIdent "substring")),MthdDef inside standard library (FType inside standard library (Ref inside standard library (Cl inside standard library (SymIdent "String"))) []) (QIdent inside standard library (SymIdent "String") (SymIdent "toString")),MthdDef inside standard library (FType inside standard library (Int inside standard library) []) (QIdent inside standard library (SymIdent "String") (SymIdent "getHashCode"))],ClDef ./play.lat:1:1 (SymIdent "~cl_TopLevel") [] [] [MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Array"))) []) (QIdent ./play.lat:1:1 (SymIdent "Array") (SymIdent "toString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))) []) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "toString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "getHashCode")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "Object") (SymIdent "equals")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "equals")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "getHashCode")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "toString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "substring")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "length")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String")),Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "indexOf")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "getBytes")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "endsWith")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "startsWith")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String")),Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "concat")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "String") (SymIdent "charAt")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printInt")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printByte")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printBoolean")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Array"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "printBinArray")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "byteToString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Bool ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "boolToString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) [Int ./play.lat:1:1]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "intToString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "print")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Bool ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "error")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "readInt")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "String"))) []) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "readString")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))) [Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object")),Ref ./play.lat:1:1 (Cl ./play.lat:1:1 (SymIdent "Object"))]) (QIdent ./play.lat:1:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")),MthdDef ./play.lat:1:1 (FType ./play.lat:1:1 (Int ./play.lat:1:1) []) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")),MthdDef ./play.lat:6:1 (FType ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) [Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node")),Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))]) (QIdent ./play.lat:6:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")),MthdDef ./play.lat:12:1 (FType ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) [Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node")),Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))]) (QIdent ./play.lat:12:6 (SymIdent "~cl_TopLevel") (SymIdent "razy")),MthdDef ./play.lat:18:1 (FType ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) [Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node")),Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))]) (QIdent ./play.lat:18:6 (SymIdent "~cl_TopLevel") (SymIdent "podziel")),MthdDef ./play.lat:24:1 (FType ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) [Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node")),Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))]) (QIdent ./play.lat:24:6 (SymIdent "~cl_TopLevel") (SymIdent "minus")),MthdDef ./play.lat:30:1 (FType ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) [Int ./play.lat:30:13]) (QIdent ./play.lat:30:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")),MthdDef ./play.lat:36:5 (FType ./play.lat:36:5 (Int ./play.lat:36:5) [Ref  (Cl  (SymIdent "Node"))]) (QIdent ./play.lat:36:9 (SymIdent "Node") (SymIdent "value")),MthdDef ./play.lat:43:5 (FType ./play.lat:43:5 (Int ./play.lat:43:5) [Ref  (Cl  (SymIdent "Liczba"))]) (QIdent ./play.lat:43:9 (SymIdent "Liczba") (SymIdent "value")),MthdDef ./play.lat:50:5 (FType ./play.lat:50:5 (Int ./play.lat:50:5) [Ref  (Cl  (SymIdent "Operator")),Int ./play.lat:50:18,Int ./play.lat:50:26]) (QIdent ./play.lat:50:9 (SymIdent "Operator") (SymIdent "operator")),MthdDef ./play.lat:54:5 (FType ./play.lat:54:5 (Int ./play.lat:54:5) [Ref  (Cl  (SymIdent "Operator"))]) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")),MthdDef ./play.lat:59:5 (FType ./play.lat:59:5 (Int ./play.lat:59:5) [Ref  (Cl  (SymIdent "Plus")),Int ./play.lat:59:18,Int ./play.lat:59:25]) (QIdent ./play.lat:59:9 (SymIdent "Plus") (SymIdent "operator")),MthdDef ./play.lat:67:5 (FType ./play.lat:67:5 (Int ./play.lat:67:5) [Ref  (Cl  (SymIdent "Minus")),Int ./play.lat:67:18,Int ./play.lat:67:25]) (QIdent ./play.lat:67:9 (SymIdent "Minus") (SymIdent "operator")),MthdDef ./play.lat:75:5 (FType ./play.lat:75:5 (Int ./play.lat:75:5) [Ref  (Cl  (SymIdent "Razy")),Int ./play.lat:75:18,Int ./play.lat:75:25]) (QIdent ./play.lat:75:9 (SymIdent "Razy") (SymIdent "operator")),MthdDef ./play.lat:83:5 (FType ./play.lat:83:5 (Int ./play.lat:83:5) [Ref  (Cl  (SymIdent "Podziel")),Int ./play.lat:83:18,Int ./play.lat:83:25]) (QIdent ./play.lat:83:9 (SymIdent "Podziel") (SymIdent "operator"))]]) [([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:1:1 (Int ./play.lat:1:1) (QIdent ./play.lat:1:5 (SymIdent "~cl_TopLevel") (SymIdent "main")) [] [ILabel ./play.lat:1:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:1:1,ICall ./play.lat:2:25 (ValIdent "%v_t_28") (Call ./play.lat:2:25 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:25 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:25 4] []),ICall ./play.lat:2:36 (ValIdent "%v_t_30") (Call ./play.lat:2:36 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:36 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:36 3] []),ICall ./play.lat:2:19 (ValIdent "%v_t_31") (Call ./play.lat:2:19 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:2:19 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [VVal ./play.lat:2:19 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%v_t_28"),VVal ./play.lat:2:19 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%v_t_30")] []),ICall ./play.lat:2:53 (ValIdent "%v_t_33") (Call ./play.lat:2:53 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:53 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:53 2] []),ICall ./play.lat:2:72 (ValIdent "%v_t_35") (Call ./play.lat:2:72 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:72 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:72 4] []),ICall ./play.lat:2:83 (ValIdent "%v_t_37") (Call ./play.lat:2:83 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:2:83 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [VInt ./play.lat:2:83 2] []),ICall ./play.lat:2:64 (ValIdent "%v_t_38") (Call ./play.lat:2:64 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:2:64 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [VVal ./play.lat:2:64 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%v_t_35"),VVal ./play.lat:2:64 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%v_t_37")] []),ICall ./play.lat:2:48 (ValIdent "%v_t_39") (Call ./play.lat:2:48 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:2:48 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [VVal ./play.lat:2:48 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%v_t_33"),VVal ./play.lat:2:48 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%v_t_38")] []),ICall ./play.lat:2:14 (ValIdent "%v_t_40") (Call ./play.lat:2:14 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:2:14 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [VVal ./play.lat:2:14 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%v_t_31"),VVal ./play.lat:2:14 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%v_t_39")] []),ICall ./play.lat:3:14 (ValIdent "%v_t_42") (CallVirt ./play.lat:3:14 (Int ./play.lat:36:5) (QIdent ./play.lat:3:14 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:3:14 (Ref ./play.lat:3:14 (Cl ./play.lat:3:14 (SymIdent "Node"))) (ValIdent "%v_t_40")]),IVCall ./play.lat:3:5 (Call ./play.lat:3:5 (Bool inside standard library) (QIdent ./play.lat:3:5 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:3:5 (Int inside standard library) (ValIdent "%v_t_42")] []),IEndPhi ./play.lat:1:1,IRet ./play.lat:1:1 (VInt ./play.lat:1:1 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_28",RBX),(ValIdent "%v_t_30",RAX),(ValIdent "%v_t_31",R13),(ValIdent "%v_t_33",R12),(ValIdent "%v_t_35",RBX),(ValIdent "%v_t_37",RAX),(ValIdent "%v_t_38",RAX),(ValIdent "%v_t_39",RAX),(ValIdent "%v_t_40",RAX),(ValIdent "%v_t_42",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_10_RSI",RSI),(ValIdent "~arg_11_RDI",RDI),(ValIdent "~arg_12_RSI",RSI),(ValIdent "~arg_13_RDI",RDI),(ValIdent "~arg_14_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI),(ValIdent "~arg_3_RSI",RSI),(ValIdent "~arg_4_RDI",RDI),(ValIdent "~arg_5_RDI",RDI),(ValIdent "~arg_6_RDI",RDI),(ValIdent "~arg_7_RDI",RDI),(ValIdent "~arg_8_RSI",RSI),(ValIdent "~arg_9_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:6 (SymIdent "~cl_TopLevel") (SymIdent "plus")) [Param ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node"))) (ValIdent "%a_t_45"),Param ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node"))) (ValIdent "%a_t_46")] [ILabel ./play.lat:6:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:6:1,ILoad ./play.lat:6:1 (ValIdent "%v_t_45") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:11 (Cl ./play.lat:6:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_45")),ILoad ./play.lat:6:1 (ValIdent "%v_t_46") (PParam ./play.lat:6:1 (Ref ./play.lat:6:1 (Ref ./play.lat:6:20 (Cl ./play.lat:6:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_46")),INew ./play.lat:7:20 (ValIdent "%v_t_47") (Cl ./play.lat:7:20 (SymIdent "Plus")),ICall ./play.lat:7:5 (ValIdent "%v_t_48") (Call ./play.lat:7:5 (Ref ./play.lat:7:5 (Cl ./play.lat:7:5 (SymIdent "Operator"))) (QIdent ./play.lat:7:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:7:5 (Ref ./play.lat:7:24 (Cl ./play.lat:7:24 (SymIdent "Plus"))) (ValIdent "%v_t_47")] [LabIdent "_class_Operator"]),IStore ./play.lat:8:5 (VVal ./play.lat:8:5 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Node"))) (ValIdent "%v_t_45")) (PFld ./play.lat:8:5 (Ref ./play.lat:8:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:8:5 (Ref ./play.lat:8:5 (Cl ./play.lat:8:5 (SymIdent "Operator"))) (ValIdent "%v_t_48")) (QIdent ./play.lat:8:5 (SymIdent "Operator") (SymIdent "left"))),IStore ./play.lat:9:5 (VVal ./play.lat:9:5 (Ref ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Node"))) (ValIdent "%v_t_46")) (PFld ./play.lat:9:5 (Ref ./play.lat:9:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:9:5 (Ref ./play.lat:9:5 (Cl ./play.lat:9:5 (SymIdent "Operator"))) (ValIdent "%v_t_48")) (QIdent ./play.lat:9:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:6:1 (ValIdent "%v_t_50") (Call ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (QIdent ./play.lat:6:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Operator"))) (ValIdent "%v_t_48")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:6:1,IRet ./play.lat:6:1 (VVal ./play.lat:6:1 (Ref ./play.lat:6:1 (Cl ./play.lat:6:1 (SymIdent "Node"))) (ValIdent "%v_t_50"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_45",RDI),(ValIdent "%a_t_46",RSI),(ValIdent "%v_t_45",R12),(ValIdent "%v_t_46",RBX),(ValIdent "%v_t_47",RAX),(ValIdent "%v_t_48",RAX),(ValIdent "%v_t_50",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:6 (SymIdent "~cl_TopLevel") (SymIdent "razy")) [Param ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node"))) (ValIdent "%a_t_51"),Param ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node"))) (ValIdent "%a_t_52")] [ILabel ./play.lat:12:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:12:1,ILoad ./play.lat:12:1 (ValIdent "%v_t_51") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:11 (Cl ./play.lat:12:11 (SymIdent "Node")))) 0 (ValIdent "%a_t_51")),ILoad ./play.lat:12:1 (ValIdent "%v_t_52") (PParam ./play.lat:12:1 (Ref ./play.lat:12:1 (Ref ./play.lat:12:20 (Cl ./play.lat:12:20 (SymIdent "Node")))) 1 (ValIdent "%a_t_52")),INew ./play.lat:13:20 (ValIdent "%v_t_53") (Cl ./play.lat:13:20 (SymIdent "Razy")),ICall ./play.lat:13:5 (ValIdent "%v_t_54") (Call ./play.lat:13:5 (Ref ./play.lat:13:5 (Cl ./play.lat:13:5 (SymIdent "Operator"))) (QIdent ./play.lat:13:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:13:5 (Ref ./play.lat:13:24 (Cl ./play.lat:13:24 (SymIdent "Razy"))) (ValIdent "%v_t_53")] [LabIdent "_class_Operator"]),IStore ./play.lat:14:5 (VVal ./play.lat:14:5 (Ref ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Node"))) (ValIdent "%v_t_51")) (PFld ./play.lat:14:5 (Ref ./play.lat:14:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:14:5 (Ref ./play.lat:14:5 (Cl ./play.lat:14:5 (SymIdent "Operator"))) (ValIdent "%v_t_54")) (QIdent ./play.lat:14:5 (SymIdent "Operator") (SymIdent "left"))),IStore ./play.lat:15:5 (VVal ./play.lat:15:5 (Ref ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Node"))) (ValIdent "%v_t_52")) (PFld ./play.lat:15:5 (Ref ./play.lat:15:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:15:5 (Ref ./play.lat:15:5 (Cl ./play.lat:15:5 (SymIdent "Operator"))) (ValIdent "%v_t_54")) (QIdent ./play.lat:15:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:12:1 (ValIdent "%v_t_56") (Call ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (QIdent ./play.lat:12:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Operator"))) (ValIdent "%v_t_54")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:12:1,IRet ./play.lat:12:1 (VVal ./play.lat:12:1 (Ref ./play.lat:12:1 (Cl ./play.lat:12:1 (SymIdent "Node"))) (ValIdent "%v_t_56"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_51",RDI),(ValIdent "%a_t_52",RSI),(ValIdent "%v_t_51",R12),(ValIdent "%v_t_52",RBX),(ValIdent "%v_t_53",RAX),(ValIdent "%v_t_54",RAX),(ValIdent "%v_t_56",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:6 (SymIdent "~cl_TopLevel") (SymIdent "podziel")) [Param ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node"))) (ValIdent "%a_t_57"),Param ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node"))) (ValIdent "%a_t_58")] [ILabel ./play.lat:18:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:18:1,ILoad ./play.lat:18:1 (ValIdent "%v_t_57") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:14 (Cl ./play.lat:18:14 (SymIdent "Node")))) 0 (ValIdent "%a_t_57")),ILoad ./play.lat:18:1 (ValIdent "%v_t_58") (PParam ./play.lat:18:1 (Ref ./play.lat:18:1 (Ref ./play.lat:18:23 (Cl ./play.lat:18:23 (SymIdent "Node")))) 1 (ValIdent "%a_t_58")),INew ./play.lat:19:20 (ValIdent "%v_t_59") (Cl ./play.lat:19:20 (SymIdent "Podziel")),ICall ./play.lat:19:5 (ValIdent "%v_t_60") (Call ./play.lat:19:5 (Ref ./play.lat:19:5 (Cl ./play.lat:19:5 (SymIdent "Operator"))) (QIdent ./play.lat:19:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:19:5 (Ref ./play.lat:19:24 (Cl ./play.lat:19:24 (SymIdent "Podziel"))) (ValIdent "%v_t_59")] [LabIdent "_class_Operator"]),IStore ./play.lat:20:5 (VVal ./play.lat:20:5 (Ref ./play.lat:20:5 (Cl ./play.lat:20:5 (SymIdent "Node"))) (ValIdent "%v_t_57")) (PFld ./play.lat:20:5 (Ref ./play.lat:20:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:20:5 (Ref ./play.lat:20:5 (Cl ./play.lat:20:5 (SymIdent "Operator"))) (ValIdent "%v_t_60")) (QIdent ./play.lat:20:5 (SymIdent "Operator") (SymIdent "left"))),IStore ./play.lat:21:5 (VVal ./play.lat:21:5 (Ref ./play.lat:21:5 (Cl ./play.lat:21:5 (SymIdent "Node"))) (ValIdent "%v_t_58")) (PFld ./play.lat:21:5 (Ref ./play.lat:21:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:21:5 (Ref ./play.lat:21:5 (Cl ./play.lat:21:5 (SymIdent "Operator"))) (ValIdent "%v_t_60")) (QIdent ./play.lat:21:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:18:1 (ValIdent "%v_t_62") (Call ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (QIdent ./play.lat:18:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Operator"))) (ValIdent "%v_t_60")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:18:1,IRet ./play.lat:18:1 (VVal ./play.lat:18:1 (Ref ./play.lat:18:1 (Cl ./play.lat:18:1 (SymIdent "Node"))) (ValIdent "%v_t_62"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_57",RDI),(ValIdent "%a_t_58",RSI),(ValIdent "%v_t_57",R12),(ValIdent "%v_t_58",RBX),(ValIdent "%v_t_59",RAX),(ValIdent "%v_t_60",RAX),(ValIdent "%v_t_62",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:6 (SymIdent "~cl_TopLevel") (SymIdent "minus")) [Param ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node"))) (ValIdent "%a_t_63"),Param ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node"))) (ValIdent "%a_t_64")] [ILabel ./play.lat:24:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:24:1,ILoad ./play.lat:24:1 (ValIdent "%v_t_63") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:12 (Cl ./play.lat:24:12 (SymIdent "Node")))) 0 (ValIdent "%a_t_63")),ILoad ./play.lat:24:1 (ValIdent "%v_t_64") (PParam ./play.lat:24:1 (Ref ./play.lat:24:1 (Ref ./play.lat:24:21 (Cl ./play.lat:24:21 (SymIdent "Node")))) 1 (ValIdent "%a_t_64")),INew ./play.lat:25:20 (ValIdent "%v_t_65") (Cl ./play.lat:25:20 (SymIdent "Minus")),ICall ./play.lat:25:5 (ValIdent "%v_t_66") (Call ./play.lat:25:5 (Ref ./play.lat:25:5 (Cl ./play.lat:25:5 (SymIdent "Operator"))) (QIdent ./play.lat:25:5 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:25:5 (Ref ./play.lat:25:24 (Cl ./play.lat:25:24 (SymIdent "Minus"))) (ValIdent "%v_t_65")] [LabIdent "_class_Operator"]),IStore ./play.lat:26:5 (VVal ./play.lat:26:5 (Ref ./play.lat:26:5 (Cl ./play.lat:26:5 (SymIdent "Node"))) (ValIdent "%v_t_63")) (PFld ./play.lat:26:5 (Ref ./play.lat:26:5 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:26:5 (Ref ./play.lat:26:5 (Cl ./play.lat:26:5 (SymIdent "Operator"))) (ValIdent "%v_t_66")) (QIdent ./play.lat:26:5 (SymIdent "Operator") (SymIdent "left"))),IStore ./play.lat:27:5 (VVal ./play.lat:27:5 (Ref ./play.lat:27:5 (Cl ./play.lat:27:5 (SymIdent "Node"))) (ValIdent "%v_t_64")) (PFld ./play.lat:27:5 (Ref ./play.lat:27:5 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:27:5 (Ref ./play.lat:27:5 (Cl ./play.lat:27:5 (SymIdent "Operator"))) (ValIdent "%v_t_66")) (QIdent ./play.lat:27:5 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:24:1 (ValIdent "%v_t_68") (Call ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (QIdent ./play.lat:24:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Operator"))) (ValIdent "%v_t_66")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:24:1,IRet ./play.lat:24:1 (VVal ./play.lat:24:1 (Ref ./play.lat:24:1 (Cl ./play.lat:24:1 (SymIdent "Node"))) (ValIdent "%v_t_68"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_63",RDI),(ValIdent "%a_t_64",RSI),(ValIdent "%v_t_63",R12),(ValIdent "%v_t_64",RBX),(ValIdent "%v_t_65",RAX),(ValIdent "%v_t_66",RAX),(ValIdent "%v_t_68",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:6 (SymIdent "~cl_TopLevel") (SymIdent "liczba")) [Param ./play.lat:30:1 (Int ./play.lat:30:13) (ValIdent "%a_t_69")] [ILabel ./play.lat:30:1 (LabIdent ".L_entry"),IEndPhi ./play.lat:30:1,ILoad ./play.lat:30:1 (ValIdent "%v_t_69") (PParam ./play.lat:30:1 (Ref ./play.lat:30:1 (Int ./play.lat:30:13)) 0 (ValIdent "%a_t_69")),INew ./play.lat:31:18 (ValIdent "%v_t_70") (Cl ./play.lat:31:18 (SymIdent "Liczba")),IStore ./play.lat:32:5 (VVal ./play.lat:32:5 (Int ./play.lat:32:5) (ValIdent "%v_t_69")) (PFld ./play.lat:32:5 (Ref ./play.lat:32:5 (Int ./play.lat:42:5)) (VVal ./play.lat:32:5 (Ref ./play.lat:32:5 (Cl ./play.lat:32:5 (SymIdent "Liczba"))) (ValIdent "%v_t_70")) (QIdent ./play.lat:32:5 (SymIdent "Liczba") (SymIdent "v"))),ICall ./play.lat:30:1 (ValIdent "%v_t_72") (Call ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (QIdent ./play.lat:30:1 (SymIdent "~cl_TopLevel") (SymIdent "__cast")) [VVal ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Liczba"))) (ValIdent "%v_t_70")] [LabIdent "_class_Node"]),IEndPhi ./play.lat:30:1,IRet ./play.lat:30:1 (VVal ./play.lat:30:1 (Ref ./play.lat:30:1 (Cl ./play.lat:30:1 (SymIdent "Node"))) (ValIdent "%v_t_72"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_69",RDI),(ValIdent "%v_t_69",RCX),(ValIdent "%v_t_70",RAX),(ValIdent "%v_t_72",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:36:5 (Int ./play.lat:36:5) (QIdent ./play.lat:36:9 (SymIdent "Node") (SymIdent "value")) [Param ./play.lat:36:5 (Ref  (Cl  (SymIdent "Node"))) (ValIdent "%a_t_73")] [ILabel ./play.lat:36:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:36:5,INewStr ./play.lat:37:21 (ValIdent "%v_t_75") "Node.value not implemented",IVCall ./play.lat:37:9 (Call ./play.lat:37:9 (Bool inside standard library) (QIdent ./play.lat:37:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:37:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_75")] []),IEndPhi ./play.lat:36:5,IRet ./play.lat:36:5 (VInt ./play.lat:36:5 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_75",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:43:5 (Int ./play.lat:43:5) (QIdent ./play.lat:43:9 (SymIdent "Liczba") (SymIdent "value")) [Param ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba"))) (ValIdent "%a_t_78")] [ILabel ./play.lat:43:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:43:5,ILoad ./play.lat:43:5 (ValIdent "%v_t_78") (PParam ./play.lat:43:5 (Ref ./play.lat:43:5 (Ref  (Cl  (SymIdent "Liczba")))) 0 (ValIdent "%a_t_78")),ILoad ./play.lat:44:16 (ValIdent "%v_t_79") (PFld ./play.lat:44:16 (Ref ./play.lat:44:16 (Int ./play.lat:42:5)) (VVal ./play.lat:44:16 (Cl ./play.lat:44:16 (SymIdent "Liczba")) (ValIdent "%v_t_78")) (QIdent ./play.lat:44:16 (SymIdent "Liczba") (SymIdent "v"))),IEndPhi ./play.lat:43:5,IRet ./play.lat:43:5 (VVal ./play.lat:43:5 (Int ./play.lat:43:5) (ValIdent "%v_t_79"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_78",RDI),(ValIdent "%v_t_78",RAX),(ValIdent "%v_t_79",RAX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:50:5 (Int ./play.lat:50:5) (QIdent ./play.lat:50:9 (SymIdent "Operator") (SymIdent "operator")) [Param ./play.lat:50:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_80"),Param ./play.lat:50:5 (Int ./play.lat:50:18) (ValIdent "%a_t_81"),Param ./play.lat:50:5 (Int ./play.lat:50:26) (ValIdent "%a_t_82")] [ILabel ./play.lat:50:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:50:5,INewStr ./play.lat:51:21 (ValIdent "%v_t_84") "Operator.operator not implemented",IVCall ./play.lat:51:9 (Call ./play.lat:51:9 (Bool inside standard library) (QIdent ./play.lat:51:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:51:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_84")] []),IEndPhi ./play.lat:50:5,IRet ./play.lat:50:5 (VInt ./play.lat:50:5 0)],RegAlloc {regAlloc = fromList [(ValIdent "%v_t_84",RAX),(ValIdent "~arg_0_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:54:5 (Int ./play.lat:54:5) (QIdent ./play.lat:54:9 (SymIdent "Operator") (SymIdent "value")) [Param ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%a_t_87")] [ILabel ./play.lat:54:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:54:5,ILoad ./play.lat:54:5 (ValIdent "%v_t_87") (PParam ./play.lat:54:5 (Ref ./play.lat:54:5 (Ref  (Cl  (SymIdent "Operator")))) 0 (ValIdent "%a_t_87")),ILoad ./play.lat:55:30 (ValIdent "%v_t_88") (PFld ./play.lat:55:30 (Ref ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node")))) (VVal ./play.lat:55:30 (Cl ./play.lat:55:30 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:30 (SymIdent "Operator") (SymIdent "left"))),ICall ./play.lat:55:30 (ValIdent "%v_t_89") (CallVirt ./play.lat:55:30 (Int ./play.lat:36:5) (QIdent ./play.lat:55:30 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:30 (Ref ./play.lat:48:5 (Cl ./play.lat:48:5 (SymIdent "Node"))) (ValIdent "%v_t_88")]),ILoad ./play.lat:55:44 (ValIdent "%v_t_90") (PFld ./play.lat:55:44 (Ref ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node")))) (VVal ./play.lat:55:44 (Cl ./play.lat:55:44 (SymIdent "Operator")) (ValIdent "%v_t_87")) (QIdent ./play.lat:55:44 (SymIdent "Operator") (SymIdent "right"))),ICall ./play.lat:55:44 (ValIdent "%v_t_91") (CallVirt ./play.lat:55:44 (Int ./play.lat:36:5) (QIdent ./play.lat:55:44 (SymIdent "Node") (SymIdent "value")) [VVal ./play.lat:55:44 (Ref ./play.lat:49:5 (Cl ./play.lat:49:5 (SymIdent "Node"))) (ValIdent "%v_t_90")]),ICall ./play.lat:55:16 (ValIdent "%v_t_92") (CallVirt ./play.lat:55:16 (Int ./play.lat:50:5) (QIdent ./play.lat:55:16 (SymIdent "Operator") (SymIdent "operator")) [VVal ./play.lat:55:16 (Ref  (Cl  (SymIdent "Operator"))) (ValIdent "%v_t_87"),VVal ./play.lat:55:16 (Int ./play.lat:50:18) (ValIdent "%v_t_89"),VVal ./play.lat:55:16 (Int ./play.lat:50:26) (ValIdent "%v_t_91")]),IEndPhi ./play.lat:54:5,IRet ./play.lat:54:5 (VVal ./play.lat:54:5 (Int ./play.lat:54:5) (ValIdent "%v_t_92"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_87",RDI),(ValIdent "%v_t_87",R12),(ValIdent "%v_t_88",RAX),(ValIdent "%v_t_89",RBX),(ValIdent "%v_t_90",RAX),(ValIdent "%v_t_91",RAX),(ValIdent "%v_t_92",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI),(ValIdent "~arg_3_RSI",RSI),(ValIdent "~arg_4_RDX",RDX)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:59:5 (Int ./play.lat:59:5) (QIdent ./play.lat:59:9 (SymIdent "Plus") (SymIdent "operator")) [Param ./play.lat:59:5 (Ref  (Cl  (SymIdent "Plus"))) (ValIdent "%a_t_93"),Param ./play.lat:59:5 (Int ./play.lat:59:18) (ValIdent "%a_t_94"),Param ./play.lat:59:5 (Int ./play.lat:59:25) (ValIdent "%a_t_95")] [ILabel ./play.lat:59:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:59:5,ILoad ./play.lat:59:5 (ValIdent "%v_t_94") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:18)) 1 (ValIdent "%a_t_94")),ILoad ./play.lat:59:5 (ValIdent "%v_t_95") (PParam ./play.lat:59:5 (Ref ./play.lat:59:5 (Int ./play.lat:59:25)) 2 (ValIdent "%a_t_95")),IVCall ./play.lat:60:9 (Call ./play.lat:60:9 (Bool inside standard library) (QIdent ./play.lat:60:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:60:9 (Int inside standard library) (ValIdent "%v_t_94")] []),INewStr ./play.lat:61:21 (ValIdent "%v_t_98") "+",IVCall ./play.lat:61:9 (Call ./play.lat:61:9 (Bool inside standard library) (QIdent ./play.lat:61:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:61:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_98")] []),IVCall ./play.lat:62:9 (Call ./play.lat:62:9 (Bool inside standard library) (QIdent ./play.lat:62:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:62:9 (Int inside standard library) (ValIdent "%v_t_95")] []),IOp ./play.lat:63:18 (ValIdent "%v_t_101") (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_94")) (OpAdd ./play.lat:63:18) (VVal ./play.lat:63:18 (Int ./play.lat:59:18) (ValIdent "%v_t_95")),IEndPhi ./play.lat:59:5,IRet ./play.lat:59:5 (VVal ./play.lat:59:5 (Int ./play.lat:59:5) (ValIdent "%v_t_101"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_94",RSI),(ValIdent "%a_t_95",RDX),(ValIdent "%v_t_101",RAX),(ValIdent "%v_t_94",R12),(ValIdent "%v_t_95",RBX),(ValIdent "%v_t_98",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:67:5 (Int ./play.lat:67:5) (QIdent ./play.lat:67:9 (SymIdent "Minus") (SymIdent "operator")) [Param ./play.lat:67:5 (Ref  (Cl  (SymIdent "Minus"))) (ValIdent "%a_t_102"),Param ./play.lat:67:5 (Int ./play.lat:67:18) (ValIdent "%a_t_103"),Param ./play.lat:67:5 (Int ./play.lat:67:25) (ValIdent "%a_t_104")] [ILabel ./play.lat:67:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:67:5,ILoad ./play.lat:67:5 (ValIdent "%v_t_103") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:18)) 1 (ValIdent "%a_t_103")),ILoad ./play.lat:67:5 (ValIdent "%v_t_104") (PParam ./play.lat:67:5 (Ref ./play.lat:67:5 (Int ./play.lat:67:25)) 2 (ValIdent "%a_t_104")),IVCall ./play.lat:68:9 (Call ./play.lat:68:9 (Bool inside standard library) (QIdent ./play.lat:68:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:68:9 (Int inside standard library) (ValIdent "%v_t_103")] []),INewStr ./play.lat:69:21 (ValIdent "%v_t_107") "-",IVCall ./play.lat:69:9 (Call ./play.lat:69:9 (Bool inside standard library) (QIdent ./play.lat:69:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:69:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_107")] []),IVCall ./play.lat:70:9 (Call ./play.lat:70:9 (Bool inside standard library) (QIdent ./play.lat:70:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:70:9 (Int inside standard library) (ValIdent "%v_t_104")] []),IOp ./play.lat:71:18 (ValIdent "%v_t_110") (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_103")) (OpSub ./play.lat:71:18) (VVal ./play.lat:71:18 (Int ./play.lat:67:18) (ValIdent "%v_t_104")),IEndPhi ./play.lat:67:5,IRet ./play.lat:67:5 (VVal ./play.lat:67:5 (Int ./play.lat:67:5) (ValIdent "%v_t_110"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_103",RSI),(ValIdent "%a_t_104",RDX),(ValIdent "%v_t_103",R12),(ValIdent "%v_t_104",RBX),(ValIdent "%v_t_107",RAX),(ValIdent "%v_t_110",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:75:5 (Int ./play.lat:75:5) (QIdent ./play.lat:75:9 (SymIdent "Razy") (SymIdent "operator")) [Param ./play.lat:75:5 (Ref  (Cl  (SymIdent "Razy"))) (ValIdent "%a_t_111"),Param ./play.lat:75:5 (Int ./play.lat:75:18) (ValIdent "%a_t_112"),Param ./play.lat:75:5 (Int ./play.lat:75:25) (ValIdent "%a_t_113")] [ILabel ./play.lat:75:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:75:5,ILoad ./play.lat:75:5 (ValIdent "%v_t_112") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:18)) 1 (ValIdent "%a_t_112")),ILoad ./play.lat:75:5 (ValIdent "%v_t_113") (PParam ./play.lat:75:5 (Ref ./play.lat:75:5 (Int ./play.lat:75:25)) 2 (ValIdent "%a_t_113")),IVCall ./play.lat:76:9 (Call ./play.lat:76:9 (Bool inside standard library) (QIdent ./play.lat:76:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:76:9 (Int inside standard library) (ValIdent "%v_t_112")] []),INewStr ./play.lat:77:21 (ValIdent "%v_t_116") "*",IVCall ./play.lat:77:9 (Call ./play.lat:77:9 (Bool inside standard library) (QIdent ./play.lat:77:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:77:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_116")] []),IVCall ./play.lat:78:9 (Call ./play.lat:78:9 (Bool inside standard library) (QIdent ./play.lat:78:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:78:9 (Int inside standard library) (ValIdent "%v_t_113")] []),IOp ./play.lat:79:18 (ValIdent "%v_t_119") (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_112")) (OpMul ./play.lat:79:18) (VVal ./play.lat:79:18 (Int ./play.lat:75:18) (ValIdent "%v_t_113")),IEndPhi ./play.lat:75:5,IRet ./play.lat:75:5 (VVal ./play.lat:75:5 (Int ./play.lat:75:5) (ValIdent "%v_t_119"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_112",RSI),(ValIdent "%a_t_113",RDX),(ValIdent "%v_t_112",R12),(ValIdent "%v_t_113",RBX),(ValIdent "%v_t_116",RAX),(ValIdent "%v_t_119",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI)], numLocals = 0}),([".L_entry"]
".L_entry" -> fromList [] <- fromList []
,Mthd ./play.lat:83:5 (Int ./play.lat:83:5) (QIdent ./play.lat:83:9 (SymIdent "Podziel") (SymIdent "operator")) [Param ./play.lat:83:5 (Ref  (Cl  (SymIdent "Podziel"))) (ValIdent "%a_t_120"),Param ./play.lat:83:5 (Int ./play.lat:83:18) (ValIdent "%a_t_121"),Param ./play.lat:83:5 (Int ./play.lat:83:25) (ValIdent "%a_t_122")] [ILabel ./play.lat:83:5 (LabIdent ".L_entry"),IEndPhi ./play.lat:83:5,ILoad ./play.lat:83:5 (ValIdent "%v_t_121") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:18)) 1 (ValIdent "%a_t_121")),ILoad ./play.lat:83:5 (ValIdent "%v_t_122") (PParam ./play.lat:83:5 (Ref ./play.lat:83:5 (Int ./play.lat:83:25)) 2 (ValIdent "%a_t_122")),IVCall ./play.lat:84:9 (Call ./play.lat:84:9 (Bool inside standard library) (QIdent ./play.lat:84:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:84:9 (Int inside standard library) (ValIdent "%v_t_121")] []),INewStr ./play.lat:85:21 (ValIdent "%v_t_125") "/",IVCall ./play.lat:85:9 (Call ./play.lat:85:9 (Bool inside standard library) (QIdent ./play.lat:85:9 (SymIdent "~cl_TopLevel") (SymIdent "printString")) [VVal ./play.lat:85:9 (Ref inside standard library (Cl inside standard library (SymIdent "String"))) (ValIdent "%v_t_125")] []),IVCall ./play.lat:86:9 (Call ./play.lat:86:9 (/usr/bin/ld: /tmp/ccsIykmd.o: warning: relocation in read-only section `.rodata'
/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
Bool inside standard library) (QIdent ./play.lat:86:9 (SymIdent "~cl_TopLevel") (SymIdent "printInt")) [VVal ./play.lat:86:9 (Int inside standard library) (ValIdent "%v_t_122")] []),IOp ./play.lat:87:18 (ValIdent "%v_t_128") (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_121")) (OpDiv ./play.lat:87:18) (VVal ./play.lat:87:18 (Int ./play.lat:83:18) (ValIdent "%v_t_122")),IEndPhi ./play.lat:83:5,IRet ./play.lat:83:5 (VVal ./play.lat:83:5 (Int ./play.lat:83:5) (ValIdent "%v_t_128"))],RegAlloc {regAlloc = fromList [(ValIdent "%a_t_121",RSI),(ValIdent "%a_t_122",RDX),(ValIdent "%v_t_121",R12),(ValIdent "%v_t_122",RBX),(ValIdent "%v_t_125",RAX),(ValIdent "%v_t_128",RAX),(ValIdent "~arg_0_RDI",RDI),(ValIdent "~arg_1_RDI",RDI),(ValIdent "~arg_2_RDI",RDI),(ValIdent "~div_0_rax",RAX),(ValIdent "~div_0_rdx",RDX)], numLocals = 0})]
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Running correct compiler backend: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 8
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 24
[94m[Info]    [0m[Reporting.Logs.logInfo#75] emitMethod Fix method stack offsets 40
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Created file: ./play.s
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Calling backend compile step: X64
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Run GCC for X64 backend to generate './play' executable from object file './play.o'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Executing command 'gcc -fPIE -Lsrc/Runtime/dependencies/_built_/lib lib/runtime -l:libunistring.a ./play.s -o ./play -z noexecstack'
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Command executed successfully.
[94m[Info]    [0m[Reporting.Logs.logInfo#75] X64 compilation of './play.s' seems to be successfull
[94m[Info]    [0m[Reporting.Logs.logInfo#75] Backend code generation completed successfully ./play.lat -> ./play
[94m[Info]    [0m[Reporting.Logs.logInfo#75] DONE
